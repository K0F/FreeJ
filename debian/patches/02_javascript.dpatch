#! /bin/sh /usr/share/dpatch/dpatch-run
## 02_javascript.dpatch by Guido Trotter <ultrotter@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -ru freej-0.9/src/geo_layer_js.cpp freej-0.9+dl0/src/geo_layer_js.cpp
--- freej-0.9/src/geo_layer_js.cpp	2007-09-01 20:21:16.000000000 +0200
+++ freej-0.9+dl0/src/geo_layer_js.cpp	2007-09-16 10:25:59.581716732 +0200
@@ -102,11 +102,11 @@
     lay->color = (uint32_t)*hex;
     
   } else {
-      js_ValueToUint16(cx, argv[0], &r);
-      js_ValueToUint16(cx, argv[1], &g);
-      js_ValueToUint16(cx, argv[2], &b);
+      JS_ValueToUint16(cx, argv[0], &r);
+      JS_ValueToUint16(cx, argv[1], &g);
+      JS_ValueToUint16(cx, argv[2], &b);
       if (argc == 4) 
-          js_ValueToUint16(cx, argv[3], &a);
+          JS_ValueToUint16(cx, argv[3], &a);
       else
         a = 0xff;
     
@@ -123,8 +123,8 @@
   GET_LAYER(GeoLayer);
   
   uint16_t x,y;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
 
   OPTIONAL_COLOR_ARG(2);
 
@@ -140,9 +140,9 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,x2,y;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &x2);
-  js_ValueToUint16(cx, argv[2], &y);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &x2);
+  JS_ValueToUint16(cx, argv[2], &y);
 
   OPTIONAL_COLOR_ARG(3);
 
@@ -158,9 +158,9 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y1,y2;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y1);
-  js_ValueToUint16(cx, argv[2], &y2);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[2], &y2);
 
   OPTIONAL_COLOR_ARG(3);
 
@@ -177,11 +177,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,x2,y1,y2;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
 
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
 
 //uint32_t col;
   OPTIONAL_COLOR_ARG(4);
@@ -198,11 +198,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,x2,y1,y2;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
 
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
 
 //uint32_t col;
   OPTIONAL_COLOR_ARG(4);
@@ -219,11 +219,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,x2,y1,y2;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
 
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
 
   OPTIONAL_COLOR_ARG(4);
 
@@ -239,11 +239,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,x2,y1,y2;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
 
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
 
   OPTIONAL_COLOR_ARG(4);
   
@@ -259,9 +259,9 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,r;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &r);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &r);
 
   OPTIONAL_COLOR_ARG(3);
 
@@ -277,9 +277,9 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,r;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &r);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &r);
 
   OPTIONAL_COLOR_ARG(3);
 
@@ -295,9 +295,9 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,r;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &r);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &r);
 
   OPTIONAL_COLOR_ARG(3);
 
@@ -313,10 +313,10 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,rx,ry;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &rx);
-  js_ValueToUint16(cx, argv[2], &ry);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &rx);
+  JS_ValueToUint16(cx, argv[2], &ry);
 
   OPTIONAL_COLOR_ARG(4);
 
@@ -332,10 +332,10 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,rx,ry;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &rx);
-  js_ValueToUint16(cx, argv[2], &ry);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &rx);
+  JS_ValueToUint16(cx, argv[2], &ry);
 
   OPTIONAL_COLOR_ARG(4);
 
@@ -351,10 +351,10 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,rx,ry;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &rx);
-  js_ValueToUint16(cx, argv[2], &ry);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &rx);
+  JS_ValueToUint16(cx, argv[2], &ry);
 
   OPTIONAL_COLOR_ARG(4);
 
@@ -370,11 +370,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,rad,start,end;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &rad);
-  js_ValueToUint16(cx, argv[3], &start);
-  js_ValueToUint16(cx, argv[4], &end);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &rad);
+  JS_ValueToUint16(cx, argv[3], &start);
+  JS_ValueToUint16(cx, argv[4], &end);
 
   OPTIONAL_COLOR_ARG(5);
 
@@ -390,11 +390,11 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x,y,rad,start,end;
-  js_ValueToUint16(cx, argv[0], &x);
-  js_ValueToUint16(cx, argv[1], &y);
-  js_ValueToUint16(cx, argv[2], &rad);
-  js_ValueToUint16(cx, argv[3], &start);
-  js_ValueToUint16(cx, argv[4], &end);
+  JS_ValueToUint16(cx, argv[0], &x);
+  JS_ValueToUint16(cx, argv[1], &y);
+  JS_ValueToUint16(cx, argv[2], &rad);
+  JS_ValueToUint16(cx, argv[3], &start);
+  JS_ValueToUint16(cx, argv[4], &end);
 
   OPTIONAL_COLOR_ARG(5);
 
@@ -410,12 +410,12 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,y1,x2,y2,x3,y3;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
-  js_ValueToUint16(cx, argv[4], &x3);
-  js_ValueToUint16(cx, argv[5], &y3);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[4], &x3);
+  JS_ValueToUint16(cx, argv[5], &y3);
 
   OPTIONAL_COLOR_ARG(6);
 
@@ -431,12 +431,12 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,y1,x2,y2,x3,y3;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
-  js_ValueToUint16(cx, argv[4], &x3);
-  js_ValueToUint16(cx, argv[5], &y3);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[4], &x3);
+  JS_ValueToUint16(cx, argv[5], &y3);
 
   OPTIONAL_COLOR_ARG(6);
 
@@ -452,12 +452,12 @@
   GET_LAYER(GeoLayer);
 
   uint16_t x1,y1,x2,y2,x3,y3;
-  js_ValueToUint16(cx, argv[0], &x1);
-  js_ValueToUint16(cx, argv[1], &y1);
-  js_ValueToUint16(cx, argv[2], &x2);
-  js_ValueToUint16(cx, argv[3], &y2);
-  js_ValueToUint16(cx, argv[4], &x3);
-  js_ValueToUint16(cx, argv[5], &y3);
+  JS_ValueToUint16(cx, argv[0], &x1);
+  JS_ValueToUint16(cx, argv[1], &y1);
+  JS_ValueToUint16(cx, argv[2], &x2);
+  JS_ValueToUint16(cx, argv[3], &y2);
+  JS_ValueToUint16(cx, argv[4], &x3);
+  JS_ValueToUint16(cx, argv[5], &y3);
 
   OPTIONAL_COLOR_ARG(6);
 
diff -ru freej-0.9.1+dl0/src/include/callbacks_js.h freej-0.9.1+dl0_t/src/include/callbacks_js.h
--- freej-0.9.1+dl0/src/include/callbacks_js.h	2007-11-26 01:25:20.000000000 +0100
+++ freej-0.9.1+dl0_t/src/include/callbacks_js.h	2008-01-04 15:36:59.997198767 +0100
@@ -33,18 +33,6 @@
 #include <jscntxt.h>
 
 // stuff for exception handling "try{} catch(e) {}"
-typedef enum JSExnType {
-    JSEXN_NONE = -1,
-        JSEXN_ERR,
-        JSEXN_INTERNALERR,
-        JSEXN_EVALERR,
-        JSEXN_RANGEERR,
-        JSEXN_REFERENCEERR,
-        JSEXN_SYNTAXERR,
-        JSEXN_TYPEERR,
-        JSEXN_URIERR,
-        JSEXN_LIMIT
-} JSExnType;
 /* FIXME:
 I don't know how to override which JSException type we want ... we don't get ours from jsfreej.msg api still uses js.msg :(
 static JSExnType errorToExceptionNum[] = {
@@ -135,7 +123,7 @@
     JS_ReportErrorNumber(cx, JSFreej_GetErrorMessage, NULL,                   \
                          JSSMSG_FJ_CANT_CREATE, __func__,                     \
                       "cannot create constructor_class");                     \
-    cx->newborn[GCX_OBJECT] = NULL;                                           \
+    cx->weakRoots.newborn[GCX_OBJECT] = NULL;                                 \
     return JS_FALSE;						              \
   }									      \
   rval = (jsval*)layer->js_constructor(env, cx, obj, argc, argv, excp_msg);   \
@@ -143,7 +131,7 @@
     delete layer;                                                             \
     JS_ReportErrorNumber(cx, JSFreej_GetErrorMessage, NULL,                   \
                          JSSMSG_FJ_CANT_CREATE, __func__, excp_msg);          \
-    cx->newborn[GCX_OBJECT] = NULL;                                           \
+    cx->weakRoots.newborn[GCX_OBJECT] = NULL;                                 \
     return JS_FALSE;                                                          \
   }                                                                           \
   return JS_TRUE;							      \
diff -ru freej-0.9.1+dl0/src/joy_ctrl.cpp freej-0.9.1+dl0_t/src/joy_ctrl.cpp
--- freej-0.9.1+dl0/src/joy_ctrl.cpp	2007-11-26 01:25:21.000000000 +0100
+++ freej-0.9.1+dl0_t/src/joy_ctrl.cpp	2008-01-04 15:40:42.191209758 +0100
@@ -216,7 +216,7 @@
 error:
     JS_ReportErrorNumber(cx, JSFreej_GetErrorMessage, NULL,
               JSSMSG_FJ_CANT_CREATE, __func__, excp_msg);
-    cx->newborn[GCX_OBJECT] = NULL;
+    cx->weakRoots.newborn[GCX_OBJECT] = NULL;
     delete joy; return JS_FALSE;
 }
 
diff -ru freej-0.9.1+dl0/src/filter_js.cpp freej-0.9.1+dl0_t/src/filter_js.cpp
--- freej-0.9.1+dl0/src/filter_js.cpp	2007-11-26 01:25:21.000000000 +0100
+++ freej-0.9.1+dl0_t/src/filter_js.cpp	2008-01-04 15:49:06.429198108 +0100
@@ -103,7 +103,7 @@
   case PARAM_BOOL:
   case PARAM_NUMBER:
     {
-      if(!js_ValueToNumber(cx, argv[1], &val[0])) {
+      if(!JS_ValueToNumber(cx, argv[1], &val[0])) {
 	error("set parameter called with an invalid value for filter %s",
 	      duo->proto->name);
 	return JS_TRUE;
@@ -117,12 +117,12 @@
       break; 
     }
   case PARAM_POSITION:
-    if(!js_ValueToNumber(cx, argv[1], &val[0])) {
+    if(!JS_ValueToNumber(cx, argv[1], &val[0])) {
       error("set parameter called with an invalid value for filter %s",
 	    duo->proto->name);
       return JS_TRUE;
     }
-    if(!js_ValueToNumber(cx, argv[2], &val[1])) {
+    if(!JS_ValueToNumber(cx, argv[2], &val[1])) {
       error("set parameter called with an invalid value for filter %s",
 	    duo->proto->name);
       return JS_TRUE;
diff -ru freej-0.9.1+dl0/src/layer_js.cpp freej-0.9.1+dl0_t/src/layer_js.cpp
--- freej-0.9.1+dl0/src/layer_js.cpp	2007-11-26 01:25:21.000000000 +0100
+++ freej-0.9.1+dl0_t/src/layer_js.cpp	2008-01-04 15:47:10.962209975 +0100
@@ -83,8 +83,8 @@
       return NULL;    }
     
   } else if(argc==2) {
-    js_ValueToUint16(cx, argv[0], &width);
-    js_ValueToUint16(cx, argv[1], &height);
+    JS_ValueToUint16(cx, argv[0], &width);
+    JS_ValueToUint16(cx, argv[1], &height);
     if(!init(env, width, height)) {
       snprintf(err_msg, MAX_ERR_MSG,
 	       "Layer constructor failed initialization w[%u] h[%u]", width, height);
@@ -92,8 +92,8 @@
     }
     
   } else if(argc==3) {
-    js_ValueToUint16(cx, argv[0], &width);
-    js_ValueToUint16(cx, argv[1], &height);
+    JS_ValueToUint16(cx, argv[0], &width);
+    JS_ValueToUint16(cx, argv[1], &height);
     JS_ARG_STRING(filename,2);
     if(!init(env, width, height)) {
       snprintf(err_msg, MAX_ERR_MSG,
@@ -382,8 +382,8 @@
     GET_LAYER(Layer);
 
     int new_x_position, new_y_position;
-    js_ValueToInt32(cx, argv[0], &new_x_position); 
-    js_ValueToInt32(cx, argv[1], &new_y_position); 
+    JS_ValueToInt32(cx, argv[0], &new_x_position); 
+    JS_ValueToInt32(cx, argv[1], &new_y_position); 
     lay->set_position(new_x_position,new_y_position);
 
     return JS_TRUE;

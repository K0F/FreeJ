#! /bin/sh /usr/share/dpatch/dpatch-run
## 03_gcc4.dpatch by Guido Trotter <ultrotter@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Fix to build with gcc 4.0

@DPATCH@
diff -urNad --exclude=CVS --exclude=.svn ./src/console.cpp /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/console.cpp
--- ./src/console.cpp	2005-07-11 08:49:53.000000000 +0000
+++ /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/console.cpp	2005-07-11 08:52:51.000000000 +0000
@@ -24,6 +24,8 @@
 #include <unistd.h>
 #include <dirent.h>
 
+#include <errno.h>
+
 #include <signal.h>
 #include <slang.h>
 #include <context.h>
@@ -82,7 +84,6 @@
       SLsmg_gotorc(SLtt_Screen_Rows - 1,cursor+1)
 
 
-
 static Context *env;
 
 static bool screen_size_changed;
@@ -96,7 +97,7 @@
 static void sigint_handler (int sig) {
   SLsignal_intr (SIGINT, sigint_handler);
   keyboard_quit = true;
-  if (SLang_Ignore_User_Abort == 0) SLang_Error = USER_BREAK;
+//  if (SLang_Ignore_User_Abort == 0) SLang_Error = USER_BREAK;
 }
 
 /* non blocking getkey */
diff -urNad --exclude=CVS --exclude=.svn ./src/context.cpp /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/context.cpp
--- ./src/context.cpp	2005-07-11 08:49:53.000000000 +0000
+++ /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/context.cpp	2005-07-11 08:52:51.000000000 +0000
@@ -26,6 +26,8 @@
 #include <assert.h>
 #include <context.h>
 
+#include <errno.h>
+
 #include <sdl_screen.h>
 #include <imagefilter.h>
 #include <jsparser.h>
diff -urNad --exclude=CVS --exclude=.svn ./src/fastmemcpy.cpp /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/fastmemcpy.cpp
--- ./src/fastmemcpy.cpp	2005-07-11 08:49:53.000000000 +0000
+++ /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/fastmemcpy.cpp	2005-07-11 08:52:51.000000000 +0000
@@ -229,8 +229,8 @@
 		MOVNTQ" %%mm6, 48(%1)\n"
 		MOVNTQ" %%mm7, 56(%1)\n"
 		:: "r" (from), "r" (to) : "memory");
-		((const unsigned char *)from)+=64;
-		((unsigned char *)to)+=64;
+		from = (const unsigned char *) from + 64;
+		to = (unsigned char *) to + 64;
 	}
 #ifdef HAVE_MMX2
                 /* since movntq is weakly-ordered, a "sfence"
@@ -316,8 +316,8 @@
                                     "movq %%mm6, 48(%1)\n"
                                     "movq %%mm7, 56(%1)\n"
                                     :: "r" (from), "r" (to) : "memory");
-               ((const unsigned char *)from)+=64;
-               ((unsigned char *)to)+=64;
+               from = (const unsigned char*) from + 64;
+               to = (unsigned char*) to + 64;
           }
           __asm__ __volatile__ ("emms":::"memory");
      }
@@ -403,8 +403,8 @@
                                     "movntq %%mm6, 48(%1)\n"
                                     "movntq %%mm7, 56(%1)\n"
                                     :: "r" (from), "r" (to) : "memory");
-               ((const unsigned char *)from)+=64;
-               ((unsigned char *)to)+=64;
+               from = (const unsigned char *) from + 64;
+               to = (unsigned char *) to + 64;
           }
           /* since movntq is weakly-ordered, a "sfence"
           * is needed to become ordered again. */
@@ -461,8 +461,8 @@
                                          "movntps %%xmm2, 32(%1)\n"
                                          "movntps %%xmm3, 48(%1)\n"
                                          :: "r" (from), "r" (to) : "memory");
-                    ((const unsigned char *)from)+=64;
-                    ((unsigned char *)to)+=64;
+                    from = (const unsigned char *) from + 64;
+                    to = (unsigned char *) to + 64;
                }
           else
                /*
@@ -483,8 +483,8 @@
                                          "movntps %%xmm2, 32(%1)\n"
                                          "movntps %%xmm3, 48(%1)\n"
                                          :: "r" (from), "r" (to) : "memory");
-                    ((const unsigned char *)from)+=64;
-                    ((unsigned char *)to)+=64;
+		    from = (const unsigned char *) from + 64;
+		    to = (unsigned char *) to + 64;
                }
           /* since movntq is weakly-ordered, a "sfence"
            * is needed to become ordered again. */
diff -urNad --exclude=CVS --exclude=.svn ./src/freej.cpp /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/freej.cpp
--- ./src/freej.cpp	2005-07-11 08:49:53.000000000 +0000
+++ /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/freej.cpp	2005-07-11 08:52:51.000000000 +0000
@@ -26,6 +26,8 @@
 #include <unistd.h>
 #include <assert.h>
 
+#include <errno.h>
+
 #include <context.h>
 
 #include <osd.h>
diff -urNad --exclude=CVS --exclude=.svn ./src/scroll_layer.cpp /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/scroll_layer.cpp
--- ./src/scroll_layer.cpp	2005-07-11 08:49:53.000000000 +0000
+++ /tmp/dpep-work.gVCQ1X/freej-0.7.1/src/scroll_layer.cpp	2005-07-11 08:52:51.000000000 +0000
@@ -24,6 +24,8 @@
 
 #include <stdlib.h>
 
+#include <errno.h>
+
 #include <scroll_layer.h>
 #include <context.h>
 #include <jutils.h>

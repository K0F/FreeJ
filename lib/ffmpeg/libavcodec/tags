!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
$aligned	alpha/dsputil_alpha_asm.S	/^$aligned:$/;"	l
$aligned	alpha/motion_est_mvi_asm.S	/^$aligned:$/;"	l
$unaligned	alpha/dsputil_alpha_asm.S	/^$unaligned:$/;"	l
$unaligned	alpha/motion_est_mvi_asm.S	/^$unaligned:$/;"	l
A1	faandct.c	55;"	d	file:
A2	faandct.c	56;"	d	file:
A4	faandct.c	58;"	d	file:
A5	faandct.c	57;"	d	file:
A52_2F1R	liba52/a52.h	50;"	d
A52_2F2R	liba52/a52.h	52;"	d
A52_3F	liba52/a52.h	49;"	d
A52_3F1R	liba52/a52.h	51;"	d
A52_3F2R	liba52/a52.h	53;"	d
A52_ADJUST_LEVEL	liba52/a52.h	60;"	d
A52_CHANNEL	liba52/a52.h	46;"	d
A52_CHANNEL1	liba52/a52.h	54;"	d
A52_CHANNEL2	liba52/a52.h	55;"	d
A52_CHANNEL_MASK	liba52/a52.h	57;"	d
A52_DOLBY	liba52/a52.h	56;"	d
A52_H	liba52/a52.h	25;"	d
A52_LFE	liba52/a52.h	59;"	d
A52_LFE	parser.c	687;"	d	file:
A52_MONO	liba52/a52.h	47;"	d
A52_STEREO	liba52/a52.h	48;"	d
A52_UTIL_H	liba52/a52_util.h	25;"	d
AAC_CODEC	faad.c	297;"	d	file:
AAC_CODEC	faad.c	314;"	d	file:
AANSCALE_BITS	dct-test.c	34;"	d	file:
ABS	common.h	263;"	d
ABS	libpostproc/postprocess.c	105;"	d	file:
AC3BitAllocParameters	ac3.h	/^typedef struct AC3BitAllocParameters {$/;"	s
AC3BitAllocParameters	ac3.h	/^} AC3BitAllocParameters;$/;"	t
AC3DecodeState	a52dec.c	/^typedef struct AC3DecodeState {$/;"	s	file:
AC3DecodeState	a52dec.c	/^} AC3DecodeState;$/;"	t	file:
AC3DecodeState	ac3dec.c	/^typedef struct AC3DecodeState {$/;"	s	file:
AC3DecodeState	ac3dec.c	/^} AC3DecodeState;$/;"	t	file:
AC3EncodeContext	ac3enc.c	/^typedef struct AC3EncodeContext {$/;"	s	file:
AC3EncodeContext	ac3enc.c	/^} AC3EncodeContext;$/;"	t	file:
AC3ParseContext	parser.c	/^typedef struct AC3ParseContext {$/;"	s	file:
AC3ParseContext	parser.c	/^} AC3ParseContext;$/;"	t	file:
AC3_FRAME_SIZE	ac3.h	29;"	d
AC3_HEADER_SIZE	parser.c	686;"	d	file:
AC3_MAX_CHANNELS	ac3.h	26;"	d
AC3_MAX_CODED_FRAME_SIZE	ac3.h	25;"	d
AC3_encode_close	ac3enc.c	/^static int AC3_encode_close(AVCodecContext *avctx)$/;"	f	file:
AC3_encode_frame	ac3enc.c	/^static int AC3_encode_frame(AVCodecContext *avctx,$/;"	f	file:
AC3_encode_init	ac3enc.c	/^static int AC3_encode_init(AVCodecContext *avctx)$/;"	f	file:
ACCEL_SPARC_VIS	sparc/dsputil_vis.c	4003;"	d	file:
ACCEL_SPARC_VIS2	sparc/dsputil_vis.c	4004;"	d	file:
ACCUMULATE_DIFFS	libpostproc/postprocess_altivec_template.c	853;"	d	file:
ACCUMULATE_DIFFS	libpostproc/postprocess_altivec_template.c	867;"	d	file:
ACDC_VLC_BITS	4xm.c	33;"	d	file:
ACE_VO_TYPE	mpeg4data.h	17;"	d
AC_END	mpegvideo.h	526;"	d
AC_ERROR	mpegvideo.h	523;"	d
ADAPT_LEVEL	sonic.c	116;"	d	file:
ADD	mpegaudiodec.c	603;"	d	file:
ADD	ppc/idct_altivec.c	228;"	d	file:
ADD	ps2/idct_mmi.c	258;"	d	file:
ADPCMChannelStatus	adpcm.c	/^typedef struct ADPCMChannelStatus {$/;"	s	file:
ADPCMChannelStatus	adpcm.c	/^} ADPCMChannelStatus;$/;"	t	file:
ADPCMContext	adpcm.c	/^typedef struct ADPCMContext {$/;"	s	file:
ADPCMContext	adpcm.c	/^} ADPCMContext;$/;"	t	file:
ADPCM_CODEC	adpcm.c	1022;"	d	file:
ADPCM_CODEC	adpcm.c	1039;"	d	file:
ADPCM_DECODER	adpcm.c	1007;"	d	file:
ADPCM_DECODER	adpcm.c	1019;"	d	file:
ADPCM_ENCODER	adpcm.c	1003;"	d	file:
ADPCM_ENCODER	adpcm.c	991;"	d	file:
ADVANCE_BLOCK	rpza.c	56;"	d	file:
ADVANCE_BLOCK	smc.c	64;"	d	file:
ADVANCE_CURFRAME_X	xan.c	461;"	d	file:
ADVANCE_CURRENT_X	xan.c	342;"	d	file:
ADVANCE_PREVFRAME_X	xan.c	468;"	d	file:
ADV_SIMPLE_VO_TYPE	mpeg4data.h	18;"	d
ADXContext	adx.c	/^} ADXContext;$/;"	t	file:
ALACContext	alac.c	/^} ALACContext;$/;"	t	file:
ALAC_EXTRADATA_SIZE	alac.c	41;"	d	file:
ALGO_NOP	truemotion1.c	101;"	d	file:
ALGO_RGB16H	truemotion1.c	103;"	d	file:
ALGO_RGB16V	truemotion1.c	102;"	d	file:
ALGO_RGB24H	truemotion1.c	104;"	d	file:
ALIGN	utils.c	182;"	d	file:
ALIGN_MASK	libpostproc/postprocess_template.c	33;"	d	file:
ALIGN_MASK	libpostproc/postprocess_template.c	42;"	d	file:
ALTIVEC_TRANSPOSE_8x8_SHORT	libpostproc/postprocess_altivec_template.c	28;"	d	file:
ALT_BITSTREAM_READER	bitstream.h	12;"	d
AMASK_BWX	alpha/asm.h	40;"	d
AMASK_CIX	alpha/asm.h	42;"	d
AMASK_FIX	alpha/asm.h	41;"	d
AMASK_MVI	alpha/asm.h	43;"	d
AMRContext	amr.c	/^typedef struct AMRContext {$/;"	s	file:
AMRContext	amr.c	/^} AMRContext;$/;"	t	file:
AMRLIBS	Makefile	/^AMRLIBS=amrlibs$/;"	m
AMROBJS	Makefile	/^AMROBJS= amr.o$/;"	m
AMROBJS	Makefile	/^AMROBJS=$/;"	m
AMRWBContext	amr.c	/^typedef struct AMRWBContext {$/;"	s	file:
AMRWBContext	amr.c	/^} AMRWBContext;$/;"	t	file:
AMRWB_bitrates	amr.c	/^typedef struct AMRWB_bitrates$/;"	s	file:
AMRWB_bitrates	amr.c	/^} AMRWB_bitrates;$/;"	t	file:
AMR_bitrates	amr.c	/^typedef struct AMR_bitrates$/;"	s	file:
AMR_bitrates	amr.c	/^} AMR_bitrates;$/;"	t	file:
APP0	mjpeg.c	/^    APP0  = 0xe0,$/;"	e	file:
APP1	mjpeg.c	/^    APP1  = 0xe1,$/;"	e	file:
APP10	mjpeg.c	/^    APP10 = 0xea,$/;"	e	file:
APP11	mjpeg.c	/^    APP11 = 0xeb,$/;"	e	file:
APP12	mjpeg.c	/^    APP12 = 0xec,$/;"	e	file:
APP13	mjpeg.c	/^    APP13 = 0xed,$/;"	e	file:
APP14	mjpeg.c	/^    APP14 = 0xee,$/;"	e	file:
APP15	mjpeg.c	/^    APP15 = 0xef,$/;"	e	file:
APP2	mjpeg.c	/^    APP2  = 0xe2,$/;"	e	file:
APP3	mjpeg.c	/^    APP3  = 0xe3,$/;"	e	file:
APP4	mjpeg.c	/^    APP4  = 0xe4,$/;"	e	file:
APP5	mjpeg.c	/^    APP5  = 0xe5,$/;"	e	file:
APP6	mjpeg.c	/^    APP6  = 0xe6,$/;"	e	file:
APP7	mjpeg.c	/^    APP7  = 0xe7,$/;"	e	file:
APP8	mjpeg.c	/^    APP8  = 0xe8,$/;"	e	file:
APP9	mjpeg.c	/^    APP9  = 0xe9,$/;"	e	file:
APPLY_C_PREDICTOR	truemotion1.c	517;"	d	file:
APPLY_C_PREDICTOR_24	truemotion1.c	534;"	d	file:
APPLY_Y_PREDICTOR	truemotion1.c	553;"	d	file:
APPLY_Y_PREDICTOR_24	truemotion1.c	570;"	d	file:
ARTS_VO_TYPE	mpeg4data.h	16;"	d
ASM_OBJS	Makefile	/^ASM_OBJS=$/;"	m
ASV1Context	asv1.c	/^typedef struct ASV1Context{$/;"	s	file:
ASV1Context	asv1.c	/^} ASV1Context;$/;"	t	file:
ASV2_LEVEL_VLC_BITS	asv1.c	33;"	d	file:
AT	alpha/regdef.h	40;"	d
ATTR_ALIGN	i386/fdct_mmx.c	20;"	d	file:
ATTR_ALIGN	i386/idct_mmx.c	30;"	d	file:
ATTR_ALIGN	sparc/dsputil_vis.c	59;"	d	file:
AUDIOBLOCK	ra144.c	25;"	d	file:
AUDIOBUFFER	ra144.c	26;"	d	file:
AVCLASS	avcodec.h	/^struct AVCLASS {$/;"	s
AVCODEC_H	avcodec.h	2;"	d
AVCODEC_I386MMX_H	i386/mmx.h	6;"	d
AVCODEC_MAX_AUDIO_FRAME_SIZE	avcodec.h	239;"	d
AVCODEC_MPEGVIDEO_H	mpegvideo.h	27;"	d
AVClass	avcodec.h	/^typedef struct AVCLASS AVClass;$/;"	t
AVCodec	avcodec.h	/^typedef struct AVCodec {$/;"	s
AVCodec	avcodec.h	/^} AVCodec;$/;"	t
AVCodecContext	avcodec.h	/^typedef struct AVCodecContext {$/;"	s
AVCodecContext	avcodec.h	/^} AVCodecContext;$/;"	t
AVCodecParser	avcodec.h	/^typedef struct AVCodecParser {$/;"	s
AVCodecParser	avcodec.h	/^} AVCodecParser;$/;"	t
AVCodecParserContext	avcodec.h	/^typedef struct AVCodecParserContext {$/;"	s
AVCodecParserContext	avcodec.h	/^} AVCodecParserContext;$/;"	t
AVFrame	avcodec.h	/^typedef struct AVFrame {$/;"	s
AVFrame	avcodec.h	/^} AVFrame;$/;"	t
AVG2	alpha/dsputil_alpha.c	256;"	d	file:
AVG2	alpha/dsputil_alpha.c	267;"	d	file:
AVG2	alpha/dsputil_alpha.c	271;"	d	file:
AVG4	alpha/dsputil_alpha.c	257;"	d	file:
AVG4	alpha/dsputil_alpha.c	268;"	d	file:
AVG4	alpha/dsputil_alpha.c	272;"	d	file:
AVG4_ROUNDER	alpha/dsputil_alpha.c	258;"	d	file:
AVG4_ROUNDER	alpha/dsputil_alpha.c	269;"	d	file:
AVG4_ROUNDER	alpha/dsputil_alpha.c	273;"	d	file:
AVG726Context	g726.c	/^typedef struct AVG726Context {$/;"	s	file:
AVG726Context	g726.c	/^} AVG726Context;$/;"	t	file:
AVG_3DNOW_OP	i386/dsputil_mmx.c	2783;"	d	file:
AVG_MMX2_OP	i386/dsputil_mmx.c	2787;"	d	file:
AVG_OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	26;"	d	file:
AVInteger	integer.h	/^typedef struct AVInteger{$/;"	s
AVInteger	integer.h	/^} AVInteger;$/;"	t
AVOPTION_CODEC_BOOL	common.h	42;"	d
AVOPTION_CODEC_DOUBLE	common.h	44;"	d
AVOPTION_CODEC_FLAG	common.h	46;"	d
AVOPTION_CODEC_INT	common.h	48;"	d
AVOPTION_CODEC_RCOVERRIDE	common.h	52;"	d
AVOPTION_CODEC_STRING	common.h	50;"	d
AVOPTION_END	common.h	55;"	d
AVOPTION_SUB	common.h	54;"	d
AVOption	avcodec.h	/^typedef struct AVOption {$/;"	s
AVOption	avcodec.h	/^} AVOption;$/;"	t
AVPALETTE_COUNT	avcodec.h	1857;"	d
AVPALETTE_SIZE	avcodec.h	1856;"	d
AVPaletteControl	avcodec.h	/^typedef struct AVPaletteControl {$/;"	s
AVPaletteControl	avcodec.h	/^} AVPaletteControl;$/;"	t
AVPanScan	avcodec.h	/^typedef struct AVPanScan{$/;"	s
AVPanScan	avcodec.h	/^}AVPanScan;$/;"	t
AVPicture	avcodec.h	/^typedef struct AVPicture {$/;"	s
AVPicture	avcodec.h	/^} AVPicture;$/;"	t
AVRational	rational.h	/^typedef struct AVRational{$/;"	s
AVRational	rational.h	/^} AVRational;$/;"	t
AVResampleContext	resample2.c	/^typedef struct AVResampleContext{$/;"	s	file:
AVResampleContext	resample2.c	/^}AVResampleContext;$/;"	t	file:
AVRounding	avcodec.h	/^enum AVRounding {$/;"	g
AVV	libpostproc/postprocess_altivec_template.c	23;"	d	file:
AVV	libpostproc/postprocess_altivec_template.c	25;"	d	file:
AVV	ppc/gcc_fixes.h	16;"	d
AVV	ppc/gcc_fixes.h	18;"	d
AVV	ppc/gcc_fixes.h	21;"	d
AV_INTEGER_SIZE	integer.h	30;"	d
AV_LOG_DEBUG	avcodec.h	2317;"	d
AV_LOG_ERROR	avcodec.h	2315;"	d
AV_LOG_INFO	avcodec.h	2316;"	d
AV_LOG_QUIET	avcodec.h	2314;"	d
AV_NOPTS_VALUE	avcodec.h	29;"	d
AV_PARSER_PTS_NB	avcodec.h	2250;"	d
AV_ROUND_DOWN	avcodec.h	/^    AV_ROUND_DOWN     = 2, \/\/\/< round toward -infinity$/;"	e	enum:AVRounding
AV_ROUND_INF	avcodec.h	/^    AV_ROUND_INF      = 1, \/\/\/< round away from zero$/;"	e	enum:AVRounding
AV_ROUND_NEAR_INF	avcodec.h	/^    AV_ROUND_NEAR_INF = 5, \/\/\/< round to nearest and halfway cases away from zero$/;"	e	enum:AVRounding
AV_ROUND_UP	avcodec.h	/^    AV_ROUND_UP       = 3, \/\/\/< round toward +infinity$/;"	e	enum:AVRounding
AV_ROUND_ZERO	avcodec.h	/^    AV_ROUND_ZERO     = 0, \/\/\/< round toward zero$/;"	e	enum:AVRounding
AV_STRINGIFY	avcodec.h	25;"	d
AV_TIME_BASE	avcodec.h	30;"	d
AV_TOSTRING	avcodec.h	26;"	d
AdaptCoeff1	adpcm.c	/^static const int AdaptCoeff1[] = {$/;"	v	file:
AdaptCoeff2	adpcm.c	/^static const int AdaptCoeff2[] = {$/;"	v	file:
AdaptationTable	adpcm.c	/^static const int AdaptationTable[] = {$/;"	v	file:
B	huffyuv.c	37;"	d	file:
B	huffyuv.c	41;"	d	file:
B0	faandct.c	45;"	d	file:
B1	faandct.c	46;"	d	file:
B2	faandct.c	47;"	d	file:
B3	faandct.c	48;"	d	file:
B4	faandct.c	49;"	d	file:
B5	faandct.c	50;"	d	file:
B6	faandct.c	51;"	d	file:
B7	faandct.c	52;"	d	file:
BACKSTEP_SIZE	mpegaudiodec.c	87;"	d	file:
BASEVOL	adx.c	43;"	d	file:
BASE_QUANT	sonic.c	72;"	d	file:
BASIS_SHIFT	dsputil.h	324;"	d
BE_16	avcodec.h	2332;"	d
BE_32	avcodec.h	2333;"	d
BF	ac3enc.c	315;"	d	file:
BF	fft.c	123;"	d	file:
BF	mpegaudiodec.c	578;"	d	file:
BF	ppc/fft_altivec.c	32;"	d	file:
BF	simple_idct.c	451;"	d	file:
BF1	mpegaudiodec.c	586;"	d	file:
BF2	mpegaudiodec.c	593;"	d	file:
BIAS	liba52/a52_internal.h	135;"	d
BIAS	liba52/a52_internal.h	160;"	d
BIAS	pcm.c	35;"	d	file:
BIN_ONLY_SHAPE	mpeg4data.h	9;"	d
BIN_SHAPE	mpeg4data.h	8;"	d
BITSHIFTSIZE	shorten.c	48;"	d	file:
BITSTREAM_H	bitstream.h	7;"	d
BITS_FRW_ACC	i386/fdct_mmx.c	33;"	d	file:
BITS_INV_ACC	ps2/idct_mmi.c	18;"	d	file:
BITS_IN_JSAMPLE	jfdctint.c	38;"	d	file:
BI_TYPE	vc9.c	133;"	d	file:
BLKSIZE	adpcm.c	47;"	d	file:
BLOCKSIZE	ra144.c	29;"	d	file:
BLOCK_2x2	truemotion1.c	107;"	d	file:
BLOCK_2x4	truemotion1.c	108;"	d	file:
BLOCK_4x2	truemotion1.c	109;"	d	file:
BLOCK_4x4	truemotion1.c	110;"	d	file:
BLOCK_INTRA	snow.c	366;"	d	file:
BLOCK_MAX_BITS	wmadec.c	40;"	d	file:
BLOCK_MAX_SIZE	wmadec.c	41;"	d	file:
BLOCK_MIN_BITS	wmadec.c	39;"	d	file:
BLOCK_NB_SIZES	wmadec.c	43;"	d	file:
BLOCK_SIZE	libpostproc/postprocess.c	110;"	d	file:
BLOCK_TYPE_VLC_BITS	4xm.c	32;"	d	file:
BMPTYPE_RGB	lcl.c	53;"	d	file:
BMPTYPE_YUV	lcl.c	52;"	d	file:
BMV_TYPE_BACKWARD	vc9.c	120;"	d	file:
BMV_TYPE_BACKWARD	vc9.c	121;"	d	file:
BMV_TYPE_FORWARD	vc9.c	122;"	d	file:
BMV_TYPE_INTERPOLATED	vc9.c	123;"	d	file:
BPP	imgconvert.c	1466;"	d	file:
BPP	imgconvert.c	1487;"	d	file:
BPP	imgconvert.c	1509;"	d	file:
BPP	imgconvert.c	1515;"	d	file:
BPP	imgconvert.c	1536;"	d	file:
BPP	imgconvert.c	1567;"	d	file:
BPP	imgconvert_template.h	854;"	d
BUFFERSIZE	ra144.c	31;"	d	file:
BUFFER_CAT	xvidff.c	36;"	d	file:
BUFFER_REMAINING	xvidff.c	35;"	d	file:
BUFFER_SIZE	dtsdec.c	37;"	d	file:
BUFFER_SIZE	liba52/bitstream.c	27;"	d	file:
BUFFER_SIZE	mp3lameaudio.c	29;"	d	file:
BUFFER_SIZE	oggvorbis.c	16;"	d	file:
BUFFER_SIZE	xvidff.c	34;"	d	file:
BUTTERFLY	liba52/imdct.c	115;"	d	file:
BUTTERFLY1	dsputil.c	3066;"	d	file:
BUTTERFLY2	dsputil.c	3062;"	d	file:
BUTTERFLYA	dsputil.c	3075;"	d	file:
BUTTERFLY_0	liba52/imdct.c	101;"	d	file:
BUTTERFLY_B	liba52/imdct.c	108;"	d	file:
BUTTERFLY_HALF	liba52/imdct.c	151;"	d	file:
BUTTERFLY_ZERO	liba52/imdct.c	134;"	d	file:
BYTE_VEC	alpha/asm.h	/^static inline uint64_t BYTE_VEC(uint64_t x)$/;"	f
BYTE_VEC32	dsputil.h	359;"	d
B_TYPE	mpegvideo.h	66;"	d
BeginIDCT	i386/vp3dsp_mmx.c	49;"	d	file:
BitPlane	vc9.c	/^typedef struct BitPlane {$/;"	s	file:
BitPlane	vc9.c	/^} BitPlane;$/;"	t	file:
BlockInfo	dv.c	/^typedef struct BlockInfo {$/;"	s	file:
BlockInfo	dv.c	/^} BlockInfo;$/;"	t	file:
BlockNode	snow.c	/^typedef struct BlockNode{$/;"	s	file:
BlockNode	snow.c	/^}BlockNode;$/;"	t	file:
ByteSwap16	bswap.h	/^static inline uint16_t ByteSwap16(uint16_t x) {$/;"	f
ByteSwap16	bswap.h	/^static inline uint16_t ByteSwap16(uint16_t x)$/;"	f
ByteSwap32	bswap.h	/^static inline uint32_t ByteSwap32(uint32_t x) {$/;"	f
ByteSwap32	bswap.h	/^static inline uint32_t ByteSwap32(uint32_t x)$/;"	f
ByteSwap64	bswap.h	/^static inline uint64_t ByteSwap64(uint64_t x)$/;"	f
C	i386/vp3dsp_mmx.c	295;"	d	file:
C	i386/vp3dsp_sse2.c	822;"	d	file:
C0	i386/simple_idct_mmx.c	33;"	d	file:
C0	i386/simple_idct_mmx.c	88;"	d	file:
C1	i386/fdct_mmx.c	148;"	d	file:
C1	i386/fdct_mmx.c	157;"	d	file:
C1	i386/fdct_mmx.c	164;"	d	file:
C1	i386/fdct_mmx.c	173;"	d	file:
C1	i386/fdct_mmx.c	180;"	d	file:
C1	i386/fdct_mmx.c	189;"	d	file:
C1	i386/fdct_mmx.c	196;"	d	file:
C1	i386/fdct_mmx.c	205;"	d	file:
C1	i386/fdct_mmx.c	212;"	d	file:
C1	i386/fdct_mmx.c	221;"	d	file:
C1	i386/fdct_mmx.c	228;"	d	file:
C1	i386/fdct_mmx.c	237;"	d	file:
C1	i386/fdct_mmx.c	244;"	d	file:
C1	i386/fdct_mmx.c	253;"	d	file:
C1	i386/fdct_mmx.c	260;"	d	file:
C1	i386/simple_idct_mmx.c	34;"	d	file:
C1	i386/simple_idct_mmx.c	89;"	d	file:
C1	mpegaudiodec.c	1006;"	d	file:
C1	ppc/fdct_altivec.c	34;"	d	file:
C1	simple_idct.c	422;"	d	file:
C1	simple_idct.c	501;"	d	file:
C1	simple_idct.c	505;"	d	file:
C2	i386/fdct_mmx.c	149;"	d	file:
C2	i386/fdct_mmx.c	158;"	d	file:
C2	i386/fdct_mmx.c	165;"	d	file:
C2	i386/fdct_mmx.c	174;"	d	file:
C2	i386/fdct_mmx.c	181;"	d	file:
C2	i386/fdct_mmx.c	190;"	d	file:
C2	i386/fdct_mmx.c	197;"	d	file:
C2	i386/fdct_mmx.c	206;"	d	file:
C2	i386/fdct_mmx.c	213;"	d	file:
C2	i386/fdct_mmx.c	222;"	d	file:
C2	i386/fdct_mmx.c	229;"	d	file:
C2	i386/fdct_mmx.c	238;"	d	file:
C2	i386/fdct_mmx.c	245;"	d	file:
C2	i386/fdct_mmx.c	254;"	d	file:
C2	i386/fdct_mmx.c	261;"	d	file:
C2	i386/simple_idct_mmx.c	35;"	d	file:
C2	i386/simple_idct_mmx.c	90;"	d	file:
C2	mpegaudiodec.c	1007;"	d	file:
C2	ppc/fdct_altivec.c	35;"	d	file:
C2	simple_idct.c	423;"	d	file:
C2	simple_idct.c	502;"	d	file:
C2	simple_idct.c	506;"	d	file:
C3	i386/fdct_mmx.c	150;"	d	file:
C3	i386/fdct_mmx.c	159;"	d	file:
C3	i386/fdct_mmx.c	166;"	d	file:
C3	i386/fdct_mmx.c	175;"	d	file:
C3	i386/fdct_mmx.c	182;"	d	file:
C3	i386/fdct_mmx.c	191;"	d	file:
C3	i386/fdct_mmx.c	198;"	d	file:
C3	i386/fdct_mmx.c	207;"	d	file:
C3	i386/fdct_mmx.c	214;"	d	file:
C3	i386/fdct_mmx.c	223;"	d	file:
C3	i386/fdct_mmx.c	230;"	d	file:
C3	i386/fdct_mmx.c	239;"	d	file:
C3	i386/fdct_mmx.c	246;"	d	file:
C3	i386/fdct_mmx.c	255;"	d	file:
C3	i386/fdct_mmx.c	262;"	d	file:
C3	i386/simple_idct_mmx.c	36;"	d	file:
C3	i386/simple_idct_mmx.c	91;"	d	file:
C3	mpegaudiodec.c	1008;"	d	file:
C3	mpegaudiodec.c	947;"	d	file:
C3	ppc/fdct_altivec.c	36;"	d	file:
C3	simple_idct.c	507;"	d	file:
C4	i386/fdct_mmx.c	151;"	d	file:
C4	i386/fdct_mmx.c	160;"	d	file:
C4	i386/fdct_mmx.c	167;"	d	file:
C4	i386/fdct_mmx.c	176;"	d	file:
C4	i386/fdct_mmx.c	183;"	d	file:
C4	i386/fdct_mmx.c	192;"	d	file:
C4	i386/fdct_mmx.c	199;"	d	file:
C4	i386/fdct_mmx.c	208;"	d	file:
C4	i386/fdct_mmx.c	215;"	d	file:
C4	i386/fdct_mmx.c	224;"	d	file:
C4	i386/fdct_mmx.c	231;"	d	file:
C4	i386/fdct_mmx.c	240;"	d	file:
C4	i386/fdct_mmx.c	247;"	d	file:
C4	i386/fdct_mmx.c	256;"	d	file:
C4	i386/fdct_mmx.c	263;"	d	file:
C4	i386/idct_mmx.c	396;"	d	file:
C4	i386/idct_mmx.c	536;"	d	file:
C4	i386/simple_idct_mmx.c	38;"	d	file:
C4	i386/simple_idct_mmx.c	40;"	d	file:
C4	i386/simple_idct_mmx.c	92;"	d	file:
C4	mpegaudiodec.c	1009;"	d	file:
C4	ppc/fdct_altivec.c	37;"	d	file:
C5	i386/fdct_mmx.c	152;"	d	file:
C5	i386/fdct_mmx.c	161;"	d	file:
C5	i386/fdct_mmx.c	168;"	d	file:
C5	i386/fdct_mmx.c	177;"	d	file:
C5	i386/fdct_mmx.c	184;"	d	file:
C5	i386/fdct_mmx.c	193;"	d	file:
C5	i386/fdct_mmx.c	200;"	d	file:
C5	i386/fdct_mmx.c	209;"	d	file:
C5	i386/fdct_mmx.c	216;"	d	file:
C5	i386/fdct_mmx.c	225;"	d	file:
C5	i386/fdct_mmx.c	232;"	d	file:
C5	i386/fdct_mmx.c	241;"	d	file:
C5	i386/fdct_mmx.c	248;"	d	file:
C5	i386/fdct_mmx.c	257;"	d	file:
C5	i386/fdct_mmx.c	264;"	d	file:
C5	i386/simple_idct_mmx.c	42;"	d	file:
C5	i386/simple_idct_mmx.c	93;"	d	file:
C5	mpegaudiodec.c	1010;"	d	file:
C5	ppc/fdct_altivec.c	38;"	d	file:
C6	i386/fdct_mmx.c	153;"	d	file:
C6	i386/fdct_mmx.c	162;"	d	file:
C6	i386/fdct_mmx.c	169;"	d	file:
C6	i386/fdct_mmx.c	178;"	d	file:
C6	i386/fdct_mmx.c	185;"	d	file:
C6	i386/fdct_mmx.c	194;"	d	file:
C6	i386/fdct_mmx.c	201;"	d	file:
C6	i386/fdct_mmx.c	210;"	d	file:
C6	i386/fdct_mmx.c	217;"	d	file:
C6	i386/fdct_mmx.c	226;"	d	file:
C6	i386/fdct_mmx.c	233;"	d	file:
C6	i386/fdct_mmx.c	242;"	d	file:
C6	i386/fdct_mmx.c	249;"	d	file:
C6	i386/fdct_mmx.c	258;"	d	file:
C6	i386/fdct_mmx.c	265;"	d	file:
C6	i386/simple_idct_mmx.c	43;"	d	file:
C6	i386/simple_idct_mmx.c	94;"	d	file:
C6	mpegaudiodec.c	1011;"	d	file:
C6	ppc/fdct_altivec.c	39;"	d	file:
C7	i386/fdct_mmx.c	154;"	d	file:
C7	i386/fdct_mmx.c	163;"	d	file:
C7	i386/fdct_mmx.c	170;"	d	file:
C7	i386/fdct_mmx.c	179;"	d	file:
C7	i386/fdct_mmx.c	186;"	d	file:
C7	i386/fdct_mmx.c	195;"	d	file:
C7	i386/fdct_mmx.c	202;"	d	file:
C7	i386/fdct_mmx.c	211;"	d	file:
C7	i386/fdct_mmx.c	218;"	d	file:
C7	i386/fdct_mmx.c	227;"	d	file:
C7	i386/fdct_mmx.c	234;"	d	file:
C7	i386/fdct_mmx.c	243;"	d	file:
C7	i386/fdct_mmx.c	250;"	d	file:
C7	i386/fdct_mmx.c	259;"	d	file:
C7	i386/fdct_mmx.c	266;"	d	file:
C7	i386/simple_idct_mmx.c	44;"	d	file:
C7	i386/simple_idct_mmx.c	95;"	d	file:
C7	mpegaudiodec.c	1012;"	d	file:
C7	ppc/fdct_altivec.c	40;"	d	file:
C8	mpegaudiodec.c	1013;"	d	file:
CABACContext	cabac.h	/^typedef struct CABACContext{$/;"	s
CABACContext	cabac.h	/^}CABACContext;$/;"	t
CABAC_BITS	cabac.h	30;"	d
CABAC_MASK	cabac.h	31;"	d
CALL_2X_PIXELS	dsputil.h	129;"	d
CANDIDATE_MB_TYPE_BACKWARD	mpegvideo.h	446;"	d
CANDIDATE_MB_TYPE_BACKWARD_I	mpegvideo.h	451;"	d
CANDIDATE_MB_TYPE_BIDIR	mpegvideo.h	447;"	d
CANDIDATE_MB_TYPE_BIDIR_I	mpegvideo.h	452;"	d
CANDIDATE_MB_TYPE_DIRECT	mpegvideo.h	444;"	d
CANDIDATE_MB_TYPE_FORWARD	mpegvideo.h	445;"	d
CANDIDATE_MB_TYPE_FORWARD_I	mpegvideo.h	450;"	d
CANDIDATE_MB_TYPE_INTER	mpegvideo.h	439;"	d
CANDIDATE_MB_TYPE_INTER4V	mpegvideo.h	440;"	d
CANDIDATE_MB_TYPE_INTER_I	mpegvideo.h	449;"	d
CANDIDATE_MB_TYPE_INTRA	mpegvideo.h	438;"	d
CANDIDATE_MB_TYPE_SKIPED	mpegvideo.h	441;"	d
CANONICAL_HEADER_SIZE	shorten.c	73;"	d	file:
CBF0_TAG	vqavideo.c	85;"	d	file:
CBFZ_TAG	vqavideo.c	86;"	d	file:
CBP0_TAG	vqavideo.c	87;"	d	file:
CBPC_B_VLC_BITS	h263.c	54;"	d	file:
CBPY_VLC_BITS	h263.c	47;"	d	file:
CBPY_VLC_BITS	msmpeg4.c	42;"	d	file:
CBPZ_TAG	vqavideo.c	88;"	d	file:
CENTERSAMPLE	xan.c	63;"	d	file:
CFLAGS	Makefile	/^CFLAGS=$(OPTFLAGS) -DHAVE_AV_CONFIG_H -I.. -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE $(AMR_CFLAGS)$/;"	m
CFLAGS	libpostproc/Makefile	/^CFLAGS  = $(OPTFLAGS) $(MLIB_INC) -I. -I.. $(EXTRA_INC)$/;"	m
CFRAME_BUFFER_COUNT	4xm.c	35;"	d	file:
CFrameBuffer	4xm.c	/^typedef struct CFrameBuffer{$/;"	s	file:
CFrameBuffer	4xm.c	/^}CFrameBuffer;$/;"	t	file:
CHANSIZE	shorten.c	45;"	d	file:
CHECKED_ALLOCZ	common.h	509;"	d
CHECK_CLIPED_MV	motion_est_template.c	516;"	d	file:
CHECK_COUNT	vqavideo.c	198;"	d	file:
CHECK_HALF_MV	motion_est_template.c	37;"	d	file:
CHECK_MV	motion_est_template.c	497;"	d	file:
CHECK_MV_DIR	motion_est_template.c	525;"	d	file:
CHECK_PIXEL_PTR	qtrle.c	60;"	d	file:
CHECK_QUARTER_MV	motion_est_template.c	264;"	d	file:
CHECK_SAD_HALF_MV	motion_est.c	545;"	d	file:
CHECK_STREAM_PTR	interplayvideo.c	77;"	d	file:
CHECK_STREAM_PTR	msvideo1.c	42;"	d	file:
CHECK_STREAM_PTR	qtrle.c	53;"	d	file:
CHROMA_420	mpegvideo.h	673;"	d
CHROMA_422	mpegvideo.h	674;"	d
CHROMA_444	mpegvideo.h	675;"	d
CHROMA_DC_BLOCK_INDEX	h264.c	43;"	d	file:
CHROMA_DC_COEFF_TOKEN_VLC_BITS	h264.c	45;"	d	file:
CHROMA_DC_TOTAL_ZEROS_VLC_BITS	h264.c	48;"	d	file:
CHROM_DERING	libpostproc/postprocess_internal.h	34;"	d
CHROM_H_DEBLOCK	libpostproc/postprocess_internal.h	32;"	d
CHROM_LEVEL_FIX	libpostproc/postprocess_internal.h	36;"	d
CHROM_V_DEBLOCK	libpostproc/postprocess_internal.h	31;"	d
CHUNK_PREAMBLE_SIZE	vqavideo.c	76;"	d	file:
CLAMP_TO_8BIT	common.h	493;"	d
CLAMP_TO_SHORT	adpcm.c	49;"	d	file:
CLEANAMR	Makefile	/^CLEANAMR=cleanamr$/;"	m
CLEANAMR	Makefile	/^CLEANAMR=cleanamrfloat$/;"	m
CLEANAMRWB	Makefile	/^CLEANAMRWB=cleanamrwbfloat$/;"	m
CLIP	adx.c	47;"	d	file:
CLIP	libpostproc/postprocess_internal.h	/^static inline int CLIP(int a){$/;"	f
CLIP	libpostproc/postprocess_internal.h	74;"	d
CLIP	libpostproc/postprocess_internal.h	76;"	d
CLIPMAX	ps2/idct_mmi.c	40;"	d	file:
CLJRContext	cljr.c	/^typedef struct CLJRContext{$/;"	s	file:
CLJRContext	cljr.c	/^} CLJRContext;$/;"	t	file:
CLOSE_READER	bitstream.h	376;"	d
CLOSE_READER	bitstream.h	420;"	d
CLOSE_READER	bitstream.h	483;"	d
CMAC	fft-test.c	17;"	d	file:
CMUL	ac3enc.c	330;"	d	file:
CMUL	fft.c	138;"	d	file:
CMUL	mdct.c	61;"	d	file:
CMUL	ppc/fft_altivec.c	45;"	d	file:
CN_SHIFT	simple_idct.c	420;"	d	file:
CN_SHIFT	simple_idct.c	498;"	d	file:
CN_SHIFT	simple_idct.c	503;"	d	file:
COCTET	smc.c	41;"	d	file:
CODEC_CAP_DELAY	avcodec.h	355;"	d
CODEC_CAP_DR1	avcodec.h	344;"	d
CODEC_CAP_DRAW_HORIZ_BAND	avcodec.h	339;"	d
CODEC_CAP_HWACCEL	avcodec.h	350;"	d
CODEC_CAP_PARSE_ONLY	avcodec.h	347;"	d
CODEC_CAP_TRUNCATED	avcodec.h	348;"	d
CODEC_FLAG2_FAST	avcodec.h	328;"	d
CODEC_FLAG2_NO_OUTPUT	avcodec.h	330;"	d
CODEC_FLAG2_STRICT_GOP	avcodec.h	329;"	d
CODEC_FLAG_4MV	avcodec.h	292;"	d
CODEC_FLAG_AC_PRED	avcodec.h	317;"	d
CODEC_FLAG_ALT_SCAN	avcodec.h	311;"	d
CODEC_FLAG_BITEXACT	avcodec.h	314;"	d
CODEC_FLAG_CBP_RD	avcodec.h	319;"	d
CODEC_FLAG_CLOSED_GOP	avcodec.h	327;"	d
CODEC_FLAG_EMU_EDGE	avcodec.h	304;"	d
CODEC_FLAG_EXTERN_HUFF	avcodec.h	302;"	d
CODEC_FLAG_GLOBAL_HEADER	avcodec.h	313;"	d
CODEC_FLAG_GMC	avcodec.h	294;"	d
CODEC_FLAG_GRAY	avcodec.h	303;"	d
CODEC_FLAG_H263P_AIC	avcodec.h	316;"	d
CODEC_FLAG_H263P_AIV	avcodec.h	321;"	d
CODEC_FLAG_H263P_SLICE_STRUCT	avcodec.h	324;"	d
CODEC_FLAG_H263P_UMV	avcodec.h	318;"	d
CODEC_FLAG_INPUT_PRESERVED	avcodec.h	299;"	d
CODEC_FLAG_INTERLACED_DCT	avcodec.h	309;"	d
CODEC_FLAG_INTERLACED_ME	avcodec.h	325;"	d
CODEC_FLAG_LOOP_FILTER	avcodec.h	323;"	d
CODEC_FLAG_LOW_DELAY	avcodec.h	310;"	d
CODEC_FLAG_MV0	avcodec.h	295;"	d
CODEC_FLAG_NORMALIZE_AQP	avcodec.h	308;"	d
CODEC_FLAG_OBMC	avcodec.h	322;"	d
CODEC_FLAG_PART	avcodec.h	296;"	d
CODEC_FLAG_PASS1	avcodec.h	300;"	d
CODEC_FLAG_PASS2	avcodec.h	301;"	d
CODEC_FLAG_PSNR	avcodec.h	305;"	d
CODEC_FLAG_QPEL	avcodec.h	293;"	d
CODEC_FLAG_QP_RD	avcodec.h	320;"	d
CODEC_FLAG_QSCALE	avcodec.h	291;"	d
CODEC_FLAG_SVCD_SCAN_OFFSET	avcodec.h	326;"	d
CODEC_FLAG_TRELLIS_QUANT	avcodec.h	312;"	d
CODEC_FLAG_TRUNCATED	avcodec.h	306;"	d
CODEC_ID_4XM	avcodec.h	/^    CODEC_ID_4XM,$/;"	e	enum:CodecID
CODEC_ID_8BPS	avcodec.h	/^    CODEC_ID_8BPS,$/;"	e	enum:CodecID
CODEC_ID_AAC	avcodec.h	/^    CODEC_ID_AAC,$/;"	e	enum:CodecID
CODEC_ID_AC3	avcodec.h	/^    CODEC_ID_AC3,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_4XM	avcodec.h	/^    CODEC_ID_ADPCM_4XM,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_ADX	avcodec.h	/^    CODEC_ID_ADPCM_ADX,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_CT	avcodec.h	/^    CODEC_ID_ADPCM_CT,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_EA	avcodec.h	/^    CODEC_ID_ADPCM_EA,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_G726	avcodec.h	/^    CODEC_ID_ADPCM_G726,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_DK3	avcodec.h	/^    CODEC_ID_ADPCM_IMA_DK3,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_DK4	avcodec.h	/^    CODEC_ID_ADPCM_IMA_DK4,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_QT	avcodec.h	/^    CODEC_ID_ADPCM_IMA_QT= 0x11000,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_SMJPEG	avcodec.h	/^    CODEC_ID_ADPCM_IMA_SMJPEG,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_WAV	avcodec.h	/^    CODEC_ID_ADPCM_IMA_WAV,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_IMA_WS	avcodec.h	/^    CODEC_ID_ADPCM_IMA_WS,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_MS	avcodec.h	/^    CODEC_ID_ADPCM_MS,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_SWF	avcodec.h	/^    CODEC_ID_ADPCM_SWF,$/;"	e	enum:CodecID
CODEC_ID_ADPCM_XA	avcodec.h	/^    CODEC_ID_ADPCM_XA,$/;"	e	enum:CodecID
CODEC_ID_ALAC	avcodec.h	/^    CODEC_ID_ALAC,$/;"	e	enum:CodecID
CODEC_ID_AMR_NB	avcodec.h	/^    CODEC_ID_AMR_NB= 0x12000,$/;"	e	enum:CodecID
CODEC_ID_AMR_WB	avcodec.h	/^    CODEC_ID_AMR_WB,$/;"	e	enum:CodecID
CODEC_ID_ASV1	avcodec.h	/^    CODEC_ID_ASV1,$/;"	e	enum:CodecID
CODEC_ID_ASV2	avcodec.h	/^    CODEC_ID_ASV2,$/;"	e	enum:CodecID
CODEC_ID_CINEPAK	avcodec.h	/^    CODEC_ID_CINEPAK,$/;"	e	enum:CodecID
CODEC_ID_CLJR	avcodec.h	/^    CODEC_ID_CLJR,$/;"	e	enum:CodecID
CODEC_ID_CYUV	avcodec.h	/^    CODEC_ID_CYUV,$/;"	e	enum:CodecID
CODEC_ID_DTS	avcodec.h	/^    CODEC_ID_DTS,$/;"	e	enum:CodecID
CODEC_ID_DVAUDIO	avcodec.h	/^    CODEC_ID_DVAUDIO,$/;"	e	enum:CodecID
CODEC_ID_DVVIDEO	avcodec.h	/^    CODEC_ID_DVVIDEO,$/;"	e	enum:CodecID
CODEC_ID_FFV1	avcodec.h	/^    CODEC_ID_FFV1,$/;"	e	enum:CodecID
CODEC_ID_FFVHUFF	avcodec.h	/^    CODEC_ID_FFVHUFF,$/;"	e	enum:CodecID
CODEC_ID_FLAC	avcodec.h	/^    CODEC_ID_FLAC,$/;"	e	enum:CodecID
CODEC_ID_FLIC	avcodec.h	/^    CODEC_ID_FLIC,$/;"	e	enum:CodecID
CODEC_ID_FLV1	avcodec.h	/^    CODEC_ID_FLV1,$/;"	e	enum:CodecID
CODEC_ID_H261	avcodec.h	/^    CODEC_ID_H261,$/;"	e	enum:CodecID
CODEC_ID_H263	avcodec.h	/^    CODEC_ID_H263,$/;"	e	enum:CodecID
CODEC_ID_H263I	avcodec.h	/^    CODEC_ID_H263I,$/;"	e	enum:CodecID
CODEC_ID_H263P	avcodec.h	/^    CODEC_ID_H263P,$/;"	e	enum:CodecID
CODEC_ID_H264	avcodec.h	/^    CODEC_ID_H264,$/;"	e	enum:CodecID
CODEC_ID_HUFFYUV	avcodec.h	/^    CODEC_ID_HUFFYUV,$/;"	e	enum:CodecID
CODEC_ID_IDCIN	avcodec.h	/^    CODEC_ID_IDCIN,$/;"	e	enum:CodecID
CODEC_ID_INDEO3	avcodec.h	/^    CODEC_ID_INDEO3,$/;"	e	enum:CodecID
CODEC_ID_INTERPLAY_DPCM	avcodec.h	/^    CODEC_ID_INTERPLAY_DPCM,$/;"	e	enum:CodecID
CODEC_ID_INTERPLAY_VIDEO	avcodec.h	/^    CODEC_ID_INTERPLAY_VIDEO,$/;"	e	enum:CodecID
CODEC_ID_LJPEG	avcodec.h	/^    CODEC_ID_LJPEG,$/;"	e	enum:CodecID
CODEC_ID_LOCO	avcodec.h	/^    CODEC_ID_LOCO,$/;"	e	enum:CodecID
CODEC_ID_MACE3	avcodec.h	/^    CODEC_ID_MACE3,$/;"	e	enum:CodecID
CODEC_ID_MACE6	avcodec.h	/^    CODEC_ID_MACE6,$/;"	e	enum:CodecID
CODEC_ID_MDEC	avcodec.h	/^    CODEC_ID_MDEC,$/;"	e	enum:CodecID
CODEC_ID_MJPEG	avcodec.h	/^    CODEC_ID_MJPEG,$/;"	e	enum:CodecID
CODEC_ID_MJPEGB	avcodec.h	/^    CODEC_ID_MJPEGB,$/;"	e	enum:CodecID
CODEC_ID_MP2	avcodec.h	/^    CODEC_ID_MP2= 0x15000,$/;"	e	enum:CodecID
CODEC_ID_MP3	avcodec.h	/^    CODEC_ID_MP3, \/* prefered ID for MPEG Audio layer 1, 2 or3 decoding *\/$/;"	e	enum:CodecID
CODEC_ID_MP3ADU	avcodec.h	/^    CODEC_ID_MP3ADU,$/;"	e	enum:CodecID
CODEC_ID_MP3LAME	avcodec.h	177;"	d
CODEC_ID_MP3ON4	avcodec.h	/^    CODEC_ID_MP3ON4,$/;"	e	enum:CodecID
CODEC_ID_MPEG1VIDEO	avcodec.h	/^    CODEC_ID_MPEG1VIDEO,$/;"	e	enum:CodecID
CODEC_ID_MPEG2TS	avcodec.h	/^    CODEC_ID_MPEG2TS= 0x20000, \/* _FAKE_ codec to indicate a raw MPEG2 transport$/;"	e	enum:CodecID
CODEC_ID_MPEG2VIDEO	avcodec.h	/^    CODEC_ID_MPEG2VIDEO, \/* prefered ID for MPEG Video 1 or 2 decoding *\/$/;"	e	enum:CodecID
CODEC_ID_MPEG2VIDEO_XVMC	avcodec.h	/^    CODEC_ID_MPEG2VIDEO_XVMC,$/;"	e	enum:CodecID
CODEC_ID_MPEG4	avcodec.h	/^    CODEC_ID_MPEG4,$/;"	e	enum:CodecID
CODEC_ID_MPEG4AAC	avcodec.h	/^    CODEC_ID_MPEG4AAC,$/;"	e	enum:CodecID
CODEC_ID_MSMPEG4V1	avcodec.h	/^    CODEC_ID_MSMPEG4V1,$/;"	e	enum:CodecID
CODEC_ID_MSMPEG4V2	avcodec.h	/^    CODEC_ID_MSMPEG4V2,$/;"	e	enum:CodecID
CODEC_ID_MSMPEG4V3	avcodec.h	/^    CODEC_ID_MSMPEG4V3,$/;"	e	enum:CodecID
CODEC_ID_MSRLE	avcodec.h	/^    CODEC_ID_MSRLE,$/;"	e	enum:CodecID
CODEC_ID_MSVIDEO1	avcodec.h	/^    CODEC_ID_MSVIDEO1,$/;"	e	enum:CodecID
CODEC_ID_MSZH	avcodec.h	/^    CODEC_ID_MSZH,$/;"	e	enum:CodecID
CODEC_ID_NONE	avcodec.h	/^    CODEC_ID_NONE, $/;"	e	enum:CodecID
CODEC_ID_OGGTHEORA	avcodec.h	/^    CODEC_ID_OGGTHEORA= 0x16000, $/;"	e	enum:CodecID
CODEC_ID_PAM	avcodec.h	/^    CODEC_ID_PAM,$/;"	e	enum:CodecID
CODEC_ID_PBM	avcodec.h	/^    CODEC_ID_PBM,$/;"	e	enum:CodecID
CODEC_ID_PCM_ALAW	avcodec.h	/^    CODEC_ID_PCM_ALAW,$/;"	e	enum:CodecID
CODEC_ID_PCM_MULAW	avcodec.h	/^    CODEC_ID_PCM_MULAW,$/;"	e	enum:CodecID
CODEC_ID_PCM_S16BE	avcodec.h	/^    CODEC_ID_PCM_S16BE,$/;"	e	enum:CodecID
CODEC_ID_PCM_S16LE	avcodec.h	/^    CODEC_ID_PCM_S16LE= 0x10000,$/;"	e	enum:CodecID
CODEC_ID_PCM_S8	avcodec.h	/^    CODEC_ID_PCM_S8,$/;"	e	enum:CodecID
CODEC_ID_PCM_U16BE	avcodec.h	/^    CODEC_ID_PCM_U16BE,$/;"	e	enum:CodecID
CODEC_ID_PCM_U16LE	avcodec.h	/^    CODEC_ID_PCM_U16LE,$/;"	e	enum:CodecID
CODEC_ID_PCM_U8	avcodec.h	/^    CODEC_ID_PCM_U8,$/;"	e	enum:CodecID
CODEC_ID_PGM	avcodec.h	/^    CODEC_ID_PGM,$/;"	e	enum:CodecID
CODEC_ID_PGMYUV	avcodec.h	/^    CODEC_ID_PGMYUV,$/;"	e	enum:CodecID
CODEC_ID_PNG	avcodec.h	/^    CODEC_ID_PNG,$/;"	e	enum:CodecID
CODEC_ID_PPM	avcodec.h	/^    CODEC_ID_PPM,$/;"	e	enum:CodecID
CODEC_ID_QDRAW	avcodec.h	/^    CODEC_ID_QDRAW,$/;"	e	enum:CodecID
CODEC_ID_QPEG	avcodec.h	/^    CODEC_ID_QPEG,$/;"	e	enum:CodecID
CODEC_ID_QTRLE	avcodec.h	/^    CODEC_ID_QTRLE,$/;"	e	enum:CodecID
CODEC_ID_RAWVIDEO	avcodec.h	/^    CODEC_ID_RAWVIDEO,$/;"	e	enum:CodecID
CODEC_ID_RA_144	avcodec.h	/^    CODEC_ID_RA_144= 0x13000,$/;"	e	enum:CodecID
CODEC_ID_RA_288	avcodec.h	/^    CODEC_ID_RA_288,$/;"	e	enum:CodecID
CODEC_ID_ROQ	avcodec.h	/^    CODEC_ID_ROQ,$/;"	e	enum:CodecID
CODEC_ID_ROQ_DPCM	avcodec.h	/^    CODEC_ID_ROQ_DPCM= 0x14000,$/;"	e	enum:CodecID
CODEC_ID_RPZA	avcodec.h	/^    CODEC_ID_RPZA,$/;"	e	enum:CodecID
CODEC_ID_RV10	avcodec.h	/^    CODEC_ID_RV10,$/;"	e	enum:CodecID
CODEC_ID_RV20	avcodec.h	/^    CODEC_ID_RV20,$/;"	e	enum:CodecID
CODEC_ID_RV30	avcodec.h	/^    CODEC_ID_RV30,$/;"	e	enum:CodecID
CODEC_ID_RV40	avcodec.h	/^    CODEC_ID_RV40,$/;"	e	enum:CodecID
CODEC_ID_SHORTEN	avcodec.h	/^    CODEC_ID_SHORTEN,$/;"	e	enum:CodecID
CODEC_ID_SMC	avcodec.h	/^    CODEC_ID_SMC,$/;"	e	enum:CodecID
CODEC_ID_SNOW	avcodec.h	/^    CODEC_ID_SNOW,$/;"	e	enum:CodecID
CODEC_ID_SOL_DPCM	avcodec.h	/^    CODEC_ID_SOL_DPCM,$/;"	e	enum:CodecID
CODEC_ID_SONIC	avcodec.h	/^    CODEC_ID_SONIC,$/;"	e	enum:CodecID
CODEC_ID_SONIC_LS	avcodec.h	/^    CODEC_ID_SONIC_LS,$/;"	e	enum:CodecID
CODEC_ID_SP5X	avcodec.h	/^    CODEC_ID_SP5X,$/;"	e	enum:CodecID
CODEC_ID_SVQ1	avcodec.h	/^    CODEC_ID_SVQ1,$/;"	e	enum:CodecID
CODEC_ID_SVQ3	avcodec.h	/^    CODEC_ID_SVQ3,$/;"	e	enum:CodecID
CODEC_ID_THEORA	avcodec.h	/^    CODEC_ID_THEORA,$/;"	e	enum:CodecID
CODEC_ID_TRUEMOTION1	avcodec.h	/^    CODEC_ID_TRUEMOTION1,$/;"	e	enum:CodecID
CODEC_ID_TSCC	avcodec.h	/^    CODEC_ID_TSCC,$/;"	e	enum:CodecID
CODEC_ID_ULTI	avcodec.h	/^    CODEC_ID_ULTI,$/;"	e	enum:CodecID
CODEC_ID_VC9	avcodec.h	/^    CODEC_ID_VC9,$/;"	e	enum:CodecID
CODEC_ID_VCR1	avcodec.h	/^    CODEC_ID_VCR1,$/;"	e	enum:CodecID
CODEC_ID_VIXL	avcodec.h	/^    CODEC_ID_VIXL,$/;"	e	enum:CodecID
CODEC_ID_VMDAUDIO	avcodec.h	/^    CODEC_ID_VMDAUDIO,$/;"	e	enum:CodecID
CODEC_ID_VMDVIDEO	avcodec.h	/^    CODEC_ID_VMDVIDEO,$/;"	e	enum:CodecID
CODEC_ID_VORBIS	avcodec.h	/^    CODEC_ID_VORBIS,$/;"	e	enum:CodecID
CODEC_ID_VP3	avcodec.h	/^    CODEC_ID_VP3,$/;"	e	enum:CodecID
CODEC_ID_WMAV1	avcodec.h	/^    CODEC_ID_WMAV1,$/;"	e	enum:CodecID
CODEC_ID_WMAV2	avcodec.h	/^    CODEC_ID_WMAV2,$/;"	e	enum:CodecID
CODEC_ID_WMV1	avcodec.h	/^    CODEC_ID_WMV1,$/;"	e	enum:CodecID
CODEC_ID_WMV2	avcodec.h	/^    CODEC_ID_WMV2,$/;"	e	enum:CodecID
CODEC_ID_WMV3	avcodec.h	/^    CODEC_ID_WMV3,$/;"	e	enum:CodecID
CODEC_ID_WS_VQA	avcodec.h	/^    CODEC_ID_WS_VQA,$/;"	e	enum:CodecID
CODEC_ID_XAN_DPCM	avcodec.h	/^    CODEC_ID_XAN_DPCM,$/;"	e	enum:CodecID
CODEC_ID_XAN_WC3	avcodec.h	/^    CODEC_ID_XAN_WC3,$/;"	e	enum:CodecID
CODEC_ID_XAN_WC4	avcodec.h	/^    CODEC_ID_XAN_WC4,$/;"	e	enum:CodecID
CODEC_ID_XVID	avcodec.h	/^    CODEC_ID_XVID,$/;"	e	enum:CodecID
CODEC_ID_ZLIB	avcodec.h	/^    CODEC_ID_ZLIB,$/;"	e	enum:CodecID
CODEC_MSZH	lcl.c	73;"	d	file:
CODEC_TYPE_AUDIO	avcodec.h	/^    CODEC_TYPE_AUDIO,$/;"	e	enum:CodecType
CODEC_TYPE_DATA	avcodec.h	/^    CODEC_TYPE_DATA,$/;"	e	enum:CodecType
CODEC_TYPE_UNKNOWN	avcodec.h	/^    CODEC_TYPE_UNKNOWN = -1,$/;"	e	enum:CodecType
CODEC_TYPE_VIDEO	avcodec.h	/^    CODEC_TYPE_VIDEO,$/;"	e	enum:CodecType
CODEC_ZLIB	lcl.c	74;"	d	file:
CODING_MODE_COUNT	vp3.c	163;"	d	file:
COEFF	liba52/parse.c	315;"	d	file:
COEFF	liba52/parse.c	317;"	d	file:
COEFFS1	snow.c	678;"	d	file:
COEFFS1	snow.c	691;"	d	file:
COEFFS1	snow.c	707;"	d	file:
COEFFS1	snow.c	720;"	d	file:
COEFFS1	snow.c	734;"	d	file:
COEFFS1	snow.c	748;"	d	file:
COEFFS1	snow.c	761;"	d	file:
COEFFS1	snow.c	774;"	d	file:
COEFFS2	snow.c	681;"	d	file:
COEFFS2	snow.c	694;"	d	file:
COEFFS2	snow.c	710;"	d	file:
COEFFS2	snow.c	723;"	d	file:
COEFFS2	snow.c	737;"	d	file:
COEFFS2	snow.c	751;"	d	file:
COEFFS2	snow.c	764;"	d	file:
COEFFS2	snow.c	777;"	d	file:
COEFFS3	snow.c	684;"	d	file:
COEFFS3	snow.c	697;"	d	file:
COEFFS3	snow.c	713;"	d	file:
COEFFS3	snow.c	726;"	d	file:
COEFFS3	snow.c	740;"	d	file:
COEFFS3	snow.c	754;"	d	file:
COEFFS3	snow.c	767;"	d	file:
COEFFS3	snow.c	780;"	d	file:
COEFFS4	snow.c	687;"	d	file:
COEFFS4	snow.c	700;"	d	file:
COEFFS4	snow.c	716;"	d	file:
COEFFS4	snow.c	729;"	d	file:
COEFFS4	snow.c	743;"	d	file:
COEFFS4	snow.c	757;"	d	file:
COEFFS4	snow.c	770;"	d	file:
COEFFS4	snow.c	783;"	d	file:
COEFF_TOKEN_VLC_BITS	h264.c	46;"	d	file:
COLOR	mpegvideo.c	1879;"	d	file:
COLORS_PER_TABLE	smc.c	43;"	d	file:
COL_IDCT	i386/simple_idct_mmx.c	284;"	d	file:
COL_SHIFT	alpha/simple_idct_alpha.c	46;"	d	file:
COL_SHIFT	armv4l/simple_idct_arm.S	/^#define COL_SHIFT 20$/;"	d
COL_SHIFT	i386/idct_mmx.c	33;"	d	file:
COL_SHIFT	i386/idct_mmx.c	555;"	d	file:
COL_SHIFT	i386/simple_idct_mmx.c	47;"	d	file:
COL_SHIFT	simple_idct.c	43;"	d	file:
COL_SHIFT	simple_idct.c	53;"	d	file:
COL_SHIFTED_1	armv4l/simple_idct_arm.S	/^#define COL_SHIFTED_1 524288 \/* 1<< (COL_SHIFT-1) *\/$/;"	d
COM	mjpeg.c	/^    COM   = 0xfe,	\/* comment *\/$/;"	e	file:
COMMON_H	common.h	7;"	d
COMPARE	libpostproc/postprocess_altivec_template.c	595;"	d	file:
COMPARE	libpostproc/postprocess_altivec_template.c	622;"	d	file:
COMPATIBLE_FRAME	vp3.c	1770;"	d	file:
COMPILE_3DNOW	libpostproc/postprocess.c	611;"	d	file:
COMPILE_ALTIVEC	libpostproc/postprocess.c	596;"	d	file:
COMPILE_C	libpostproc/postprocess.c	591;"	d	file:
COMPILE_MMX	libpostproc/postprocess.c	603;"	d	file:
COMPILE_MMX2	libpostproc/postprocess.c	607;"	d	file:
COMPUTE_MASK	liba52/bit_allocate.c	108;"	d	file:
COMPUTE_U	xan.c	68;"	d	file:
COMPUTE_V	xan.c	71;"	d	file:
COMPUTE_VR	libpostproc/postprocess_altivec_template.c	311;"	d	file:
COMPUTE_Y	xan.c	65;"	d	file:
COMP_MSZH	lcl.c	62;"	d	file:
COMP_MSZH_NOCOMP	lcl.c	63;"	d	file:
COMP_ZLIB_HICOMP	lcl.c	65;"	d	file:
COMP_ZLIB_HISPEED	lcl.c	64;"	d	file:
COMP_ZLIB_NORMAL	lcl.c	66;"	d	file:
CONFIG_WIN32	common.h	10;"	d
CONST_1	sparc/dsputil_vis.c	95;"	d	file:
CONST_1024	sparc/dsputil_vis.c	103;"	d	file:
CONST_128	sparc/dsputil_vis.c	100;"	d	file:
CONST_2	sparc/dsputil_vis.c	96;"	d	file:
CONST_256	sparc/dsputil_vis.c	101;"	d	file:
CONST_3	sparc/dsputil_vis.c	97;"	d	file:
CONST_512	sparc/dsputil_vis.c	102;"	d	file:
CONST_6	sparc/dsputil_vis.c	98;"	d	file:
CONST_BITS	jfdctfst.c	302;"	d	file:
CONST_BITS	jfdctfst.c	75;"	d	file:
CONST_BITS	jfdctint.c	94;"	d	file:
CONST_BITS	jfdctint.c	97;"	d	file:
CONST_BITS	jrevdct.c	1126;"	d	file:
CONST_BITS	jrevdct.c	48;"	d	file:
CONST_BITS	mpegvideo.c	81;"	d	file:
CONST_SCALE	jrevdct.c	103;"	d	file:
CONTEXT_SIZE	ffv1.c	35;"	d	file:
CONVERT	liba52/downmix.c	26;"	d	file:
CONVERT_BIAS	dtsdec.c	42;"	d	file:
CONVERT_BIAS	dtsdec.c	45;"	d	file:
CONVERT_LEVEL	dtsdec.c	41;"	d	file:
CONVERT_LEVEL	dtsdec.c	44;"	d	file:
COPY	mpegvideo.c	499;"	d	file:
COPY	mpegvideo.c	517;"	d	file:
COPY	mpegvideo.c	535;"	d	file:
COPY	mpegvideo.c	548;"	d	file:
COPY	ppc/idct_altivec.c	183;"	d	file:
COPY3_IF_LT	common.h	441;"	d
COPY3_IF_LT	common.h	451;"	d
COPY_FROM_CURRENT	interplayvideo.c	84;"	d	file:
COPY_FROM_PREVIOUS	interplayvideo.c	99;"	d	file:
COPY_FROM_SECOND_LAST	interplayvideo.c	114;"	d	file:
CORE_VO_TYPE	mpeg4data.h	13;"	d
COS0_0	mpegaudiodec.c	541;"	d	file:
COS0_1	mpegaudiodec.c	542;"	d	file:
COS0_10	mpegaudiodec.c	551;"	d	file:
COS0_11	mpegaudiodec.c	552;"	d	file:
COS0_12	mpegaudiodec.c	553;"	d	file:
COS0_13	mpegaudiodec.c	554;"	d	file:
COS0_14	mpegaudiodec.c	555;"	d	file:
COS0_15	mpegaudiodec.c	556;"	d	file:
COS0_2	mpegaudiodec.c	543;"	d	file:
COS0_3	mpegaudiodec.c	544;"	d	file:
COS0_4	mpegaudiodec.c	545;"	d	file:
COS0_5	mpegaudiodec.c	546;"	d	file:
COS0_6	mpegaudiodec.c	547;"	d	file:
COS0_7	mpegaudiodec.c	548;"	d	file:
COS0_8	mpegaudiodec.c	549;"	d	file:
COS0_9	mpegaudiodec.c	550;"	d	file:
COS1_0	mpegaudiodec.c	558;"	d	file:
COS1_1	mpegaudiodec.c	559;"	d	file:
COS1_2	mpegaudiodec.c	560;"	d	file:
COS1_3	mpegaudiodec.c	561;"	d	file:
COS1_4	mpegaudiodec.c	562;"	d	file:
COS1_5	mpegaudiodec.c	563;"	d	file:
COS1_6	mpegaudiodec.c	564;"	d	file:
COS1_7	mpegaudiodec.c	565;"	d	file:
COS2_0	mpegaudiodec.c	567;"	d	file:
COS2_1	mpegaudiodec.c	568;"	d	file:
COS2_2	mpegaudiodec.c	569;"	d	file:
COS2_3	mpegaudiodec.c	570;"	d	file:
COS3_0	mpegaudiodec.c	572;"	d	file:
COS3_1	mpegaudiodec.c	573;"	d	file:
COS4_0	mpegaudiodec.c	575;"	d	file:
COS_4_16	ps2/idct_mmi.c	38;"	d	file:
COUNT	h264.c	6640;"	d	file:
CPAIR	smc.c	39;"	d	file:
CPL0_TAG	vqavideo.c	89;"	d	file:
CPLZ_TAG	vqavideo.c	90;"	d	file:
CQUAD	smc.c	40;"	d	file:
CRC16_POLY	ac3enc.c	1239;"	d	file:
CS4	ps2/idct_mmi.c	25;"	d	file:
CTF	ppc/fdct_altivec.c	402;"	d	file:
CTF	ppc/fdct_altivec.c	417;"	d	file:
CTF0	ppc/fdct_altivec.c	293;"	d	file:
CTF0	ppc/fdct_altivec.c	308;"	d	file:
CTFX	ppc/fdct_altivec.c	323;"	d	file:
CTFX	ppc/fdct_altivec.c	334;"	d	file:
CTS	ppc/fdct_altivec.c	473;"	d	file:
CTS	ppc/fdct_altivec.c	491;"	d	file:
CUBIC_BLEND_DEINT_FILTER	libpostproc/postprocess_internal.h	52;"	d
CUBIC_IPOL_DEINT_FILTER	libpostproc/postprocess_internal.h	53;"	d
C_CCIR_TO_JPEG	imgconvert.c	1040;"	d	file:
C_FIX	simple_idct.c	421;"	d	file:
C_FIX	simple_idct.c	500;"	d	file:
C_FIX	simple_idct.c	504;"	d	file:
C_JPEG_TO_CCIR	imgconvert.c	/^static inline int C_JPEG_TO_CCIR(int y) {$/;"	f	file:
C_SHIFT	simple_idct.c	427;"	d	file:
C_SHIFT	simple_idct.c	499;"	d	file:
C_SHIFT	simple_idct.c	508;"	d	file:
CamtasiaContext	tscc.c	/^} CamtasiaContext;$/;"	t	file:
CinepakContext	cinepak.c	/^typedef struct CinepakContext {$/;"	s	file:
CinepakContext	cinepak.c	/^} CinepakContext;$/;"	t	file:
CodecID	avcodec.h	/^enum CodecID {$/;"	g
CodecType	avcodec.h	/^enum CodecType {$/;"	g
CoefVLCTable	wmadec.c	/^typedef struct CoefVLCTable {$/;"	s	file:
CoefVLCTable	wmadec.c	/^} CoefVLCTable;$/;"	t	file:
ColumnIDCT	i386/vp3dsp_mmx.c	150;"	d	file:
ConvertEntry	imgconvert.c	/^typedef struct ConvertEntry {$/;"	s	file:
ConvertEntry	imgconvert.c	/^} ConvertEntry;$/;"	t	file:
CyuvDecodeContext	cyuv.c	/^typedef struct CyuvDecodeContext {$/;"	s	file:
CyuvDecodeContext	cyuv.c	/^} CyuvDecodeContext;$/;"	t	file:
DAC	mjpeg.c	/^    DAC   = 0xcc,	\/* define arithmetic-coding conditioning *\/$/;"	e	file:
DATABLOCK1	ra144.c	23;"	d	file:
DATACHUNK1	ra144.c	24;"	d	file:
DCTBLOCK	jrevdct.c	/^typedef DCTELEM DCTBLOCK[DCTSIZE2];$/;"	t	file:
DCTELEM	dsputil.h	/^typedef short DCTELEM;$/;"	t
DCTSIZE	jfdctfst.c	43;"	d	file:
DCTSIZE	jfdctint.c	37;"	d	file:
DCTSIZE	jrevdct.c	39;"	d	file:
DCTSIZE	jrevdct.c	915;"	d	file:
DCTSIZE	jrevdct.c	916;"	d	file:
DCTSIZE2	jrevdct.c	40;"	d	file:
DCTSTRIDE	jrevdct.c	917;"	d	file:
DCT_8_INV_COL8	ps2/idct_mmi.c	107;"	d	file:
DCT_8_INV_COL8_ADD	ps2/idct_mmi.c	269;"	d	file:
DCT_8_INV_COL8_PMS	ps2/idct_mmi.c	220;"	d	file:
DCT_8_INV_COL8_PUT	ps2/idct_mmi.c	248;"	d	file:
DCT_8_INV_COL8_STORE	ps2/idct_mmi.c	188;"	d	file:
DCT_8_INV_ROW1	ps2/idct_mmi.c	77;"	d	file:
DCT_common_init	mpegvideo.c	/^int DCT_common_init(MpegEncContext *s)$/;"	f
DC_128_PRED	h264data.h	40;"	d
DC_128_PRED8x8	h264data.h	50;"	d
DC_COND_IDCT	i386/simple_idct_mmx.c	469;"	d	file:
DC_COND_ROW_IDCT	i386/simple_idct_mmx.c	361;"	d	file:
DC_END	mpegvideo.h	527;"	d
DC_ERROR	mpegvideo.h	524;"	d
DC_MARKER	mpeg4data.h	28;"	d
DC_MAX	msmpeg4.c	842;"	d	file:
DC_PRED	h264data.h	30;"	d
DC_PRED8x8	h264data.h	43;"	d
DC_VLC_BITS	h263.c	49;"	d	file:
DC_VLC_BITS	mpeg12.c	47;"	d	file:
DC_VLC_BITS	msmpeg4.c	41;"	d	file:
DC_VLC_BITS	rv10.c	32;"	d	file:
DC_VLC_BITS	vc9.c	44;"	d	file:
DCtab_chrom	mpeg4data.h	/^const uint8_t DCtab_chrom[13][2] =$/;"	v
DCtab_lum	mpeg4data.h	/^const uint8_t DCtab_lum[13][2] =$/;"	v
DEBUG	common.h	170;"	d
DEBUG	shorten.c	27;"	d	file:
DEBUG_BLOCK_CODING	vp3.c	69;"	d	file:
DEBUG_DC_PRED	vp3.c	74;"	d	file:
DEBUG_DEQUANTIZERS	vp3.c	68;"	d	file:
DEBUG_IDCT	vp3.c	75;"	d	file:
DEBUG_INIT	vp3.c	67;"	d	file:
DEBUG_INTERPLAY	interplayvideo.c	48;"	d	file:
DEBUG_MODES	vp3.c	70;"	d	file:
DEBUG_TOKEN	vp3.c	72;"	d	file:
DEBUG_VECTORS	vp3.c	71;"	d	file:
DEBUG_VLC	vp3.c	73;"	d	file:
DEBUG_VP3	vp3.c	66;"	d	file:
DECODE_SLICE_ERROR	mpeg12.c	2400;"	d	file:
DECODE_SLICE_OK	mpeg12.c	2401;"	d	file:
DEF	i386/dsputil_mmx.c	132;"	d	file:
DEF	i386/dsputil_mmx.c	139;"	d	file:
DEF	i386/dsputil_mmx.c	146;"	d	file:
DEF	i386/dsputil_mmx.c	153;"	d	file:
DEF	i386/dsputil_mmx.c	161;"	d	file:
DEF	i386/dsputil_mmx.c	167;"	d	file:
DEF	i386/dsputil_mmx.c	173;"	d	file:
DEF	i386/dsputil_mmx.c	180;"	d	file:
DEF	i386/dsputil_mmx_rnd.h	/^static __attribute__((unused)) void DEF(avg, pixels16_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static __attribute__((unused)) void DEF(avg, pixels8_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels16)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels16_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels16_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels16_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels4)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels8)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels8_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels8_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(avg, pixels8_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels16_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels16_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels16_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels16_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels8_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels8_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels8_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEF	i386/dsputil_mmx_rnd.h	/^static void DEF(put, pixels8_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
DEFAULT_BLOCK_SIZE	shorten.c	42;"	d	file:
DEFAULT_FRAME_RATE_BASE	avcodec.h	645;"	d
DEFAULT_INTER_INDEX	msmpeg4.c	57;"	d	file:
DEFFUNC	sh4/dsputil_align.c	259;"	d	file:
DEFREG	sh4/idct_sh4.c	108;"	d	file:
DEFREG	sh4/idct_sh4.c	76;"	d	file:
DEF_OLD_QPEL	dsputil.h	111;"	d
DEINT_CUBIC	libpostproc/postprocess_template.c	1636;"	d	file:
DEINT_FF	libpostproc/postprocess_template.c	1707;"	d	file:
DEINT_INPLACE_LINE_LUM	imgconvert.c	2253;"	d	file:
DEINT_L5	libpostproc/postprocess_template.c	1793;"	d	file:
DEINT_LINE_LUM	imgconvert.c	2276;"	d	file:
DELTA_BIT_NEW	liba52/a52_internal.h	102;"	d
DELTA_BIT_NONE	liba52/a52_internal.h	103;"	d
DELTA_BIT_RESERVED	liba52/a52_internal.h	104;"	d
DELTA_BIT_REUSE	liba52/a52_internal.h	101;"	d
DERING	libpostproc/postprocess_internal.h	26;"	d
DERING_CORE	libpostproc/postprocess_template.c	1378;"	d	file:
DESCALE	jfdctfst.c	104;"	d	file:
DESCALE	jfdctfst.c	105;"	d	file:
DESCALE	jfdctfst.c	303;"	d	file:
DESCALE	jfdctint.c	44;"	d	file:
DESCALE	jfdctint.c	46;"	d	file:
DESCALE	jrevdct.c	119;"	d	file:
DESCALE	sh4/idct_sh4.c	119;"	d	file:
DESCALE	sh4/idct_sh4.c	121;"	d	file:
DEV_ORDER	mpegaudiodec.c	251;"	d	file:
DHP	mjpeg.c	/^    DHP   = 0xde,	\/* define hierarchical progression *\/$/;"	e	file:
DHT	mjpeg.c	/^    DHT   = 0xc4,	\/* define huffman tables *\/$/;"	e	file:
DIAG_DOWN_LEFT_PRED	h264data.h	31;"	d
DIAG_DOWN_RIGHT_PRED	h264data.h	32;"	d
DIV	liba52/a52_internal.h	134;"	d
DIV	liba52/a52_internal.h	159;"	d
DK3_GET_NEXT_NIBBLE	adpcm.c	535;"	d	file:
DNL	mjpeg.c	/^    DNL   = 0xdc,	\/* define number of lines *\/$/;"	e	file:
DPCMContext	dpcm.c	/^typedef struct DPCMContext {$/;"	s	file:
DPCMContext	dpcm.c	/^} DPCMContext;$/;"	t	file:
DQDOUBLE_BEDGE_BOTTOMLEFT	vc9.c	106;"	d	file:
DQDOUBLE_BEDGE_BOTTOMRIGHT	vc9.c	105;"	d	file:
DQDOUBLE_BEDGE_TOPLEFT	vc9.c	103;"	d	file:
DQDOUBLE_BEDGE_TOPRIGHT	vc9.c	104;"	d	file:
DQPROFILE_ALL_MBS	vc9.c	88;"	d	file:
DQPROFILE_DOUBLE_EDGES	vc9.c	86;"	d	file:
DQPROFILE_FOUR_EDGES	vc9.c	85;"	d	file:
DQPROFILE_FOUR_EDGES	vc9.c	94;"	d	file:
DQPROFILE_SINGLE_EDGE	vc9.c	87;"	d	file:
DQSINGLE_BEDGE_BOTTOM	vc9.c	98;"	d	file:
DQSINGLE_BEDGE_LEFT	vc9.c	95;"	d	file:
DQSINGLE_BEDGE_RIGHT	vc9.c	97;"	d	file:
DQSINGLE_BEDGE_TOP	vc9.c	96;"	d	file:
DQT	mjpeg.c	/^    DQT   = 0xdb,	\/* define quantization tables *\/$/;"	e	file:
DRI	mjpeg.c	/^    DRI   = 0xdd,	\/* define restart interval *\/$/;"	e	file:
DSPContext	dsputil.h	/^typedef struct DSPContext {$/;"	s
DSPContext	dsputil.h	/^} DSPContext;$/;"	t
DSPUTIL_H	dsputil.h	29;"	d
DST_0	sparc/dsputil_vis.c	91;"	d	file:
DST_1	sparc/dsputil_vis.c	92;"	d	file:
DST_2	sparc/dsputil_vis.c	93;"	d	file:
DST_3	sparc/dsputil_vis.c	94;"	d	file:
DUMP	imgresample.c	166;"	d	file:
DUP4	sparc/dsputil_vis.c	61;"	d	file:
DUP8	sparc/dsputil_vis.c	62;"	d	file:
DVVideoContext	dv.c	/^typedef struct DVVideoContext {$/;"	s	file:
DVVideoContext	dv.c	/^} DVVideoContext;$/;"	t	file:
DV_VLC_MAP_LEV_SIZE	dv.c	54;"	d	file:
DV_VLC_MAP_LEV_SIZE	dv.c	57;"	d	file:
DV_VLC_MAP_RUN_SIZE	dv.c	53;"	d	file:
DV_VLC_MAP_RUN_SIZE	dv.c	56;"	d	file:
DVprofile	dvdata.h	/^typedef struct DVprofile {$/;"	s
DVprofile	dvdata.h	/^} DVprofile;$/;"	t
DWTELEM	snow.c	33;"	d	file:
EDGE_WIDTH	mpegvideo.h	42;"	d
EIGHT_BIT_SAMPLES	jrevdct.c	37;"	d	file:
END_NOT_FOUND	mpegvideo.h	761;"	d
ENERGYSIZE	shorten.c	47;"	d	file:
ENODATA	common.h	34;"	d
EOI	mjpeg.c	/^    EOI   = 0xd9,	\/* end of image *\/$/;"	e	file:
EXP	mjpeg.c	/^    EXP   = 0xdf,	\/* expand reference components *\/$/;"	e	file:
EXP_D15	ac3.h	35;"	d
EXP_D15	liba52/a52_internal.h	97;"	d
EXP_D25	ac3.h	36;"	d
EXP_D25	liba52/a52_internal.h	98;"	d
EXP_D45	ac3.h	37;"	d
EXP_D45	liba52/a52_internal.h	99;"	d
EXP_DIFF_THRESHOLD	ac3enc.c	66;"	d	file:
EXP_NEW	ac3.h	33;"	d
EXP_REUSE	ac3.h	32;"	d
EXP_REUSE	liba52/a52_internal.h	96;"	d
EXTENDED_PAR	mpeg4data.h	21;"	d
EXTENDED_SAR	h264data.h	52;"	d
EXTRACT	libpostproc/postprocess_altivec_template.c	554;"	d	file:
EXTRACT	libpostproc/postprocess_altivec_template.c	575;"	d	file:
EXT_START_CODE	mpeg12.c	44;"	d	file:
EXT_START_CODE	parser.c	159;"	d	file:
Eight	i386/vp3dsp_mmx.c	296;"	d	file:
EightBpsContext	8bps.c	/^typedef struct EightBpsContext {$/;"	s	file:
EightBpsContext	8bps.c	/^} EightBpsContext;$/;"	t	file:
EncBlockInfo	dv.c	/^typedef struct EncBlockInfo {$/;"	s	file:
EncBlockInfo	dv.c	/^} EncBlockInfo;$/;"	t	file:
Exp1to3	mace.c	/^static void Exp1to3(MACEContext *ctx,$/;"	f	file:
Exp1to6	mace.c	/^static void Exp1to6(MACEContext *ctx,$/;"	f	file:
F	g726.c	/^	int* F;               \/**< special table #2 *\/$/;"	m	struct:G726Tables	file:
F	i386/idct_mmx.c	323;"	d	file:
F2	libpostproc/postprocess_altivec_template.c	723;"	d	file:
F2	libpostproc/postprocess_altivec_template.c	803;"	d	file:
FAACContext	faad.c	/^} FAACContext;$/;"	t	file:
FAADAPI	faad.c	32;"	d	file:
FAAN_POSTSCALE	faandct.h	28;"	d
FASTDIV	common.h	271;"	d
FASTDIV	common.h	282;"	d
FASTDIV	common.h	284;"	d
FAST_L2_DIFF	libpostproc/postprocess_template.c	2246;"	d	file:
FCENTER	imgresample.c	37;"	d	file:
FDCTCOL	ppc/fdct_altivec.c	135;"	d	file:
FDCTROW	ppc/fdct_altivec.c	78;"	d	file:
FELEM	resample2.c	34;"	d	file:
FELEM	resample2.c	41;"	d	file:
FELEM2	resample2.c	35;"	d	file:
FELEM2	resample2.c	42;"	d	file:
FELEM_MAX	resample2.c	36;"	d	file:
FELEM_MAX	resample2.c	43;"	d	file:
FELEM_MIN	resample2.c	37;"	d	file:
FELEM_MIN	resample2.c	44;"	d	file:
FETCH_NEXT_STREAM_BYTE	msrle.c	50;"	d	file:
FFMAX	common.h	265;"	d
FFMIN	common.h	266;"	d
FFMPEG_DEINT_FILTER	libpostproc/postprocess_internal.h	55;"	d
FFMPEG_VERSION	avcodec.h	19;"	d
FFMPEG_VERSION_INT	avcodec.h	18;"	d
FFTComplex	dsputil.h	/^typedef struct FFTComplex {$/;"	s
FFTComplex	dsputil.h	/^} FFTComplex;$/;"	t
FFTContext	dsputil.h	/^typedef struct FFTContext {$/;"	s
FFTContext	dsputil.h	/^} FFTContext;$/;"	t
FFTSample	dsputil.h	/^typedef float FFTSample;$/;"	t
FFV1Context	ffv1.c	/^typedef struct FFV1Context{$/;"	s	file:
FFV1Context	ffv1.c	/^}FFV1Context;$/;"	t	file:
FF_AA_AUTO	avcodec.h	1622;"	d
FF_AA_FASTINT	avcodec.h	1623;"	d
FF_AA_FLOAT	avcodec.h	1625;"	d
FF_AA_INT	avcodec.h	1624;"	d
FF_ALPHA_SEMI_TRANSP	avcodec.h	2128;"	d
FF_ALPHA_TRANSP	avcodec.h	2127;"	d
FF_ASPECT_EXTENDED	avcodec.h	736;"	d
FF_BUFFER_HINTS_PRESERVE	avcodec.h	635;"	d
FF_BUFFER_HINTS_READABLE	avcodec.h	634;"	d
FF_BUFFER_HINTS_REUSABLE	avcodec.h	636;"	d
FF_BUFFER_HINTS_VALID	avcodec.h	633;"	d
FF_BUFFER_TYPE_COPY	avcodec.h	623;"	d
FF_BUFFER_TYPE_INTERNAL	avcodec.h	620;"	d
FF_BUFFER_TYPE_SHARED	avcodec.h	622;"	d
FF_BUFFER_TYPE_USER	avcodec.h	621;"	d
FF_BUG_AC_VLC	avcodec.h	922;"	d
FF_BUG_AMV	avcodec.h	921;"	d
FF_BUG_AUTODETECT	avcodec.h	916;"	d
FF_BUG_DC_CLIP	avcodec.h	929;"	d
FF_BUG_DIRECT_BLOCKSIZE	avcodec.h	926;"	d
FF_BUG_EDGE	avcodec.h	927;"	d
FF_BUG_HPEL_CHROMA	avcodec.h	928;"	d
FF_BUG_MS	avcodec.h	930;"	d
FF_BUG_NO_PADDING	avcodec.h	920;"	d
FF_BUG_OLD_MSMPEG4	avcodec.h	917;"	d
FF_BUG_QPEL_CHROMA	avcodec.h	923;"	d
FF_BUG_QPEL_CHROMA2	avcodec.h	925;"	d
FF_BUG_STD_QPEL	avcodec.h	924;"	d
FF_BUG_UMP4	avcodec.h	919;"	d
FF_BUG_XVID_ILACE	avcodec.h	918;"	d
FF_B_TYPE	avcodec.h	628;"	d
FF_CMP_BIT	avcodec.h	1328;"	d
FF_CMP_CHROMA	avcodec.h	1337;"	d
FF_CMP_DCT	avcodec.h	1326;"	d
FF_CMP_DCTMAX	avcodec.h	1336;"	d
FF_CMP_NSSE	avcodec.h	1333;"	d
FF_CMP_PSNR	avcodec.h	1327;"	d
FF_CMP_RD	avcodec.h	1329;"	d
FF_CMP_SAD	avcodec.h	1323;"	d
FF_CMP_SATD	avcodec.h	1325;"	d
FF_CMP_SSE	avcodec.h	1324;"	d
FF_CMP_VSAD	avcodec.h	1331;"	d
FF_CMP_VSSE	avcodec.h	1332;"	d
FF_CMP_W53	avcodec.h	1334;"	d
FF_CMP_W97	avcodec.h	1335;"	d
FF_CMP_ZERO	avcodec.h	1330;"	d
FF_CODER_TYPE_AC	avcodec.h	1477;"	d
FF_CODER_TYPE_VLC	avcodec.h	1476;"	d
FF_COLOR_GRAY	imgconvert.c	46;"	d	file:
FF_COLOR_RGB	imgconvert.c	45;"	d	file:
FF_COLOR_YUV	imgconvert.c	47;"	d	file:
FF_COLOR_YUV_JPEG	imgconvert.c	48;"	d	file:
FF_COMMON_FRAME	avcodec.h	409;"	d
FF_DCT_ALTIVEC	avcodec.h	1111;"	d
FF_DCT_AUTO	avcodec.h	1106;"	d
FF_DCT_FAAN	avcodec.h	1112;"	d
FF_DCT_FASTINT	avcodec.h	1107;"	d
FF_DCT_INT	avcodec.h	1108;"	d
FF_DCT_MLIB	avcodec.h	1110;"	d
FF_DCT_MMX	avcodec.h	1109;"	d
FF_DEBUG_BITSTREAM	avcodec.h	1254;"	d
FF_DEBUG_BUGS	avcodec.h	1264;"	d
FF_DEBUG_DCT_COEFF	avcodec.h	1258;"	d
FF_DEBUG_ER	avcodec.h	1262;"	d
FF_DEBUG_MB_TYPE	avcodec.h	1255;"	d
FF_DEBUG_MMCO	avcodec.h	1263;"	d
FF_DEBUG_MV	avcodec.h	1257;"	d
FF_DEBUG_PICT_INFO	avcodec.h	1252;"	d
FF_DEBUG_PTS	avcodec.h	1261;"	d
FF_DEBUG_QP	avcodec.h	1256;"	d
FF_DEBUG_RC	avcodec.h	1253;"	d
FF_DEBUG_SKIP	avcodec.h	1259;"	d
FF_DEBUG_STARTCODE	avcodec.h	1260;"	d
FF_DEBUG_VIS_MB_TYPE	avcodec.h	1266;"	d
FF_DEBUG_VIS_MV_B_BACK	avcodec.h	1276;"	d
FF_DEBUG_VIS_MV_B_FOR	avcodec.h	1275;"	d
FF_DEBUG_VIS_MV_P_FOR	avcodec.h	1274;"	d
FF_DEBUG_VIS_QP	avcodec.h	1265;"	d
FF_DEFAULT_QUANT_BIAS	avcodec.h	1433;"	d
FF_DTG_AFD_14_9	avcodec.h	1404;"	d
FF_DTG_AFD_16_9	avcodec.h	1403;"	d
FF_DTG_AFD_16_9_SP_14_9	avcodec.h	1406;"	d
FF_DTG_AFD_4_3	avcodec.h	1402;"	d
FF_DTG_AFD_4_3_SP_14_9	avcodec.h	1405;"	d
FF_DTG_AFD_SAME	avcodec.h	1401;"	d
FF_DTG_AFD_SP_4_3	avcodec.h	1407;"	d
FF_EC_DEBLOCK	avcodec.h	1192;"	d
FF_EC_GUESS_MVS	avcodec.h	1191;"	d
FF_ER_AGGRESSIVE	avcodec.h	972;"	d
FF_ER_CAREFULL	avcodec.h	970;"	d
FF_ER_COMPLIANT	avcodec.h	971;"	d
FF_ER_VERY_AGGRESSIVE	avcodec.h	973;"	d
FF_IDCT_ALTIVEC	avcodec.h	1167;"	d
FF_IDCT_ARM	avcodec.h	1166;"	d
FF_IDCT_AUTO	avcodec.h	1159;"	d
FF_IDCT_H264	avcodec.h	1170;"	d
FF_IDCT_INT	avcodec.h	1160;"	d
FF_IDCT_LIBMPEG2MMX	avcodec.h	1163;"	d
FF_IDCT_MLIB	avcodec.h	1165;"	d
FF_IDCT_PS2	avcodec.h	1164;"	d
FF_IDCT_SH4	avcodec.h	1168;"	d
FF_IDCT_SIMPLE	avcodec.h	1161;"	d
FF_IDCT_SIMPLEARM	avcodec.h	1169;"	d
FF_IDCT_SIMPLEMMX	avcodec.h	1162;"	d
FF_INPUT_BUFFER_PADDING_SIZE	avcodec.h	248;"	d
FF_I_TYPE	avcodec.h	626;"	d
FF_LAMBDA_MAX	avcodec.h	1465;"	d
FF_LAMBDA_SCALE	avcodec.h	1463;"	d
FF_LAMBDA_SHIFT	avcodec.h	1462;"	d
FF_LEVEL_UNKNOWN	avcodec.h	1717;"	d
FF_LIBMPEG2_IDCT_PERM	dsputil.h	318;"	d
FF_LOSS_ALPHA	avcodec.h	2118;"	d
FF_LOSS_CHROMA	avcodec.h	2120;"	d
FF_LOSS_COLORQUANT	avcodec.h	2119;"	d
FF_LOSS_COLORSPACE	avcodec.h	2117;"	d
FF_LOSS_DEPTH	avcodec.h	2116;"	d
FF_LOSS_RESOLUTION	avcodec.h	2115;"	d
FF_MAX_B_FRAMES	avcodec.h	284;"	d
FF_MB_DECISION_BITS	avcodec.h	1516;"	d
FF_MB_DECISION_RD	avcodec.h	1517;"	d
FF_MB_DECISION_SIMPLE	avcodec.h	1515;"	d
FF_MIN_BUFFER_SIZE	avcodec.h	254;"	d
FF_MM_3DNOW	avcodec.h	1207;"	d
FF_MM_3DNOWEXT	avcodec.h	1211;"	d
FF_MM_FORCE	avcodec.h	1203;"	d
FF_MM_MMX	avcodec.h	1206;"	d
FF_MM_MMXEXT	avcodec.h	1208;"	d
FF_MM_SSE	avcodec.h	1209;"	d
FF_MM_SSE2	avcodec.h	1210;"	d
FF_NO_IDCT_PERM	dsputil.h	317;"	d
FF_OPT_MAX_DEPTH	avcodec.h	1818;"	d
FF_OPT_TYPE_BOOL	avcodec.h	1798;"	d
FF_OPT_TYPE_DOUBLE	avcodec.h	1799;"	d
FF_OPT_TYPE_FLAG	avcodec.h	1804;"	d
FF_OPT_TYPE_INT	avcodec.h	1800;"	d
FF_OPT_TYPE_MASK	avcodec.h	1802;"	d
FF_OPT_TYPE_RCOVERRIDE	avcodec.h	1805;"	d
FF_OPT_TYPE_STRING	avcodec.h	1801;"	d
FF_PIXEL_PACKED	imgconvert.c	51;"	d	file:
FF_PIXEL_PALETTE	imgconvert.c	52;"	d	file:
FF_PIXEL_PLANAR	imgconvert.c	50;"	d	file:
FF_PRED_LEFT	avcodec.h	1227;"	d
FF_PRED_MEDIAN	avcodec.h	1229;"	d
FF_PRED_PLANE	avcodec.h	1228;"	d
FF_PROFILE_UNKNOWN	avcodec.h	1709;"	d
FF_P_TYPE	avcodec.h	627;"	d
FF_QP2LAMBDA	avcodec.h	1464;"	d
FF_QSCALE_TYPE_MPEG1	avcodec.h	617;"	d
FF_QSCALE_TYPE_MPEG2	avcodec.h	618;"	d
FF_QUALITY_SCALE	avcodec.h	1467;"	d
FF_SIMPLE_IDCT_PERM	dsputil.h	319;"	d
FF_SI_TYPE	avcodec.h	630;"	d
FF_SP_TYPE	avcodec.h	631;"	d
FF_S_TYPE	avcodec.h	629;"	d
FF_TRANSPOSE_IDCT_PERM	dsputil.h	320;"	d
FILTER4	imgresample.c	150;"	d	file:
FILTER_BITS	imgresample.c	43;"	d	file:
FILTER_SHIFT	resample2.c	32;"	d	file:
FILTER_SHIFT	resample2.c	39;"	d	file:
FIND_MIN_MAX	libpostproc/postprocess_template.c	1202;"	d	file:
FIND_MIN_MAX	libpostproc/postprocess_template.c	1217;"	d	file:
FIX	imgconvert.c	2493;"	d	file:
FIX	imgconvert.c	997;"	d	file:
FIX	jrevdct.c	1125;"	d	file:
FIX	jrevdct.c	112;"	d	file:
FIX	mpegaudio.c	34;"	d	file:
FIX	mpegaudio.c	799;"	d	file:
FIX	mpegaudiodec.c	67;"	d	file:
FIXHR	mpegaudiodec.c	72;"	d	file:
FIXR	mpegaudiodec.c	69;"	d	file:
FIX_0_211164243	jrevdct.c	150;"	d	file:
FIX_0_275899380	jrevdct.c	151;"	d	file:
FIX_0_298631336	armv4l/jrevdct_arm.S	/^#define FIX_0_298631336 2446$/;"	d
FIX_0_298631336	jfdctint.c	109;"	d	file:
FIX_0_298631336	jfdctint.c	122;"	d	file:
FIX_0_298631336	jrevdct.c	152;"	d	file:
FIX_0_298631336_ID	armv4l/jrevdct_arm.S	/^#define FIX_0_298631336_ID      0$/;"	d
FIX_0_382683433	jfdctfst.c	86;"	d	file:
FIX_0_382683433	jfdctfst.c	91;"	d	file:
FIX_0_390180644	jfdctint.c	110;"	d	file:
FIX_0_390180644	jfdctint.c	123;"	d	file:
FIX_0_390180644	jrevdct.c	153;"	d	file:
FIX_0_509795579	jrevdct.c	154;"	d	file:
FIX_0_541196100	armv4l/jrevdct_arm.S	/^#define FIX_0_541196100 4433$/;"	d
FIX_0_541196100	jfdctfst.c	304;"	d	file:
FIX_0_541196100	jfdctfst.c	87;"	d	file:
FIX_0_541196100	jfdctfst.c	92;"	d	file:
FIX_0_541196100	jfdctint.c	111;"	d	file:
FIX_0_541196100	jfdctint.c	124;"	d	file:
FIX_0_541196100	jrevdct.c	155;"	d	file:
FIX_0_541196100_ID	armv4l/jrevdct_arm.S	/^#define FIX_0_541196100_ID      4$/;"	d
FIX_0_601344887	jrevdct.c	156;"	d	file:
FIX_0_707106781	jfdctfst.c	88;"	d	file:
FIX_0_707106781	jfdctfst.c	93;"	d	file:
FIX_0_765366865	armv4l/jrevdct_arm.S	/^#define FIX_0_765366865 6270$/;"	d
FIX_0_765366865	jfdctint.c	112;"	d	file:
FIX_0_765366865	jfdctint.c	125;"	d	file:
FIX_0_765366865	jrevdct.c	157;"	d	file:
FIX_0_765366865_ID	armv4l/jrevdct_arm.S	/^#define FIX_0_765366865_ID      8$/;"	d
FIX_0_785694958	jrevdct.c	158;"	d	file:
FIX_0_899976223	jfdctint.c	113;"	d	file:
FIX_0_899976223	jfdctint.c	126;"	d	file:
FIX_0_899976223	jrevdct.c	159;"	d	file:
FIX_0xFFFF	armv4l/jrevdct_arm.S	/^#define FIX_0xFFFF 0xFFFF	$/;"	d
FIX_0xFFFF_ID	armv4l/jrevdct_arm.S	/^#define FIX_0xFFFF_ID          48$/;"	d
FIX_1_061594337	jrevdct.c	160;"	d	file:
FIX_1_082392200	4xm.c	131;"	d	file:
FIX_1_111140466	jrevdct.c	161;"	d	file:
FIX_1_175875602	armv4l/jrevdct_arm.S	/^#define FIX_1_175875602 9633$/;"	d
FIX_1_175875602	jfdctint.c	114;"	d	file:
FIX_1_175875602	jfdctint.c	127;"	d	file:
FIX_1_175875602	jrevdct.c	162;"	d	file:
FIX_1_175875602_ID	armv4l/jrevdct_arm.S	/^#define FIX_1_175875602_ID     12$/;"	d
FIX_1_306562965	jfdctfst.c	305;"	d	file:
FIX_1_306562965	jfdctfst.c	89;"	d	file:
FIX_1_306562965	jfdctfst.c	94;"	d	file:
FIX_1_306562965	jrevdct.c	163;"	d	file:
FIX_1_387039845	jrevdct.c	164;"	d	file:
FIX_1_414213562	4xm.c	132;"	d	file:
FIX_1_451774981	jrevdct.c	165;"	d	file:
FIX_1_501321110	armv4l/jrevdct_arm.S	/^#define FIX_1_501321110 12299$/;"	d
FIX_1_501321110	jfdctint.c	115;"	d	file:
FIX_1_501321110	jfdctint.c	128;"	d	file:
FIX_1_501321110	jrevdct.c	166;"	d	file:
FIX_1_501321110_ID	armv4l/jrevdct_arm.S	/^#define FIX_1_501321110_ID     16$/;"	d
FIX_1_662939225	jrevdct.c	167;"	d	file:
FIX_1_847759065	4xm.c	133;"	d	file:
FIX_1_847759065	jfdctint.c	116;"	d	file:
FIX_1_847759065	jfdctint.c	129;"	d	file:
FIX_1_847759065	jrevdct.c	168;"	d	file:
FIX_1_961570560	jfdctint.c	117;"	d	file:
FIX_1_961570560	jfdctint.c	130;"	d	file:
FIX_1_961570560	jrevdct.c	169;"	d	file:
FIX_2_053119869	armv4l/jrevdct_arm.S	/^#define FIX_2_053119869 16819$/;"	d
FIX_2_053119869	jfdctint.c	118;"	d	file:
FIX_2_053119869	jfdctint.c	131;"	d	file:
FIX_2_053119869	jrevdct.c	170;"	d	file:
FIX_2_053119869_ID	armv4l/jrevdct_arm.S	/^#define FIX_2_053119869_ID     20$/;"	d
FIX_2_172734803	jrevdct.c	171;"	d	file:
FIX_2_562915447	jfdctint.c	119;"	d	file:
FIX_2_562915447	jfdctint.c	132;"	d	file:
FIX_2_562915447	jrevdct.c	172;"	d	file:
FIX_2_613125930	4xm.c	134;"	d	file:
FIX_3_072711026	armv4l/jrevdct_arm.S	/^#define FIX_3_072711026 25172$/;"	d
FIX_3_072711026	jfdctint.c	120;"	d	file:
FIX_3_072711026	jfdctint.c	133;"	d	file:
FIX_3_072711026	jrevdct.c	173;"	d	file:
FIX_3_072711026_ID	armv4l/jrevdct_arm.S	/^#define FIX_3_072711026_ID     24$/;"	d
FIX_M_0_390180644	armv4l/jrevdct_arm.S	/^#define FIX_M_0_390180644 -3196$/;"	d
FIX_M_0_390180644_ID	armv4l/jrevdct_arm.S	/^#define FIX_M_0_390180644_ID   28$/;"	d
FIX_M_0_899976223	armv4l/jrevdct_arm.S	/^#define FIX_M_0_899976223 -7373$/;"	d
FIX_M_0_899976223_ID	armv4l/jrevdct_arm.S	/^#define FIX_M_0_899976223_ID   32$/;"	d
FIX_M_1_847759065	armv4l/jrevdct_arm.S	/^#define FIX_M_1_847759065 -15137$/;"	d
FIX_M_1_847759065_ID	armv4l/jrevdct_arm.S	/^#define FIX_M_1_847759065_ID   36$/;"	d
FIX_M_1_961570560	armv4l/jrevdct_arm.S	/^#define FIX_M_1_961570560 -16069$/;"	d
FIX_M_1_961570560_ID	armv4l/jrevdct_arm.S	/^#define FIX_M_1_961570560_ID   40$/;"	d
FIX_M_2_562915447	armv4l/jrevdct_arm.S	/^#define FIX_M_2_562915447 -20995$/;"	d
FIX_M_2_562915447_ID	armv4l/jrevdct_arm.S	/^#define FIX_M_2_562915447_ID   44$/;"	d
FLACContext	flac.c	/^typedef struct FLACContext {$/;"	s	file:
FLACContext	flac.c	/^} FLACContext;$/;"	t	file:
FLAC_STREAMINFO_SIZE	flac.c	45;"	d	file:
FLAGMASK_UNUSED	lcl.c	71;"	d	file:
FLAG_CHROMA	motion_est.c	77;"	d	file:
FLAG_DIRECT	motion_est.c	78;"	d	file:
FLAG_INTERFRAME	truemotion1.c	80;"	d	file:
FLAG_INTERPOLATED	truemotion1.c	81;"	d	file:
FLAG_KEYFRAME	truemotion1.c	79;"	d	file:
FLAG_MULTITHREAD	lcl.c	68;"	d	file:
FLAG_NULLFRAME	lcl.c	69;"	d	file:
FLAG_PNGFILTER	lcl.c	70;"	d	file:
FLAG_QPEL	motion_est.c	76;"	d	file:
FLAG_QPEL	snow.c	1703;"	d	file:
FLAG_SPRITE	truemotion1.c	78;"	d	file:
FLI_256_COLOR	flicvideo.c	45;"	d	file:
FLI_BLACK	flicvideo.c	49;"	d	file:
FLI_BRUN	flicvideo.c	50;"	d	file:
FLI_COLOR	flicvideo.c	47;"	d	file:
FLI_COPY	flicvideo.c	51;"	d	file:
FLI_DELTA	flicvideo.c	46;"	d	file:
FLI_LC	flicvideo.c	48;"	d	file:
FLI_MINI	flicvideo.c	52;"	d	file:
FLOAT	faandct.c	32;"	d	file:
FLOAT_AA	mpegaudiodec.c	1976;"	d	file:
FLOAT_n	ppc/dsputil_altivec.h	81;"	d
FLOAT_p	ppc/dsputil_altivec.h	82;"	d
FMT_H261	mpegvideo.h	/^    FMT_H261,$/;"	e	enum:OutputFormat
FMT_H263	mpegvideo.h	/^    FMT_H263,$/;"	e	enum:OutputFormat
FMT_H264	mpegvideo.h	/^    FMT_H264,$/;"	e	enum:OutputFormat
FMT_MJPEG	mpegvideo.h	/^    FMT_MJPEG, $/;"	e	enum:OutputFormat
FMT_MPEG1	mpegvideo.h	/^    FMT_MPEG1,$/;"	e	enum:OutputFormat
FMT_RGB24	imgconvert.c	1520;"	d	file:
FMT_RGB24	imgconvert_template.h	856;"	d
FMT_RGBA32	imgconvert.c	1543;"	d	file:
FMT_RGBA32	imgconvert_template.h	857;"	d
FN	ac3enc.c	1473;"	d	file:
FNSIZE	shorten.c	59;"	d	file:
FN_BITSHIFT	shorten.c	66;"	d	file:
FN_BLOCKSIZE	shorten.c	65;"	d	file:
FN_DIFF0	shorten.c	60;"	d	file:
FN_DIFF1	shorten.c	61;"	d	file:
FN_DIFF2	shorten.c	62;"	d	file:
FN_DIFF3	shorten.c	63;"	d	file:
FN_QLPC	shorten.c	67;"	d	file:
FN_QUIT	shorten.c	64;"	d	file:
FN_VERBATIM	shorten.c	69;"	d	file:
FN_ZERO	shorten.c	68;"	d	file:
FORCE_QUANT	libpostproc/postprocess_internal.h	59;"	d
FOURCC_MSZH	lcl.c	76;"	d	file:
FOURCC_ZLIB	lcl.c	77;"	d	file:
FOUROF	ppc/mpegvideo_altivec.c	101;"	d	file:
FOUROF	ppc/mpegvideo_altivec.c	104;"	d	file:
FOUROF	ppc/mpegvideo_altivec.c	520;"	d	file:
FRAC_BITS	mpegaudio.c	31;"	d	file:
FRAC_BITS	mpegaudiodec.c	44;"	d	file:
FRAC_BITS	mpegaudiodec.c	47;"	d	file:
FRAC_BITS	snow.c	36;"	d	file:
FRAC_ONE	mpegaudiodec.c	63;"	d	file:
FRAC_RND	mpegaudiodec.c	70;"	d	file:
FRAGMENT_PIXELS	vp3.c	43;"	d	file:
FRAME_CODED	vp3.c	1772;"	d	file:
FRAME_SKIPED	mpegvideo.h	32;"	d
FULLPEL_MODE	svq3.c	46;"	d	file:
FULL_Y_RANGE	libpostproc/postprocess_internal.h	47;"	d
F_INIT	libpostproc/postprocess_altivec_template.c	717;"	d	file:
F_tbl16	g726.c	/^static int F_tbl16[] =$/;"	v	file:
F_tbl24	g726.c	/^static int F_tbl24[] =$/;"	v	file:
F_tbl32	g726.c	/^static int F_tbl32[] = $/;"	v	file:
F_tbl40	g726.c	/^static int F_tbl40[] = $/;"	v	file:
FaacAudioContext	faac.c	/^typedef struct FaacAudioContext {$/;"	s	file:
FaacAudioContext	faac.c	/^} FaacAudioContext;$/;"	t	file:
Faac_encode_close	faac.c	/^int Faac_encode_close(AVCodecContext *avctx)$/;"	f
Faac_encode_frame	faac.c	/^int Faac_encode_frame(AVCodecContext *avctx,$/;"	f
Faac_encode_init	faac.c	/^static int Faac_encode_init(AVCodecContext *avctx)$/;"	f	file:
FlicDecodeContext	flicvideo.c	/^typedef struct FlicDecodeContext {$/;"	s	file:
FlicDecodeContext	flicvideo.c	/^} FlicDecodeContext;$/;"	t	file:
Float11	g726.c	/^typedef struct Float11 {$/;"	s	file:
Float11	g726.c	/^} Float11;$/;"	t	file:
FourXContext	4xm.c	/^typedef struct FourXContext{$/;"	s	file:
FourXContext	4xm.c	/^} FourXContext;$/;"	t	file:
G	huffyuv.c	38;"	d	file:
G	huffyuv.c	42;"	d	file:
G726Context	g726.c	/^typedef struct G726Context {$/;"	s	file:
G726Context	g726.c	/^} G726Context;$/;"	t	file:
G726Tables	g726.c	/^typedef struct G726Tables {$/;"	s	file:
G726Tables	g726.c	/^} G726Tables;$/;"	t	file:
G726Tables_pool	g726.c	/^static G726Tables G726Tables_pool[] = $/;"	v	file:
GET_BLOCK_COUNT	smc.c	61;"	d	file:
GET_CACHE	bitstream.h	404;"	d
GET_CACHE	bitstream.h	466;"	d
GET_CACHE	bitstream.h	531;"	d
GET_DATA	bitstream.c	95;"	d	file:
GET_MODE_BUFFER_SIZE	libpostproc/postprocess.c	108;"	d	file:
GET_MQUANT	vc9.c	1632;"	d	file:
GET_MVDATA	vc9.c	1659;"	d	file:
GET_NEXT_INDEX	truemotion1.c	508;"	d	file:
GET_RL_VLC	bitstream.h	728;"	d
GET_VLC	bitstream.h	697;"	d
GLOBAL	jfdctfst.c	301;"	d	file:
GLOBAL	jfdctfst.c	44;"	d	file:
GLOBAL	jfdctint.c	39;"	d	file:
GLOBAL	jrevdct.c	42;"	d	file:
GMC1_PERF_COND	ppc/gmc_altivec.c	31;"	d	file:
GMC_SPRITE	mpeg4data.h	25;"	d
GNUC_PREREQ	alpha/asm.h	26;"	d
GNUC_PREREQ	alpha/asm.h	29;"	d
GOP_STARTCODE	mpeg4data.h	39;"	d
GOP_START_CODE	mpeg12.c	40;"	d	file:
GRAY_SHAPE	mpeg4data.h	10;"	d
GetBitContext	bitstream.h	/^typedef struct GetBitContext {$/;"	s
GetBitContext	bitstream.h	/^} GetBitContext;$/;"	t
GranuleDef	mpegaudiodec.c	/^typedef struct GranuleDef {$/;"	s	file:
GranuleDef	mpegaudiodec.c	/^} GranuleDef;$/;"	t	file:
H261Context	h261.c	/^typedef struct H261Context{$/;"	s	file:
H261Context	h261.c	/^}H261Context;$/;"	t	file:
H261_CBP_VLC_BITS	h261.c	36;"	d	file:
H261_MBA_VLC_BITS	h261.c	33;"	d	file:
H261_MTYPE_VLC_BITS	h261.c	34;"	d	file:
H261_MV_VLC_BITS	h261.c	35;"	d	file:
H263_LOOP_FILTER	i386/dsputil_mmx.c	524;"	d	file:
H263_MBTYPE_B_VLC_BITS	h263.c	53;"	d	file:
H264Context	h264.c	/^typedef struct H264Context{$/;"	s	file:
H264Context	h264.c	/^}H264Context;$/;"	t	file:
H264_CHROMA_MC	dsputil.c	1385;"	d	file:
H264_CHROMA_MC	sh4/qpel.c	458;"	d	file:
H264_LOWPASS	dsputil.c	2020;"	d	file:
H264_LOWPASS	sh4/qpel.c	1141;"	d	file:
H264_MC	dsputil.c	2222;"	d	file:
H264_MC	i386/dsputil_mmx.c	2658;"	d	file:
H264_MC	ppc/dsputil_h264_altivec.c	68;"	d	file:
H264_MC	sh4/qpel.c	1385;"	d	file:
H264_WEIGHT	dsputil.c	2382;"	d	file:
H264_WEIGHT	dsputil.c	2449;"	d	file:
HADAMARD48	i386/dsputil_mmx.c	1402;"	d	file:
HALFBLOCK	ra144.c	30;"	d	file:
HALFPEL_MODE	svq3.c	47;"	d	file:
HAS_ADVANCED_PROFILE	vc9.c	48;"	d	file:
HAS_CBP	mpegvideo.h	169;"	d
HAVE_3DNOW	libpostproc/postprocess.c	617;"	d	file:
HAVE_3DNOW	libpostproc/postprocess.c	623;"	d	file:
HAVE_3DNOW	libpostproc/postprocess.c	643;"	d	file:
HAVE_3DNOW	libpostproc/postprocess.c	653;"	d	file:
HAVE_3DNOW	libpostproc/postprocess.c	663;"	d	file:
HAVE_ALTIVEC	libpostproc/postprocess.c	618;"	d	file:
HAVE_ALTIVEC	libpostproc/postprocess.c	631;"	d	file:
HAVE_AV_CONFIG_H	apiexample.c	16;"	d	file:
HAVE_AV_CONFIG_H	dtsdec.c	23;"	d	file:
HAVE_MMX	libpostproc/postprocess.c	615;"	d	file:
HAVE_MMX	libpostproc/postprocess.c	621;"	d	file:
HAVE_MMX	libpostproc/postprocess.c	641;"	d	file:
HAVE_MMX	libpostproc/postprocess.c	651;"	d	file:
HAVE_MMX	libpostproc/postprocess.c	661;"	d	file:
HAVE_MMX2	i386/mpegvideo_mmx.c	675;"	d	file:
HAVE_MMX2	i386/mpegvideo_mmx.c	680;"	d	file:
HAVE_MMX2	libpostproc/postprocess.c	616;"	d	file:
HAVE_MMX2	libpostproc/postprocess.c	622;"	d	file:
HAVE_MMX2	libpostproc/postprocess.c	642;"	d	file:
HAVE_MMX2	libpostproc/postprocess.c	652;"	d	file:
HAVE_MMX2	libpostproc/postprocess.c	662;"	d	file:
HEADER_SIZE	a52dec.c	147;"	d	file:
HEADER_SIZE	ac3dec.c	79;"	d	file:
HEADER_SIZE	dtsdec.c	38;"	d	file:
HEADER_SIZE	mpegaudiodec.c	86;"	d	file:
HEIGHT	motion_test.c	33;"	d	file:
HIGH_BAND_MAX_SIZE	wmadec.c	46;"	d	file:
HOR_DOWN_PRED	h264data.h	34;"	d
HOR_PRED	h264data.h	29;"	d
HOR_PRED8x8	h264data.h	44;"	d
HOR_UP_PRED	h264data.h	36;"	d
HUFFMAN_TABLE_SIZE	idcinvideo.c	55;"	d	file:
HUF_TOKENS	idcinvideo.c	56;"	d	file:
HYuvContext	huffyuv.c	/^typedef struct HYuvContext{$/;"	s	file:
HYuvContext	huffyuv.c	/^}HYuvContext;$/;"	t	file:
H_A_DEBLOCK	libpostproc/postprocess_internal.h	44;"	d
H_DEBLOCK	libpostproc/postprocess_internal.h	25;"	d
H_X1_FILTER	libpostproc/postprocess_internal.h	43;"	d
HuffTable	mpegaudiodec.c	/^typedef struct HuffTable {$/;"	s	file:
HuffTable	mpegaudiodec.c	/^} HuffTable;$/;"	t	file:
I	i386/vp3dsp_mmx.c	534;"	d	file:
I	i386/vp3dsp_mmx.c	540;"	d	file:
I	i386/vp3dsp_mmx.c	542;"	d	file:
I	i386/vp3dsp_mmx.c	548;"	d	file:
I	i386/vp3dsp_mmx.c	550;"	d	file:
I	i386/vp3dsp_mmx.c	555;"	d	file:
I	i386/vp3dsp_mmx.c	557;"	d	file:
I	i386/vp3dsp_mmx.c	562;"	d	file:
I	i386/vp3dsp_sse2.c	820;"	d	file:
IComplex	ac3enc.c	/^typedef struct IComplex {$/;"	s	file:
IComplex	ac3enc.c	/^} IComplex;$/;"	t	file:
IDCT	i386/simple_idct_mmx.c	1018;"	d	file:
IDCT	i386/simple_idct_mmx.c	1019;"	d	file:
IDCT	i386/simple_idct_mmx.c	1084;"	d	file:
IDCT	i386/simple_idct_mmx.c	1085;"	d	file:
IDCT	i386/simple_idct_mmx.c	1153;"	d	file:
IDCT	i386/simple_idct_mmx.c	1154;"	d	file:
IDCT	i386/simple_idct_mmx.c	1229;"	d	file:
IDCT	i386/simple_idct_mmx.c	1230;"	d	file:
IDCT	i386/simple_idct_mmx.c	707;"	d	file:
IDCT	i386/simple_idct_mmx.c	708;"	d	file:
IDCT	i386/simple_idct_mmx.c	797;"	d	file:
IDCT	i386/simple_idct_mmx.c	798;"	d	file:
IDCT	i386/simple_idct_mmx.c	873;"	d	file:
IDCT	i386/simple_idct_mmx.c	874;"	d	file:
IDCT	i386/simple_idct_mmx.c	941;"	d	file:
IDCT	i386/simple_idct_mmx.c	942;"	d	file:
IDCT	ppc/idct_altivec.c	90;"	d	file:
IDCT_HALF	ppc/idct_altivec.c	54;"	d	file:
II_BITRATE	msmpeg4.c	54;"	d	file:
IMGTYPE_RGB24	lcl.c	57;"	d	file:
IMGTYPE_YUV111	lcl.c	55;"	d	file:
IMGTYPE_YUV211	lcl.c	59;"	d	file:
IMGTYPE_YUV411	lcl.c	58;"	d	file:
IMGTYPE_YUV420	lcl.c	60;"	d	file:
IMGTYPE_YUV422	lcl.c	56;"	d	file:
IMODE_COLSKIP	vc9.c	864;"	d	file:
IMODE_DIFF2	vc9.c	860;"	d	file:
IMODE_DIFF6	vc9.c	862;"	d	file:
IMODE_NORM2	vc9.c	859;"	d	file:
IMODE_NORM6	vc9.c	861;"	d	file:
IMODE_RAW	vc9.c	858;"	d	file:
IMODE_ROWSKIP	vc9.c	863;"	d	file:
IMbInfo	h264data.h	/^typedef struct IMbInfo{$/;"	s
IMbInfo	h264data.h	/^} IMbInfo;$/;"	t
INBUF_SIZE	apiexample.c	21;"	d	file:
INBUF_SIZE	dtsdec.c	36;"	d	file:
INDEPENDENT	flac.c	/^    INDEPENDENT,$/;"	e	enum:decorrelation_type	file:
INIT_VLC	vc9.c	52;"	d	file:
INIT_VLC	vc9.c	61;"	d	file:
INT16_MAX	common.h	112;"	d
INT16_MIN	common.h	108;"	d
INT64_MAX	common.h	120;"	d
INT64_MIN	common.h	116;"	d
INTEGER_H	integer.h	28;"	d
INTERNAL_BUFFER_SIZE	utils.c	180;"	d	file:
INTER_INTRA_VLC_BITS	msmpeg4.c	43;"	d	file:
INTER_MCBPC_VLC_BITS	h263.c	46;"	d	file:
INTRA_MCBPC_VLC_BITS	h263.c	45;"	d	file:
INT_AA	mpegaudiodec.c	1936;"	d	file:
INT_BIT	common.h	139;"	d
INT_BIT	common.h	141;"	d
INVALID_VLC	golomb.h	29;"	d
IOBUF_SIZE	png.c	54;"	d	file:
ISQRT2	mpegaudiodec.c	1787;"	d	file:
IS_16X16	mpegvideo.h	157;"	d
IS_16X8	mpegvideo.h	158;"	d
IS_3IV1	h263.c	114;"	d	file:
IS_3IV1	h263.c	116;"	d	file:
IS_8X16	mpegvideo.h	159;"	d
IS_8X8	mpegvideo.h	160;"	d
IS_ACPRED	mpegvideo.h	165;"	d
IS_DIR	mpegvideo.h	167;"	d
IS_DIRECT	mpegvideo.h	155;"	d
IS_FIL	h261.c	41;"	d	file:
IS_GMC	mpegvideo.h	156;"	d
IS_INTER	mpegvideo.h	151;"	d
IS_INTERLACED	mpegvideo.h	154;"	d
IS_INTRA	mpegvideo.h	150;"	d
IS_INTRA16x16	mpegvideo.h	148;"	d
IS_INTRA4x4	mpegvideo.h	147;"	d
IS_INTRA_PCM	mpegvideo.h	153;"	d
IS_PCM	mpegvideo.h	149;"	d
IS_QUANT	mpegvideo.h	166;"	d
IS_REF0	h264data.h	310;"	d
IS_SKIP	mpegvideo.h	152;"	d
IS_SUB_4X4	mpegvideo.h	164;"	d
IS_SUB_4X8	mpegvideo.h	163;"	d
IS_SUB_8X4	mpegvideo.h	162;"	d
IS_SUB_8X8	mpegvideo.h	161;"	d
IS_ZERO_MV	mpeg12data.h	265;"	d
ITER	libpostproc/postprocess_altivec_template.c	142;"	d	file:
ITER	libpostproc/postprocess_altivec_template.c	160;"	d	file:
ITER	libpostproc/postprocess_altivec_template.c	758;"	d	file:
ITER	libpostproc/postprocess_altivec_template.c	802;"	d	file:
I_TYPE	mpegvideo.h	64;"	d
IdcinContext	idcinvideo.c	/^typedef struct IdcinContext {$/;"	s	file:
IdcinContext	idcinvideo.c	/^} IdcinContext;$/;"	t	file:
IdctAdjustBeforeShift	i386/vp3dsp_mmx.c	27;"	d	file:
IdctAdjustBeforeShift	vp3dsp.c	30;"	d	file:
ImgReSampleContext	avcodec.h	/^typedef struct ImgReSampleContext ImgReSampleContext;$/;"	t
ImgReSampleContext	imgresample.c	/^struct ImgReSampleContext {$/;"	s	file:
Indeo3DecodeContext	indeo3.c	/^typedef struct Indeo3DecodeContext {$/;"	s	file:
Indeo3DecodeContext	indeo3.c	/^} Indeo3DecodeContext;$/;"	t	file:
InternalBuffer	utils.c	/^typedef struct InternalBuffer{$/;"	s	file:
InternalBuffer	utils.c	/^}InternalBuffer;$/;"	t	file:
IpvideoContext	interplayvideo.c	/^typedef struct IpvideoContext {$/;"	s	file:
IpvideoContext	interplayvideo.c	/^} IpvideoContext;$/;"	t	file:
J	i386/vp3dsp_mmx.c	535;"	d	file:
J	i386/vp3dsp_mmx.c	541;"	d	file:
J	i386/vp3dsp_mmx.c	543;"	d	file:
J	i386/vp3dsp_mmx.c	549;"	d	file:
J	i386/vp3dsp_mmx.c	551;"	d	file:
J	i386/vp3dsp_mmx.c	556;"	d	file:
J	i386/vp3dsp_mmx.c	558;"	d	file:
J	i386/vp3dsp_mmx.c	563;"	d	file:
JPEG_MARKER	mjpeg.c	/^} JPEG_MARKER;$/;"	t	file:
JPG	mjpeg.c	/^    JPG   = 0xc8,	\/* reserved for JPEG extension *\/$/;"	e	file:
JPG0	mjpeg.c	/^    JPG0  = 0xf0,$/;"	e	file:
JPG1	mjpeg.c	/^    JPG1  = 0xf1,$/;"	e	file:
JPG10	mjpeg.c	/^    JPG10 = 0xfa,$/;"	e	file:
JPG11	mjpeg.c	/^    JPG11 = 0xfb,$/;"	e	file:
JPG12	mjpeg.c	/^    JPG12 = 0xfc,$/;"	e	file:
JPG13	mjpeg.c	/^    JPG13 = 0xfd,$/;"	e	file:
JPG2	mjpeg.c	/^    JPG2  = 0xf2,$/;"	e	file:
JPG3	mjpeg.c	/^    JPG3  = 0xf3,$/;"	e	file:
JPG4	mjpeg.c	/^    JPG4  = 0xf4,$/;"	e	file:
JPG5	mjpeg.c	/^    JPG5  = 0xf5,$/;"	e	file:
JPG6	mjpeg.c	/^    JPG6  = 0xf6,$/;"	e	file:
JPG7	mjpeg.c	/^    JPG7  = 0xf7,$/;"	e	file:
JPG8	mjpeg.c	/^    JPG8  = 0xf8,$/;"	e	file:
JPG9	mjpeg.c	/^    JPG9  = 0xf9,$/;"	e	file:
JUMPALIGN	i386/dsputil_mmx.c	49;"	d	file:
KEYFRAMES_ONLY	vp3.c	64;"	d	file:
L2_DIFF_CORE	libpostproc/postprocess_template.c	2321;"	d	file:
LAST_SKIP_BITS	bitstream.h	395;"	d
LAST_SKIP_BITS	bitstream.h	457;"	d
LAST_SKIP_BITS	bitstream.h	522;"	d
LAST_SKIP_CACHE	bitstream.h	396;"	d
LAST_SKIP_CACHE	bitstream.h	458;"	d
LAST_SKIP_CACHE	bitstream.h	523;"	d
LATTICE_FACTOR	sonic.c	69;"	d	file:
LATTICE_SHIFT	sonic.c	67;"	d	file:
LBUTTERFLY2	i386/dsputil_mmx.c	1394;"	d	file:
LD	sh4/qpel.c	6;"	d	file:
LD16	dsputil.h	517;"	d
LD16	dsputil.h	525;"	d
LD32	dsputil.h	518;"	d
LD32	dsputil.h	526;"	d
LD64	dsputil.h	519;"	d
LD64	dsputil.h	527;"	d
LD_W0	ppc/fdct_altivec.c	64;"	d	file:
LD_W1	ppc/fdct_altivec.c	65;"	d	file:
LD_W2	ppc/fdct_altivec.c	66;"	d	file:
LD_W3	ppc/fdct_altivec.c	67;"	d	file:
LD_W4	ppc/fdct_altivec.c	68;"	d	file:
LD_W5	ppc/fdct_altivec.c	69;"	d	file:
LD_W6	ppc/fdct_altivec.c	70;"	d	file:
LD_W7	ppc/fdct_altivec.c	71;"	d	file:
LD_W8	ppc/fdct_altivec.c	72;"	d	file:
LD_W9	ppc/fdct_altivec.c	73;"	d	file:
LD_WA	ppc/fdct_altivec.c	74;"	d	file:
LD_WB	ppc/fdct_altivec.c	75;"	d	file:
LEFT	huffyuv.c	/^    LEFT= 0,$/;"	e	enum:Predictor	file:
LEFT_DC_PRED	h264data.h	38;"	d
LEFT_DC_PRED8x8	h264data.h	48;"	d
LEFT_SIDE	flac.c	/^    LEFT_SIDE,$/;"	e	enum:decorrelation_type	file:
LEFT_SIDE	sonic.c	41;"	d	file:
LEGACY_REGS	bswap.h	14;"	d
LEGACY_REGS	bswap.h	16;"	d
LEVEL	liba52/a52_internal.h	130;"	d
LEVEL	liba52/a52_internal.h	141;"	d
LEVEL_3DB	liba52/a52_internal.h	92;"	d
LEVEL_45DB	liba52/a52_internal.h	93;"	d
LEVEL_6DB	liba52/a52_internal.h	94;"	d
LEVEL_FIX	libpostproc/postprocess_internal.h	27;"	d
LEVEL_PLUS3DB	liba52/a52_internal.h	91;"	d
LEVEL_PLUS6DB	liba52/a52_internal.h	90;"	d
LE_16	avcodec.h	2337;"	d
LE_32	avcodec.h	2338;"	d
LIB	Makefile	/^LIB= $(LIBPREF)avcodec$(LIBSUF)$/;"	m
LIBAVCODEC_ALPHA_ASM_H	alpha/asm.h	21;"	d
LIBAVCODEC_BUILD	avcodec.h	20;"	d
LIBAVCODEC_IDENT	avcodec.h	27;"	d
LIBAVCODEC_VERSION	avcodec.h	23;"	d
LIBAVCODEC_VERSION_INT	avcodec.h	22;"	d
LIBMPEG2_BITSTREAM_READER_HACK	bitstream.h	15;"	d
LIFT	snow.c	589;"	d	file:
LINEAR_BLEND_DEINT_FILTER	libpostproc/postprocess_internal.h	51;"	d
LINEAR_IPOL_DEINT_FILTER	libpostproc/postprocess_internal.h	50;"	d
LINE_BUF_HEIGHT	imgresample.c	45;"	d	file:
LIST_NOT_USED	h264.c	195;"	d	file:
LOAD4	i386/dsputil_mmx.c	1445;"	d	file:
LOAD4	ppc/mpegvideo_altivec.c	90;"	d	file:
LOAD_COMMON	motion_est_template.c	27;"	d	file:
LOAD_COMMON2	motion_est_template.c	551;"	d	file:
LOAD_DOUBLE_LINE	libpostproc/postprocess_altivec_template.c	1004;"	d	file:
LOAD_DOUBLE_LINE	libpostproc/postprocess_altivec_template.c	1018;"	d	file:
LOAD_DOUBLE_LINE	libpostproc/postprocess_altivec_template.c	1112;"	d	file:
LOAD_DOUBLE_LINE	libpostproc/postprocess_altivec_template.c	1124;"	d	file:
LOAD_LEFT_EDGE	h264.c	1843;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	139;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	220;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	263;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	400;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	423;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	525;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	542;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	823;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	851;"	d	file:
LOAD_LINE	libpostproc/postprocess_altivec_template.c	97;"	d	file:
LOAD_LINE_ALIGNED	libpostproc/postprocess_altivec_template.c	110;"	d	file:
LOAD_LINE_ALIGNED	libpostproc/postprocess_altivec_template.c	140;"	d	file:
LOAD_LINE_ALIGNED	libpostproc/postprocess_altivec_template.c	230;"	d	file:
LOAD_LINE_ALIGNED	libpostproc/postprocess_altivec_template.c	264;"	d	file:
LOAD_TOP_EDGE	h264.c	1849;"	d	file:
LOAD_TOP_RIGHT_EDGE	h264.c	1837;"	d	file:
LOCOContext	loco.c	/^typedef struct LOCOContext{$/;"	s	file:
LOCOContext	loco.c	/^} LOCOContext;$/;"	t	file:
LOCO_CRGB	loco.c	/^enum LOCO_MODE {LOCO_UNKN=0, LOCO_CYUY2=-1, LOCO_CRGB=-2, LOCO_CYV12=-3,$/;"	e	enum:LOCO_MODE	file:
LOCO_CYUY2	loco.c	/^enum LOCO_MODE {LOCO_UNKN=0, LOCO_CYUY2=-1, LOCO_CRGB=-2, LOCO_CYV12=-3,$/;"	e	enum:LOCO_MODE	file:
LOCO_CYV12	loco.c	/^enum LOCO_MODE {LOCO_UNKN=0, LOCO_CYUY2=-1, LOCO_CRGB=-2, LOCO_CYV12=-3,$/;"	e	enum:LOCO_MODE	file:
LOCO_MODE	loco.c	/^enum LOCO_MODE {LOCO_UNKN=0, LOCO_CYUY2=-1, LOCO_CRGB=-2, LOCO_CYV12=-3,$/;"	g	file:
LOCO_RGB	loco.c	/^ LOCO_YUY2=1, LOCO_UYVY=2, LOCO_RGB=3, LOCO_RGBA=4, LOCO_YV12=5};$/;"	e	enum:LOCO_MODE	file:
LOCO_RGBA	loco.c	/^ LOCO_YUY2=1, LOCO_UYVY=2, LOCO_RGB=3, LOCO_RGBA=4, LOCO_YV12=5};$/;"	e	enum:LOCO_MODE	file:
LOCO_UNKN	loco.c	/^enum LOCO_MODE {LOCO_UNKN=0, LOCO_CYUY2=-1, LOCO_CRGB=-2, LOCO_CYV12=-3,$/;"	e	enum:LOCO_MODE	file:
LOCO_UYVY	loco.c	/^ LOCO_YUY2=1, LOCO_UYVY=2, LOCO_RGB=3, LOCO_RGBA=4, LOCO_YV12=5};$/;"	e	enum:LOCO_MODE	file:
LOCO_YUY2	loco.c	/^ LOCO_YUY2=1, LOCO_UYVY=2, LOCO_RGB=3, LOCO_RGBA=4, LOCO_YV12=5};$/;"	e	enum:LOCO_MODE	file:
LOCO_YV12	loco.c	/^ LOCO_YUY2=1, LOCO_UYVY=2, LOCO_RGB=3, LOCO_RGBA=4, LOCO_YV12=5};$/;"	e	enum:LOCO_MODE	file:
LOG2_MB_SIZE	snow.c	371;"	d	file:
LOG2_OBMC_MAX	snow.c	165;"	d	file:
LOSSLESS_QLOG	snow.c	35;"	d	file:
LOWPASS5_DEINT_FILTER	libpostproc/postprocess_internal.h	56;"	d
LP	sh4/dsputil_align.c	26;"	d	file:
LP2_CHECK	indeo3.c	294;"	d	file:
LPCQSIZE	shorten.c	46;"	d	file:
LPCQUANT	shorten.c	56;"	d	file:
LSP_POW_BITS	wmadec.c	57;"	d	file:
LUMA_DC_BLOCK_INDEX	h264.c	42;"	d	file:
LUM_DERING	libpostproc/postprocess_internal.h	33;"	d
LUM_H_DEBLOCK	libpostproc/postprocess_internal.h	30;"	d
LUM_LEVEL_FIX	libpostproc/postprocess_internal.h	35;"	d
LUM_V_DEBLOCK	libpostproc/postprocess_internal.h	29;"	d
LV1_CHECK	indeo3.c	269;"	d	file:
LX0	snow.c	672;"	d	file:
LX0	snow.c	702;"	d	file:
LX1	snow.c	673;"	d	file:
LX1	snow.c	703;"	d	file:
LclContext	lcl.c	/^typedef struct LclContext {$/;"	s	file:
LclContext	lcl.c	/^} LclContext;$/;"	t	file:
M	i386/vp3dsp_mmx.c	294;"	d	file:
M	i386/vp3dsp_mmx.c	529;"	d	file:
MAC16	simple_idct.c	59;"	d	file:
MAC16	simple_idct.c	69;"	d	file:
MACEContext	mace.c	/^typedef struct MACEContext {$/;"	s	file:
MACEContext	mace.c	/^} MACEContext;$/;"	t	file:
MACEtab1	mace.c	/^static const uint16_t MACEtab1[] = { 0xfff3, 0x0008, 0x004c, 0x00de, 0x00de, 0x004c, 0x0008, 0xfff3 };$/;"	v	file:
MACEtab2	mace.c	/^static const uint16_t MACEtab2[][8] = {$/;"	v	file:
MACEtab3	mace.c	/^static const uint16_t MACEtab3[] = { 0xffee, 0x008c, 0x008c, 0xffee };$/;"	v	file:
MACEtab4	mace.c	/^static const uint16_t MACEtab4[][8] = {$/;"	v	file:
MACS	mpegaudiodec.c	773;"	d	file:
MACS	mpegaudiodec.c	783;"	d	file:
MAIN_VO_TYPE	mpeg4data.h	14;"	d
MAKE_OP	alpha/dsputil_alpha.c	229;"	d	file:
MANGLE	common.h	223;"	d
MANGLE	common.h	225;"	d
MANGLE	common.h	229;"	d
MANGLE	common.h	231;"	d
MANGLE	libpostproc/mangle.h	15;"	d
MANGLE	libpostproc/mangle.h	17;"	d
MANGLE	libpostproc/mangle.h	21;"	d
MANGLE	libpostproc/mangle.h	23;"	d
MASK_7f	sparc/dsputil_vis.c	111;"	d	file:
MASK_ABS	common.h	426;"	d
MASK_ABS	common.h	434;"	d
MASK_MSHW	armv4l/simple_idct_arm.S	/^#define MASK_MSHW 0xFFFF0000$/;"	d
MASK_fe	sparc/dsputil_vis.c	99;"	d	file:
MAX	dct-test.c	20;"	d	file:
MAX	libpostproc/postprocess.c	104;"	d	file:
MAX_BLOCKSIZE	flac.c	44;"	d	file:
MAX_BLOCKSIZE	shorten.c	34;"	d	file:
MAX_CHANNELS	flac.c	43;"	d	file:
MAX_CHANNELS	shorten.c	33;"	d	file:
MAX_CHANNELS	sonic.c	38;"	d	file:
MAX_CHANNELS	wmadec.c	53;"	d	file:
MAX_CODEBOOK_SIZE	vqavideo.c	83;"	d	file:
MAX_CODEBOOK_VECTORS	vqavideo.c	80;"	d	file:
MAX_CODED_SUPERFRAME_SIZE	wmadec.c	51;"	d	file:
MAX_COMPONENTS	mjpeg.c	810;"	d	file:
MAX_DECOMPOSITIONS	snow.c	31;"	d	file:
MAX_FCODE	mpegvideo.h	49;"	d
MAX_LEVEL	mpegvideo.h	62;"	d
MAX_MB_BYTES	mpegvideo.h	71;"	d
MAX_MMCO_COUNT	h264.c	55;"	d	file:
MAX_MV	mpegvideo.h	50;"	d
MAX_NEG_CROP	dsputil.h	64;"	d
MAX_PICTURE_COUNT	mpegvideo.h	54;"	d
MAX_PLANES	ffv1.c	34;"	d	file:
MAX_PLANES	snow.c	32;"	d	file:
MAX_PPS_COUNT	h264.c	53;"	d	file:
MAX_RUN	mpegvideo.h	61;"	d
MAX_SAB_SIZE	motion_est_template.c	688;"	d	file:
MAX_SPS_COUNT	h264.c	52;"	d	file:
MAX_STRIPS	cinepak.c	44;"	d	file:
MAX_THREADS	mpegvideo.h	52;"	d
MAX_VECTORS	vqavideo.c	82;"	d	file:
MBAC_BITRATE	msmpeg4.c	55;"	d	file:
MBA_STARTCODE	h261.c	40;"	d	file:
MBA_STUFFING	h261.c	39;"	d	file:
MBINCR_VLC_BITS	mpeg12.c	49;"	d	file:
MB_BTYPE_VLC_BITS	mpeg12.c	52;"	d	file:
MB_INTRA_VLC_BITS	msmpeg4.c	52;"	d	file:
MB_INTRA_VLC_BITS	vc9.c	42;"	d	file:
MB_NON_INTRA_VLC_BITS	msmpeg4.c	51;"	d	file:
MB_PAT_VLC_BITS	mpeg12.c	50;"	d	file:
MB_PTYPE_VLC_BITS	mpeg12.c	51;"	d	file:
MB_SIZE	snow.c	372;"	d	file:
MB_TYPE_16x16	avcodec.h	361;"	d
MB_TYPE_16x8	avcodec.h	362;"	d
MB_TYPE_8x16	avcodec.h	363;"	d
MB_TYPE_8x8	avcodec.h	364;"	d
MB_TYPE_ACPRED	avcodec.h	367;"	d
MB_TYPE_B_VLC_BITS	h263.c	51;"	d	file:
MB_TYPE_CBP	avcodec.h	378;"	d
MB_TYPE_DIRECT2	avcodec.h	366;"	d
MB_TYPE_GMC	avcodec.h	368;"	d
MB_TYPE_H261_FIL	h261data.h	5;"	d
MB_TYPE_INTERLACED	avcodec.h	365;"	d
MB_TYPE_INTRA	mpegvideo.h	146;"	d
MB_TYPE_INTRA16x16	avcodec.h	359;"	d
MB_TYPE_INTRA4x4	avcodec.h	358;"	d
MB_TYPE_INTRA_PCM	avcodec.h	360;"	d
MB_TYPE_L0	avcodec.h	374;"	d
MB_TYPE_L0L1	avcodec.h	376;"	d
MB_TYPE_L1	avcodec.h	375;"	d
MB_TYPE_P0L0	avcodec.h	370;"	d
MB_TYPE_P0L1	avcodec.h	372;"	d
MB_TYPE_P1L0	avcodec.h	371;"	d
MB_TYPE_P1L1	avcodec.h	373;"	d
MB_TYPE_QUANT	avcodec.h	377;"	d
MB_TYPE_REF0	h264data.h	309;"	d
MB_TYPE_SKIP	avcodec.h	369;"	d
MB_TYPE_ZERO_MV	mpeg12data.h	264;"	d
MC_avg_no_round_o_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_o_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_o_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_o_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_x_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_x_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_x_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_x_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_xy_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_xy_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_xy_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_xy_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_y_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_y_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_no_round_y_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_no_round_y_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_o_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_o_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_o_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_o_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_x_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_x_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_x_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_x_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_xy_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_xy_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_xy_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_xy_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_y_16_vis	sparc/dsputil_vis.c	/^static void MC_avg_y_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_avg_y_8_vis	sparc/dsputil_vis.c	/^static void MC_avg_y_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_o_16_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_o_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_o_8_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_o_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_x_16_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_x_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_x_8_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_x_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_xy_16_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_xy_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_xy_8_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_xy_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_y_16_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_y_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_no_round_y_8_vis	sparc/dsputil_vis.c	/^static void MC_put_no_round_y_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_o_16_vis	sparc/dsputil_vis.c	/^static void MC_put_o_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_o_8_vis	sparc/dsputil_vis.c	/^static void MC_put_o_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_x_16_vis	sparc/dsputil_vis.c	/^static void MC_put_x_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_x_8_vis	sparc/dsputil_vis.c	/^static void MC_put_x_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_xy_16_vis	sparc/dsputil_vis.c	/^static void MC_put_xy_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_xy_8_vis	sparc/dsputil_vis.c	/^static void MC_put_xy_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_y_16_vis	sparc/dsputil_vis.c	/^static void MC_put_y_16_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MC_put_y_8_vis	sparc/dsputil_vis.c	/^static void MC_put_y_8_vis (uint8_t * dest, const uint8_t * _ref,$/;"	f	file:
MDCTContext	dsputil.h	/^typedef struct MDCTContext {$/;"	s
MDCTContext	dsputil.h	/^} MDCTContext;$/;"	t
MDCT_NBITS	ac3enc.c	62;"	d	file:
MDECContext	mdec.c	/^typedef struct MDECContext{$/;"	s	file:
MDECContext	mdec.c	/^} MDECContext;$/;"	t	file:
MEDIAN	huffyuv.c	/^    MEDIAN,$/;"	e	enum:Predictor	file:
MEDIAN	libpostproc/postprocess_template.c	2034;"	d	file:
MEDIAN_DEINT_FILTER	libpostproc/postprocess_internal.h	54;"	d
MERGE	mpegvideo.c	5171;"	d	file:
MERGE1	sh4/dsputil_align.c	38;"	d	file:
MERGE2	sh4/dsputil_align.c	39;"	d	file:
MERGE_S16	ppc/fdct_altivec.c	227;"	d	file:
MERGE_S16	ppc/fdct_altivec.c	268;"	d	file:
METADATA_TYPE_STREAMINFO	flac.c	72;"	d	file:
ME_EPZS	avcodec.h	/^    ME_EPZS,$/;"	e	enum:Motion_Est_ID
ME_FULL	avcodec.h	/^    ME_FULL,$/;"	e	enum:Motion_Est_ID
ME_LOG	avcodec.h	/^    ME_LOG,$/;"	e	enum:Motion_Est_ID
ME_MAP_MV_BITS	mpegvideo.h	58;"	d
ME_MAP_SHIFT	mpegvideo.h	57;"	d
ME_MAP_SIZE	mpegvideo.h	56;"	d
ME_PHODS	avcodec.h	/^    ME_PHODS,$/;"	e	enum:Motion_Est_ID
ME_X1	avcodec.h	/^    ME_X1$/;"	e	enum:Motion_Est_ID
ME_ZERO	avcodec.h	/^    ME_ZERO = 1,$/;"	e	enum:Motion_Est_ID
MID	mpegvideo.c	2973;"	d	file:
MID_SIDE	flac.c	/^    MID_SIDE,$/;"	e	enum:decorrelation_type	file:
MID_SIDE	sonic.c	40;"	d	file:
MID_STATE	snow.c	24;"	d	file:
MIN	libpostproc/postprocess.c	103;"	d	file:
MIN_CACHE_BITS	bitstream.h	370;"	d
MIN_CACHE_BITS	bitstream.h	413;"	d
MIN_CACHE_BITS	bitstream.h	475;"	d
MIN_DEQUANT_VAL	vp3.c	212;"	d	file:
MJpegContext	mjpeg.c	/^typedef struct MJpegContext {$/;"	s	file:
MJpegContext	mjpeg.c	/^} MJpegContext;$/;"	t	file:
MJpegDecodeContext	mjpeg.c	/^typedef struct MJpegDecodeContext {$/;"	s	file:
MJpegDecodeContext	mjpeg.c	/^} MJpegDecodeContext;$/;"	t	file:
MKBETAG	common.h	422;"	d
MKTAG	common.h	421;"	d
MMABS	i386/dsputil_mmx.c	1410;"	d	file:
MMABS_MMX2	i386/dsputil_mmx.c	1423;"	d	file:
MMABS_SUM	i386/dsputil_mmx.c	1416;"	d	file:
MMABS_SUM_MMX2	i386/dsputil_mmx.c	1428;"	d	file:
MMCO	h264.c	/^typedef struct MMCO{$/;"	s	file:
MMCO	h264.c	/^} MMCO;$/;"	t	file:
MMCOOpcode	h264.c	/^typedef enum MMCOOpcode{$/;"	g	file:
MMCOOpcode	h264.c	/^} MMCOOpcode;$/;"	t	file:
MMCO_END	h264.c	/^    MMCO_END=0,$/;"	e	enum:MMCOOpcode	file:
MMCO_LONG	h264.c	/^    MMCO_LONG,$/;"	e	enum:MMCOOpcode	file:
MMCO_LONG2UNUSED	h264.c	/^    MMCO_LONG2UNUSED,$/;"	e	enum:MMCOOpcode	file:
MMCO_RESET	h264.c	/^    MMCO_RESET, $/;"	e	enum:MMCOOpcode	file:
MMCO_SET_MAX_LONG	h264.c	/^    MMCO_SET_MAX_LONG,$/;"	e	enum:MMCOOpcode	file:
MMCO_SHORT2LONG	h264.c	/^    MMCO_SHORT2LONG,$/;"	e	enum:MMCOOpcode	file:
MMCO_SHORT2UNUSED	h264.c	/^    MMCO_SHORT2UNUSED,$/;"	e	enum:MMCOOpcode	file:
MMS_IO	amr.c	60;"	d	file:
MM_3DNOW	dsputil.h	412;"	d
MM_3DNOWEXT	dsputil.h	416;"	d
MM_ACCEL_DJBFFT	liba52/mm_accel.h	28;"	d
MM_ACCEL_H	liba52/mm_accel.h	25;"	d
MM_ACCEL_PPC_ALTIVEC	liba52/mm_accel.h	38;"	d
MM_ACCEL_X86_3DNOW	liba52/mm_accel.h	32;"	d
MM_ACCEL_X86_3DNOWEXT	liba52/mm_accel.h	35;"	d
MM_ACCEL_X86_MMX	liba52/mm_accel.h	31;"	d
MM_ACCEL_X86_MMXEXT	liba52/mm_accel.h	33;"	d
MM_ACCEL_X86_SSE	liba52/mm_accel.h	34;"	d
MM_ALTIVEC	dsputil.h	475;"	d
MM_MMX	dsputil.h	411;"	d
MM_MMXEXT	dsputil.h	413;"	d
MM_SSE	dsputil.h	414;"	d
MM_SSE2	dsputil.h	415;"	d
MODE_COPY	vp3.c	166;"	d	file:
MODE_EXT_I_STEREO	mpegaudiodec.c	153;"	d	file:
MODE_EXT_MS_STEREO	mpegaudiodec.c	152;"	d	file:
MODE_GOLDEN_MV	vp3.c	161;"	d	file:
MODE_INTER_FOURMV	vp3.c	162;"	d	file:
MODE_INTER_LAST_MV	vp3.c	158;"	d	file:
MODE_INTER_NO_MV	vp3.c	155;"	d	file:
MODE_INTER_PLUS_MV	vp3.c	157;"	d	file:
MODE_INTER_PRIOR_LAST	vp3.c	159;"	d	file:
MODE_INTRA	vp3.c	156;"	d	file:
MODE_USING_GOLDEN	vp3.c	160;"	d	file:
MOTION_MARKER	mpeg4data.h	27;"	d
MOVQ_BFE	i386/dsputil_mmx.c	57;"	d	file:
MOVQ_BONE	i386/dsputil_mmx.c	63;"	d	file:
MOVQ_BONE	i386/dsputil_mmx.c	68;"	d	file:
MOVQ_WONE	i386/dsputil_mmx.c	52;"	d	file:
MOVQ_WTWO	i386/dsputil_mmx.c	64;"	d	file:
MOVQ_WTWO	i386/dsputil_mmx.c	74;"	d	file:
MOVQ_ZERO	i386/dsputil_mmx.c	50;"	d	file:
MP3On4DecodeContext	mpegaudiodec.c	/^typedef struct MP3On4DecodeContext {$/;"	s	file:
MP3On4DecodeContext	mpegaudiodec.c	/^} MP3On4DecodeContext;$/;"	t	file:
MP3lame_encode_close	mp3lameaudio.c	/^int MP3lame_encode_close(AVCodecContext *avctx)$/;"	f
MP3lame_encode_frame	mp3lameaudio.c	/^int MP3lame_encode_frame(AVCodecContext *avctx,$/;"	f
MP3lame_encode_init	mp3lameaudio.c	/^static int MP3lame_encode_init(AVCodecContext *avctx)$/;"	f	file:
MPADecodeContext	mpegaudiodec.c	/^typedef struct MPADecodeContext {$/;"	s	file:
MPADecodeContext	mpegaudiodec.c	/^} MPADecodeContext;$/;"	t	file:
MPA_DUAL	mpegaudio.h	18;"	d
MPA_FRAME_SIZE	mpegaudio.h	7;"	d
MPA_HEADER_SIZE	parser.c	507;"	d	file:
MPA_INT	mpegaudiodec.c	/^typedef int16_t MPA_INT;$/;"	t	file:
MPA_INT	mpegaudiodec.c	/^typedef int32_t MPA_INT;$/;"	t	file:
MPA_JSTEREO	mpegaudio.h	17;"	d
MPA_MAX_CHANNELS	mpegaudio.h	12;"	d
MPA_MAX_CODED_FRAME_SIZE	mpegaudio.h	10;"	d
MPA_MONO	mpegaudio.h	19;"	d
MPA_STEREO	mpegaudio.h	16;"	d
MPA_encode_close	mpegaudio.c	/^static int MPA_encode_close(AVCodecContext *avctx)$/;"	f	file:
MPA_encode_frame	mpegaudio.c	/^static int MPA_encode_frame(AVCodecContext *avctx,$/;"	f	file:
MPA_encode_init	mpegaudio.c	/^static int MPA_encode_init(AVCodecContext *avctx)$/;"	f	file:
MPEG1_FRAME_RATE_BASE	parser.c	261;"	d	file:
MPEG_BUF_SIZE	mpegvideo.h	44;"	d
MPV_common_defaults	mpegvideo.c	/^static void MPV_common_defaults(MpegEncContext *s){$/;"	f	file:
MPV_common_end	mpegvideo.c	/^void MPV_common_end(MpegEncContext *s)$/;"	f
MPV_common_init	mpegvideo.c	/^int MPV_common_init(MpegEncContext *s)$/;"	f
MPV_common_init_armv4l	armv4l/mpegvideo_arm.c	/^void MPV_common_init_armv4l(MpegEncContext *s)$/;"	f
MPV_common_init_axp	alpha/mpegvideo_alpha.c	/^void MPV_common_init_axp(MpegEncContext *s)$/;"	f
MPV_common_init_mlib	mlib/dsputil_mlib.c	/^void MPV_common_init_mlib(MpegEncContext *s)$/;"	f
MPV_common_init_mmi	ps2/mpegvideo_mmi.c	/^void MPV_common_init_mmi(MpegEncContext *s)$/;"	f
MPV_common_init_mmx	i386/mpegvideo_mmx.c	/^void MPV_common_init_mmx(MpegEncContext *s)$/;"	f
MPV_common_init_ppc	ppc/mpegvideo_ppc.c	/^void MPV_common_init_ppc(MpegEncContext *s)$/;"	f
MPV_decode_defaults	mpegvideo.c	/^void MPV_decode_defaults(MpegEncContext *s){$/;"	f
MPV_decode_mb	mpegvideo.c	/^void MPV_decode_mb(MpegEncContext *s, DCTELEM block[12][64]){$/;"	f
MPV_decode_mb_internal	mpegvideo.c	/^static always_inline void MPV_decode_mb_internal(MpegEncContext *s, DCTELEM block[12][64], int lowres_flag)$/;"	f	file:
MPV_encode_defaults	mpegvideo.c	/^static void MPV_encode_defaults(MpegEncContext *s){$/;"	f	file:
MPV_encode_end	mpegvideo.c	/^int MPV_encode_end(AVCodecContext *avctx)$/;"	f
MPV_encode_init	mpegvideo.c	/^int MPV_encode_init(AVCodecContext *avctx)$/;"	f
MPV_encode_picture	mpegvideo.c	/^int MPV_encode_picture(AVCodecContext *avctx,$/;"	f
MPV_frame_end	mpegvideo.c	/^void MPV_frame_end(MpegEncContext *s)$/;"	f
MPV_frame_start	mpegvideo.c	/^int MPV_frame_start(MpegEncContext *s, AVCodecContext *avctx)$/;"	f
MPV_motion	mpegvideo.c	/^static inline void MPV_motion(MpegEncContext *s, $/;"	f	file:
MPV_motion_lowres	mpegvideo.c	/^static inline void MPV_motion_lowres(MpegEncContext *s, $/;"	f	file:
MT_16X8	mpeg12.c	1046;"	d	file:
MT_DMV	mpeg12.c	1047;"	d	file:
MT_FIELD	mpeg12.c	1044;"	d	file:
MT_FRAME	mpeg12.c	1045;"	d	file:
MUL	liba52/a52_internal.h	131;"	d
MUL	liba52/a52_internal.h	144;"	d
MUL	liba52/a52_internal.h	147;"	d
MUL	liba52/a52_internal.h	154;"	d
MUL	mpegaudio.c	33;"	d	file:
MUL16	ac3enc.c	328;"	d	file:
MUL16	fft-test.c	15;"	d	file:
MUL16	fft.c	136;"	d	file:
MUL16	ppc/fft_altivec.c	44;"	d	file:
MUL16	simple_idct.c	63;"	d	file:
MUL16	simple_idct.c	72;"	d	file:
MUL64	mpegaudiodec.c	66;"	d	file:
MULH	mpegaudiodec.c	/^static always_inline int MULH(int a, int b){$/;"	f	file:
MULL	mpegaudiodec.c	65;"	d	file:
MULS	mpegaudiodec.c	777;"	d	file:
MULS	mpegaudiodec.c	786;"	d	file:
MULS	mpegaudiodec.c	804;"	d	file:
MULTIPLY	4xm.c	136;"	d	file:
MULTIPLY	jfdctfst.c	113;"	d	file:
MULTIPLY	jfdctint.c	145;"	d	file:
MULTIPLY	jfdctint.c	147;"	d	file:
MULTIPLY	jrevdct.c	134;"	d	file:
MULTIPLY	jrevdct.c	137;"	d	file:
MULTIPLY	jrevdct.c	142;"	d	file:
MULTIPLY16C16	jfdctint.c	41;"	d	file:
MUL_C	liba52/a52_internal.h	133;"	d
MUL_C	liba52/a52_internal.h	158;"	d
MUL_L	liba52/a52_internal.h	132;"	d
MUL_L	liba52/a52_internal.h	145;"	d
MUL_L	liba52/a52_internal.h	150;"	d
MUL_L	liba52/a52_internal.h	155;"	d
MVTable	msmpeg4data.h	/^typedef struct MVTable {$/;"	s
MVTable	msmpeg4data.h	/^} MVTable;$/;"	t
MV_CHANGED	error_resilience.c	316;"	d	file:
MV_DIRECT	mpegvideo.h	408;"	d
MV_DIR_BACKWARD	mpegvideo.h	406;"	d
MV_DIR_FORWARD	mpegvideo.h	407;"	d
MV_END	mpegvideo.h	528;"	d
MV_ERROR	mpegvideo.h	525;"	d
MV_FROZEN	error_resilience.c	315;"	d	file:
MV_PMODE_1MV	vc9.c	112;"	d	file:
MV_PMODE_1MV_HPEL	vc9.c	113;"	d	file:
MV_PMODE_1MV_HPEL_BILIN	vc9.c	111;"	d	file:
MV_PMODE_INTENSITY_COMP	vc9.c	115;"	d	file:
MV_PMODE_MIXED_MV	vc9.c	114;"	d	file:
MV_TYPE_16X16	mpegvideo.h	410;"	d
MV_TYPE_16X8	mpegvideo.h	412;"	d
MV_TYPE_8X8	mpegvideo.h	411;"	d
MV_TYPE_DMV	mpegvideo.h	414;"	d
MV_TYPE_FIELD	mpegvideo.h	413;"	d
MV_UNCHANGED	error_resilience.c	317;"	d	file:
MV_VLC_BITS	h263.c	48;"	d	file:
MV_VLC_BITS	mpeg12.c	48;"	d	file:
MV_VLC_BITS	msmpeg4.c	48;"	d	file:
M_E	ratecontrol.c	34;"	d	file:
M_PI	common.h	14;"	d
M_PI	eval.c	42;"	d	file:
Minima	motion_est.c	/^typedef struct Minima{$/;"	s	file:
Minima	motion_est.c	/^}Minima;$/;"	t	file:
ModPred	indeo3.c	/^    unsigned char *ModPred;$/;"	m	struct:Indeo3DecodeContext	file:
ModeAlphabet	vp3.c	/^static int ModeAlphabet[7][CODING_MODE_COUNT] =$/;"	v	file:
MotionEstContext	mpegvideo.h	/^typedef struct MotionEstContext{$/;"	s
MotionEstContext	mpegvideo.h	/^}MotionEstContext;$/;"	t
Motion_Est_ID	avcodec.h	/^enum Motion_Est_ID {$/;"	g
Mp3AudioContext	mp3lameaudio.c	/^typedef struct Mp3AudioContext {$/;"	s	file:
Mp3AudioContext	mp3lameaudio.c	/^} Mp3AudioContext;$/;"	t	file:
Mpeg1Context	mpeg12.c	/^typedef struct Mpeg1Context {$/;"	s	file:
Mpeg1Context	mpeg12.c	/^} Mpeg1Context;$/;"	t	file:
MpegAudioContext	mpegaudio.c	/^typedef struct MpegAudioContext {$/;"	s	file:
MpegAudioContext	mpegaudio.c	/^} MpegAudioContext;$/;"	t	file:
MpegAudioParseContext	parser.c	/^typedef struct MpegAudioParseContext {$/;"	s	file:
MpegAudioParseContext	parser.c	/^} MpegAudioParseContext;$/;"	t	file:
MpegEncContext	mpegvideo.h	/^typedef struct MpegEncContext {$/;"	s
MpegEncContext	mpegvideo.h	/^} MpegEncContext;$/;"	t
MsrleContext	msrle.c	/^typedef struct MsrleContext {$/;"	s	file:
MsrleContext	msrle.c	/^} MsrleContext;$/;"	t	file:
Msvideo1Context	msvideo1.c	/^typedef struct Msvideo1Context {$/;"	s	file:
Msvideo1Context	msvideo1.c	/^} Msvideo1Context;$/;"	t	file:
N	ac3enc.c	63;"	d	file:
N1	snow.c	676;"	d	file:
N1	snow.c	689;"	d	file:
N1	snow.c	705;"	d	file:
N1	snow.c	718;"	d	file:
N1	snow.c	732;"	d	file:
N1	snow.c	746;"	d	file:
N1	snow.c	759;"	d	file:
N1	snow.c	772;"	d	file:
N2	snow.c	679;"	d	file:
N2	snow.c	692;"	d	file:
N2	snow.c	708;"	d	file:
N2	snow.c	721;"	d	file:
N2	snow.c	735;"	d	file:
N2	snow.c	749;"	d	file:
N2	snow.c	762;"	d	file:
N2	snow.c	775;"	d	file:
N3	snow.c	682;"	d	file:
N3	snow.c	695;"	d	file:
N3	snow.c	711;"	d	file:
N3	snow.c	724;"	d	file:
N3	snow.c	738;"	d	file:
N3	snow.c	752;"	d	file:
N3	snow.c	765;"	d	file:
N3	snow.c	778;"	d	file:
N4	snow.c	685;"	d	file:
N4	snow.c	698;"	d	file:
N4	snow.c	714;"	d	file:
N4	snow.c	727;"	d	file:
N4	snow.c	741;"	d	file:
N4	snow.c	755;"	d	file:
N4	snow.c	768;"	d	file:
N4	snow.c	781;"	d	file:
NAL_DPA	h264.c	144;"	d	file:
NAL_DPB	h264.c	145;"	d	file:
NAL_DPC	h264.c	146;"	d	file:
NAL_FILTER_DATA	h264.c	152;"	d	file:
NAL_IDR_SLICE	h264.c	147;"	d	file:
NAL_PICTURE_DELIMITER	h264.c	151;"	d	file:
NAL_PPS	h264.c	150;"	d	file:
NAL_SEI	h264.c	148;"	d	file:
NAL_SLICE	h264.c	143;"	d	file:
NAL_SPS	h264.c	149;"	d	file:
NAN	eval.c	38;"	d	file:
NBIT_VO_TYPE	mpeg4data.h	15;"	d
NBLOCKS	ra144.c	28;"	d	file:
NB_BLOCKS	ac3.h	28;"	d
NB_COMPONENTS	imgresample.c	32;"	d	file:
NB_DV_VLC	dvdata.h	52;"	d
NB_ITS	dct-test.c	56;"	d	file:
NB_ITS	motion_test.c	64;"	d	file:
NB_ITS_SPEED	dct-test.c	57;"	d	file:
NB_LSP_COEFS	wmadec.c	48;"	d	file:
NB_PASSES	png.c	52;"	d	file:
NB_PHASES	imgresample.c	35;"	d	file:
NB_RL_TABLES	msmpeg4data.h	585;"	d
NB_TAPS	imgresample.c	36;"	d	file:
NDEBUG	cabac.h	27;"	d
NDEBUG	common.h	238;"	d
NDEBUG	flac.c	40;"	d	file:
NDEBUG	h264.c	36;"	d	file:
NDEBUG	integer.c	185;"	d	file:
NDEBUG	motion_est.c	36;"	d	file:
NDEBUG	oggvorbis.c	11;"	d	file:
NDEBUG	ratecontrol.c	30;"	d	file:
NDEBUG	snow.c	28;"	d	file:
NDEBUG	svq1.c	48;"	d	file:
NDEBUG	vc9.c	36;"	d	file:
NDEBUG	xvmcvideo.c	27;"	d	file:
NEG_SSR32	bitstream.h	/^static inline  int32_t NEG_SSR32( int32_t a, int8_t s){$/;"	f
NEG_SSR32	bitstream.h	34;"	d
NEG_USR32	bitstream.h	/^static inline uint32_t NEG_USR32(uint32_t a, int8_t s){$/;"	f
NEG_USR32	bitstream.h	35;"	d
NEWPOSTPROCESS_H	libpostproc/postprocess.h	20;"	d
NEXT	libpostproc/postprocess_template.c	2809;"	d	file:
NOISE_TAB_SIZE	wmadec.c	55;"	d	file:
NO_DCBZL	ppc/dsputil_ppc.h	26;"	d
NO_DCBZL	ppc/dsputil_ppc.h	30;"	d
NSEGS	pcm.c	31;"	d	file:
NSKIPSIZE	shorten.c	54;"	d	file:
NWRAP	shorten.c	53;"	d	file:
O	i386/vp3dsp_sse2.c	821;"	d	file:
OA	sh4/idct_sh4.c	210;"	d	file:
OBJS	Makefile	/^OBJS := $(OBJS) $(ASM_OBJS)$/;"	m
OBJS	Makefile	/^OBJS= bitstream.o utils.o mem.o allcodecs.o \\$/;"	m
OBMC_FILTER	mpegvideo.c	2923;"	d	file:
OBMC_FILTER4	mpegvideo.c	2925;"	d	file:
OBMC_MAX	snow.c	166;"	d	file:
OGGVORBIS_FRAME_SIZE	oggvorbis.c	14;"	d	file:
ONE	jrevdct.c	101;"	d	file:
ONEITERBUTTERFLY	ppc/dsputil_altivec.c	1338;"	d	file:
ONEITERBUTTERFLY	ppc/dsputil_altivec.c	1374;"	d	file:
ONEITERBUTTERFLY	ppc/dsputil_altivec.c	1483;"	d	file:
ONEITERBUTTERFLY	ppc/dsputil_altivec.c	1527;"	d	file:
ONE_HALF	imgconvert.c	996;"	d	file:
OP	alpha/dsputil_alpha.c	166;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	889;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	899;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	901;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	911;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	919;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	935;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	940;"	d	file:
OP	libpostproc/postprocess_altivec_template.c	956;"	d	file:
OP	sh4/dsputil_align.c	271;"	d	file:
OP	sh4/dsputil_align.c	288;"	d	file:
OP	sh4/dsputil_align.c	289;"	d	file:
OP	sh4/dsputil_align.c	306;"	d	file:
OP	sh4/dsputil_align.c	65;"	d	file:
OP	sh4/dsputil_align.c	77;"	d	file:
OP	sh4/dsputil_align.c	78;"	d	file:
OP	sh4/dsputil_align.c	90;"	d	file:
OPEN_READER	bitstream.h	372;"	d
OPEN_READER	bitstream.h	415;"	d
OPEN_READER	bitstream.h	477;"	d
OPTIONS_ARRAY_SIZE	libpostproc/postprocess.c	109;"	d	file:
OP_C	sh4/dsputil_align.c	92;"	d	file:
OP_C0	sh4/dsputil_align.c	114;"	d	file:
OP_C4	sh4/dsputil_align.c	49;"	d	file:
OP_C40	sh4/dsputil_align.c	57;"	d	file:
OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	28;"	d	file:
OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	38;"	d	file:
OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	48;"	d	file:
OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	58;"	d	file:
OP_X	sh4/dsputil_align.c	128;"	d	file:
OP_X0	sh4/dsputil_align.c	215;"	d	file:
OP_X2	alpha/dsputil_alpha.c	173;"	d	file:
OP_XY	sh4/dsputil_align.c	217;"	d	file:
OP_XY0	sh4/dsputil_align.c	216;"	d	file:
OP_XY2	alpha/dsputil_alpha.c	198;"	d	file:
OP_Y	sh4/dsputil_align.c	177;"	d	file:
OP_Y0	sh4/dsputil_align.c	150;"	d	file:
OP_Y2	alpha/dsputil_alpha.c	184;"	d	file:
OUTPUT_PIXEL_PAIR	truemotion1.c	587;"	d	file:
OUT_BUFFER_SIZE	shorten.c	36;"	d	file:
OUT_INT	mpegaudiodec.c	/^typedef int16_t OUT_INT;$/;"	t	file:
OUT_INT	mpegaudiodec.c	/^typedef int32_t OUT_INT;$/;"	t	file:
OUT_MAX	mpegaudiodec.c	53;"	d	file:
OUT_MAX	mpegaudiodec.c	58;"	d	file:
OUT_MIN	mpegaudiodec.c	54;"	d	file:
OUT_MIN	mpegaudiodec.c	59;"	d	file:
OUT_SHIFT	mpegaudiodec.c	55;"	d	file:
OUT_SHIFT	mpegaudiodec.c	60;"	d	file:
OggVorbisContext	oggvorbis.c	/^typedef struct OggVorbisContext {$/;"	s	file:
OggVorbisContext	oggvorbis.c	/^} OggVorbisContext ;$/;"	t	file:
OutputFormat	mpegvideo.h	/^enum OutputFormat {$/;"	g
P	mpegaudio.c	153;"	d	file:
PACK_AND_STORE	libpostproc/postprocess_altivec_template.c	331;"	d	file:
PACK_AND_STORE	libpostproc/postprocess_altivec_template.c	378;"	d	file:
PACK_AND_STORE	libpostproc/postprocess_altivec_template.c	964;"	d	file:
PACK_AND_STORE	libpostproc/postprocess_altivec_template.c	998;"	d	file:
PACK_AND_STORE_ALIGNED	libpostproc/postprocess_altivec_template.c	349;"	d	file:
PACK_AND_STORE_ALIGNED	libpostproc/postprocess_altivec_template.c	379;"	d	file:
PALETTE_CONTROL_SIZE	xan.c	41;"	d	file:
PALETTE_COUNT	idcinvideo.c	57;"	d	file:
PALETTE_COUNT	interplayvideo.c	45;"	d	file:
PALETTE_COUNT	msvideo1.c	41;"	d	file:
PALETTE_COUNT	vmdav.c	51;"	d	file:
PALETTE_COUNT	vqavideo.c	74;"	d	file:
PALETTE_COUNT	xan.c	40;"	d	file:
PART_NOT_AVAILABLE	h264.c	196;"	d	file:
PASS1_BITS	jfdctint.c	95;"	d	file:
PASS1_BITS	jfdctint.c	98;"	d	file:
PASS1_BITS	jrevdct.c	96;"	d	file:
PASS1_BITS	jrevdct.c	98;"	d	file:
PAVGB	i386/dsputil_mmx.c	135;"	d	file:
PAVGB	i386/dsputil_mmx.c	142;"	d	file:
PAVGB	i386/dsputil_mmx.c	149;"	d	file:
PAVGB	i386/dsputil_mmx.c	156;"	d	file:
PAVGB	i386/dsputil_mmx.c	163;"	d	file:
PAVGB	i386/dsputil_mmx.c	168;"	d	file:
PAVGB	i386/dsputil_mmx.c	176;"	d	file:
PAVGB	i386/dsputil_mmx.c	181;"	d	file:
PAVGB	libpostproc/postprocess_template.c	46;"	d	file:
PAVGB	libpostproc/postprocess_template.c	55;"	d	file:
PAVGBP	i386/dsputil_mmx.c	134;"	d	file:
PAVGBP	i386/dsputil_mmx.c	141;"	d	file:
PAVGBP	i386/dsputil_mmx.c	148;"	d	file:
PAVGBP	i386/dsputil_mmx.c	155;"	d	file:
PAVGBP_MMX	i386/dsputil_mmx.c	116;"	d	file:
PAVGBP_MMX_NO_RND	i386/dsputil_mmx.c	102;"	d	file:
PAVGB_MMX	i386/dsputil_mmx.c	93;"	d	file:
PAVGB_MMX_NO_RND	i386/dsputil_mmx.c	85;"	d	file:
PCMDecode	pcm.c	/^typedef struct PCMDecode {$/;"	s	file:
PCMDecode	pcm.c	/^} PCMDecode;$/;"	t	file:
PCM_CODEC	allcodecs.c	222;"	d	file:
PCM_CODEC	allcodecs.c	227;"	d	file:
PCM_CODEC	allcodecs.c	256;"	d	file:
PCM_CODEC	avcodec.h	2011;"	d
PCM_CODEC	avcodec.h	2041;"	d
PCM_CODEC	pcm.c	363;"	d	file:
PCM_CODEC	pcm.c	394;"	d	file:
PHASE_BITS	imgresample.c	34;"	d	file:
PI	fdctref.c	37;"	d	file:
PI	fdctref.c	39;"	d	file:
PICTURE_START_CODE	mpeg12.c	41;"	d	file:
PICTURE_START_CODE	parser.c	157;"	d	file:
PICT_BOTTOM_FIELD	mpegvideo.h	660;"	d
PICT_FRAME	mpegvideo.h	661;"	d
PICT_TOP_FIELD	mpegvideo.h	659;"	d
PIXOP	alpha/dsputil_alpha.c	249;"	d	file:
PIXOP2	dsputil.c	561;"	d	file:
PIXOP2	dsputil.c	703;"	d	file:
PIXOP2	sh4/qpel.c	8;"	d	file:
PIX_FMT_BGR24	avcodec.h	/^    PIX_FMT_BGR24,     \/\/\/< Packed pixel, 3 bytes per pixel, BGRBGR...$/;"	e	enum:PixelFormat
PIX_FMT_GRAY8	avcodec.h	/^    PIX_FMT_GRAY8,$/;"	e	enum:PixelFormat
PIX_FMT_MONOBLACK	avcodec.h	/^    PIX_FMT_MONOBLACK, \/\/\/< 0 is black $/;"	e	enum:PixelFormat
PIX_FMT_MONOWHITE	avcodec.h	/^    PIX_FMT_MONOWHITE, \/\/\/< 0 is white $/;"	e	enum:PixelFormat
PIX_FMT_NB	avcodec.h	/^    PIX_FMT_NB,$/;"	e	enum:PixelFormat
PIX_FMT_PAL8	avcodec.h	/^    PIX_FMT_PAL8,      \/\/\/< 8 bit with RGBA palette $/;"	e	enum:PixelFormat
PIX_FMT_RGB24	avcodec.h	/^    PIX_FMT_RGB24,     \/\/\/< Packed pixel, 3 bytes per pixel, RGBRGB...$/;"	e	enum:PixelFormat
PIX_FMT_RGB555	avcodec.h	/^    PIX_FMT_RGB555,    \/\/\/< always stored in cpu endianness, most significant bit to 1 $/;"	e	enum:PixelFormat
PIX_FMT_RGB565	avcodec.h	/^    PIX_FMT_RGB565,    \/\/\/< always stored in cpu endianness $/;"	e	enum:PixelFormat
PIX_FMT_RGBA32	avcodec.h	/^    PIX_FMT_RGBA32,    \/\/\/< Packed pixel, 4 bytes per pixel, BGRABGRA..., stored in cpu endianness$/;"	e	enum:PixelFormat
PIX_FMT_UYVY411	avcodec.h	/^    PIX_FMT_UYVY411,   \/\/\/< Packed pixel, Cb Y0 Y1 Cr Y2 Y3$/;"	e	enum:PixelFormat
PIX_FMT_UYVY422	avcodec.h	/^    PIX_FMT_UYVY422,   \/\/\/< Packed pixel, Cb Y0 Cr Y1 $/;"	e	enum:PixelFormat
PIX_FMT_XVMC_MPEG2_IDCT	avcodec.h	/^    PIX_FMT_XVMC_MPEG2_IDCT,$/;"	e	enum:PixelFormat
PIX_FMT_XVMC_MPEG2_MC	avcodec.h	/^    PIX_FMT_XVMC_MPEG2_MC,\/\/\/< XVideo Motion Acceleration via common packet passing(xvmc_render.h)$/;"	e	enum:PixelFormat
PIX_FMT_YUV410P	avcodec.h	/^    PIX_FMT_YUV410P,   \/\/\/< Planar YUV 4:1:0 (1 Cr & Cb sample per 4x4 Y samples)$/;"	e	enum:PixelFormat
PIX_FMT_YUV411P	avcodec.h	/^    PIX_FMT_YUV411P,   \/\/\/< Planar YUV 4:1:1 (1 Cr & Cb sample per 4x1 Y samples)$/;"	e	enum:PixelFormat
PIX_FMT_YUV420P	avcodec.h	/^    PIX_FMT_YUV420P,   \/\/\/< Planar YUV 4:2:0 (1 Cr & Cb sample per 2x2 Y samples)$/;"	e	enum:PixelFormat
PIX_FMT_YUV422	avcodec.h	/^    PIX_FMT_YUV422,    \/\/\/< Packed pixel, Y0 Cb Y1 Cr $/;"	e	enum:PixelFormat
PIX_FMT_YUV422P	avcodec.h	/^    PIX_FMT_YUV422P,   \/\/\/< Planar YUV 4:2:2 (1 Cr & Cb sample per 2x1 Y samples)$/;"	e	enum:PixelFormat
PIX_FMT_YUV444P	avcodec.h	/^    PIX_FMT_YUV444P,   \/\/\/< Planar YUV 4:4:4 (1 Cr & Cb sample per 1x1 Y samples)$/;"	e	enum:PixelFormat
PIX_FMT_YUVJ420P	avcodec.h	/^    PIX_FMT_YUVJ420P,  \/\/\/< Planar YUV 4:2:0 full scale (jpeg)$/;"	e	enum:PixelFormat
PIX_FMT_YUVJ422P	avcodec.h	/^    PIX_FMT_YUVJ422P,  \/\/\/< Planar YUV 4:2:2 full scale (jpeg)$/;"	e	enum:PixelFormat
PIX_FMT_YUVJ444P	avcodec.h	/^    PIX_FMT_YUVJ444P,  \/\/\/< Planar YUV 4:4:4 full scale (jpeg)$/;"	e	enum:PixelFormat
PIX_SAD	i386/motion_est_mmx.c	/^PIX_SAD(mmx)$/;"	f
PIX_SAD	i386/motion_est_mmx.c	269;"	d	file:
PL	vp3.c	1784;"	d	file:
PLANE	huffyuv.c	/^    PLANE,$/;"	e	enum:Predictor	file:
PLANE_PRED8x8	h264data.h	46;"	d
PMAXUB	libpostproc/postprocess_template.c	48;"	d	file:
PMAXUB	libpostproc/postprocess_template.c	67;"	d	file:
PMAXUB	libpostproc/postprocess_template.c	69;"	d	file:
PMAXW	i386/mpegvideo_mmx_template.c	21;"	d	file:
PMAXW	i386/mpegvideo_mmx_template.c	24;"	d	file:
PMAXW	i386/mpegvideo_mmx_template.c	30;"	d	file:
PMINUB	libpostproc/postprocess_template.c	47;"	d	file:
PMINUB	libpostproc/postprocess_template.c	58;"	d	file:
PMINUB	libpostproc/postprocess_template.c	60;"	d	file:
PMbInfo	h264data.h	/^typedef struct PMbInfo{$/;"	s
PMbInfo	h264data.h	/^} PMbInfo;$/;"	t
PNGContext	png.c	/^typedef struct PNGContext {$/;"	s	file:
PNGContext	png.c	/^} PNGContext;$/;"	t	file:
PNG_ALLIMAGE	png.c	49;"	d	file:
PNG_COLOR_MASK_ALPHA	png.c	33;"	d	file:
PNG_COLOR_MASK_COLOR	png.c	32;"	d	file:
PNG_COLOR_MASK_PALETTE	png.c	31;"	d	file:
PNG_COLOR_TYPE_GRAY	png.c	35;"	d	file:
PNG_COLOR_TYPE_GRAY_ALPHA	png.c	39;"	d	file:
PNG_COLOR_TYPE_PALETTE	png.c	36;"	d	file:
PNG_COLOR_TYPE_RGB	png.c	37;"	d	file:
PNG_COLOR_TYPE_RGB_ALPHA	png.c	38;"	d	file:
PNG_FILTER_VALUE_AVG	png.c	44;"	d	file:
PNG_FILTER_VALUE_NONE	png.c	41;"	d	file:
PNG_FILTER_VALUE_PAETH	png.c	45;"	d	file:
PNG_FILTER_VALUE_SUB	png.c	42;"	d	file:
PNG_FILTER_VALUE_UP	png.c	43;"	d	file:
PNG_IDAT	png.c	48;"	d	file:
PNG_IHDR	png.c	47;"	d	file:
PNG_PLTE	png.c	50;"	d	file:
PNMContext	pnm.c	/^typedef struct PNMContext {$/;"	s	file:
PNMContext	pnm.c	/^} PNMContext;$/;"	t	file:
POS_FRAC	imgresample.c	41;"	d	file:
POS_FRAC_BITS	imgresample.c	40;"	d	file:
POWERPC_GET_PMC1	ppc/dsputil_ppc.h	100;"	d
POWERPC_GET_PMC1	ppc/dsputil_ppc.h	82;"	d
POWERPC_GET_PMC2	ppc/dsputil_ppc.h	101;"	d
POWERPC_GET_PMC2	ppc/dsputil_ppc.h	83;"	d
POWERPC_GET_PMC3	ppc/dsputil_ppc.h	103;"	d
POWERPC_GET_PMC3	ppc/dsputil_ppc.h	106;"	d
POWERPC_GET_PMC3	ppc/dsputil_ppc.h	85;"	d
POWERPC_GET_PMC3	ppc/dsputil_ppc.h	88;"	d
POWERPC_GET_PMC4	ppc/dsputil_ppc.h	104;"	d
POWERPC_GET_PMC4	ppc/dsputil_ppc.h	107;"	d
POWERPC_GET_PMC4	ppc/dsputil_ppc.h	86;"	d
POWERPC_GET_PMC4	ppc/dsputil_ppc.h	89;"	d
POWERPC_GET_PMC5	ppc/dsputil_ppc.h	110;"	d
POWERPC_GET_PMC5	ppc/dsputil_ppc.h	113;"	d
POWERPC_GET_PMC5	ppc/dsputil_ppc.h	92;"	d
POWERPC_GET_PMC5	ppc/dsputil_ppc.h	95;"	d
POWERPC_GET_PMC6	ppc/dsputil_ppc.h	111;"	d
POWERPC_GET_PMC6	ppc/dsputil_ppc.h	114;"	d
POWERPC_GET_PMC6	ppc/dsputil_ppc.h	93;"	d
POWERPC_GET_PMC6	ppc/dsputil_ppc.h	96;"	d
POWERPC_NUM_PMC_ENABLED	ppc/dsputil_ppc.h	39;"	d
POWERPC_PERF_DECLARE	ppc/dsputil_ppc.h	117;"	d
POWERPC_PERF_DECLARE	ppc/dsputil_ppc.h	159;"	d
POWERPC_PERF_START_COUNT	ppc/dsputil_ppc.h	122;"	d
POWERPC_PERF_START_COUNT	ppc/dsputil_ppc.h	160;"	d
POWERPC_PERF_STOP_COUNT	ppc/dsputil_ppc.h	130;"	d
POWERPC_PERF_STOP_COUNT	ppc/dsputil_ppc.h	161;"	d
POWERP_PMC_DATATYPE	ppc/dsputil_ppc.h	81;"	d
POWERP_PMC_DATATYPE	ppc/dsputil_ppc.h	99;"	d
POW_FIX	mpegaudiodec.c	255;"	d	file:
POW_FRAC_BITS	mpegaudiodec.c	253;"	d	file:
POW_FRAC_ONE	mpegaudiodec.c	254;"	d	file:
POW_MULL	mpegaudiodec.c	256;"	d	file:
PPContext	libpostproc/postprocess_internal.h	/^typedef struct PPContext{$/;"	s
PPContext	libpostproc/postprocess_internal.h	/^} PPContext;$/;"	t
PPFilter	libpostproc/postprocess_internal.h	/^struct PPFilter{$/;"	s
PPLIB	libpostproc/Makefile	/^PPLIB = $(LIBPREF)postproc$(LIBSUF)$/;"	m
PPMode	libpostproc/postprocess_internal.h	/^typedef struct PPMode{$/;"	s
PPMode	libpostproc/postprocess_internal.h	/^} PPMode;$/;"	t
PPOBJS	libpostproc/Makefile	/^PPOBJS=postprocess.o$/;"	m
PPS	h264.c	/^typedef struct PPS{$/;"	s	file:
PPS	h264.c	/^}PPS;$/;"	t	file:
PP_CPU_CAPS_3DNOW	libpostproc/postprocess.h	61;"	d
PP_CPU_CAPS_ALTIVEC	libpostproc/postprocess.h	62;"	d
PP_CPU_CAPS_MMX	libpostproc/postprocess.h	59;"	d
PP_CPU_CAPS_MMX2	libpostproc/postprocess.h	60;"	d
PP_FORMAT	libpostproc/postprocess.h	64;"	d
PP_FORMAT_411	libpostproc/postprocess.h	67;"	d
PP_FORMAT_420	libpostproc/postprocess.h	65;"	d
PP_FORMAT_422	libpostproc/postprocess.h	66;"	d
PP_FORMAT_444	libpostproc/postprocess.h	68;"	d
PP_PICT_TYPE_QP2	libpostproc/postprocess.h	70;"	d
PP_QUALITY_MAX	libpostproc/postprocess.h	32;"	d
PREDICT	mjpeg.c	288;"	d	file:
PREDICT_MODE	svq3.c	49;"	d	file:
PREFIX_h264_chroma_mc8_altivec	ppc/dsputil_h264_altivec.c	29;"	d	file:
PREFIX_h264_chroma_mc8_altivec	ppc/dsputil_h264_altivec.c	39;"	d	file:
PREFIX_h264_chroma_mc8_altivec	ppc/dsputil_h264_altivec.c	49;"	d	file:
PREFIX_h264_chroma_mc8_altivec	ppc/dsputil_h264_altivec.c	59;"	d	file:
PREFIX_h264_chroma_mc8_altivec	ppc/dsputil_h264_template_altivec.c	/^void PREFIX_h264_chroma_mc8_altivec(uint8_t * dst, uint8_t * src, int stride, int h, int x, int y) {$/;"	f
PREFIX_h264_chroma_mc8_num	ppc/dsputil_h264_altivec.c	30;"	d	file:
PREFIX_h264_chroma_mc8_num	ppc/dsputil_h264_altivec.c	40;"	d	file:
PREFIX_h264_chroma_mc8_num	ppc/dsputil_h264_altivec.c	50;"	d	file:
PREFIX_h264_chroma_mc8_num	ppc/dsputil_h264_altivec.c	60;"	d	file:
PREFIX_h264_qpel16_h_lowpass_altivec	ppc/dsputil_h264_altivec.c	31;"	d	file:
PREFIX_h264_qpel16_h_lowpass_altivec	ppc/dsputil_h264_altivec.c	41;"	d	file:
PREFIX_h264_qpel16_h_lowpass_altivec	ppc/dsputil_h264_altivec.c	51;"	d	file:
PREFIX_h264_qpel16_h_lowpass_altivec	ppc/dsputil_h264_altivec.c	61;"	d	file:
PREFIX_h264_qpel16_h_lowpass_altivec	ppc/dsputil_h264_template_altivec.c	/^static void PREFIX_h264_qpel16_h_lowpass_altivec(uint8_t * dst, uint8_t * src, int dstStride, int srcStride) {$/;"	f	file:
PREFIX_h264_qpel16_h_lowpass_num	ppc/dsputil_h264_altivec.c	32;"	d	file:
PREFIX_h264_qpel16_h_lowpass_num	ppc/dsputil_h264_altivec.c	42;"	d	file:
PREFIX_h264_qpel16_h_lowpass_num	ppc/dsputil_h264_altivec.c	52;"	d	file:
PREFIX_h264_qpel16_h_lowpass_num	ppc/dsputil_h264_altivec.c	62;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_altivec	ppc/dsputil_h264_altivec.c	35;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_altivec	ppc/dsputil_h264_altivec.c	45;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_altivec	ppc/dsputil_h264_altivec.c	55;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_altivec	ppc/dsputil_h264_altivec.c	65;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_altivec	ppc/dsputil_h264_template_altivec.c	/^static void PREFIX_h264_qpel16_hv_lowpass_altivec(uint8_t * dst, int16_t * tmp, uint8_t * src, int dstStride, int tmpStride, int srcStride) {$/;"	f	file:
PREFIX_h264_qpel16_hv_lowpass_num	ppc/dsputil_h264_altivec.c	36;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_num	ppc/dsputil_h264_altivec.c	46;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_num	ppc/dsputil_h264_altivec.c	56;"	d	file:
PREFIX_h264_qpel16_hv_lowpass_num	ppc/dsputil_h264_altivec.c	66;"	d	file:
PREFIX_h264_qpel16_v_lowpass_altivec	ppc/dsputil_h264_altivec.c	33;"	d	file:
PREFIX_h264_qpel16_v_lowpass_altivec	ppc/dsputil_h264_altivec.c	43;"	d	file:
PREFIX_h264_qpel16_v_lowpass_altivec	ppc/dsputil_h264_altivec.c	53;"	d	file:
PREFIX_h264_qpel16_v_lowpass_altivec	ppc/dsputil_h264_altivec.c	63;"	d	file:
PREFIX_h264_qpel16_v_lowpass_altivec	ppc/dsputil_h264_template_altivec.c	/^static void PREFIX_h264_qpel16_v_lowpass_altivec(uint8_t * dst, uint8_t * src, int dstStride, int srcStride) {$/;"	f	file:
PREFIX_h264_qpel16_v_lowpass_num	ppc/dsputil_h264_altivec.c	34;"	d	file:
PREFIX_h264_qpel16_v_lowpass_num	ppc/dsputil_h264_altivec.c	44;"	d	file:
PREFIX_h264_qpel16_v_lowpass_num	ppc/dsputil_h264_altivec.c	54;"	d	file:
PREFIX_h264_qpel16_v_lowpass_num	ppc/dsputil_h264_altivec.c	64;"	d	file:
PREV	adx.c	/^} PREV;$/;"	t	file:
PREV	libpostproc/postprocess_template.c	2818;"	d	file:
PREV_PICT_TYPES_BUFFER_SIZE	mpegvideo.h	352;"	d
PROFILE_ADVANCED	vc9.c	72;"	d	file:
PROFILE_COMPLEX	vc9.c	71;"	d	file:
PROFILE_MAIN	vc9.c	70;"	d	file:
PROFILE_SIMPLE	vc9.c	69;"	d	file:
PU	vp3.c	1782;"	d	file:
PUL	vp3.c	1781;"	d	file:
PUR	vp3.c	1783;"	d	file:
PUT	ps2/idct_mmi.c	241;"	d	file:
PUT_OP	i386/dsputil_mmx.c	2782;"	d	file:
PUT_OP_U8_ALTIVEC	ppc/dsputil_h264_altivec.c	25;"	d	file:
P_LEFT	motion_est.c	41;"	d	file:
P_LEFT	snow.c	1698;"	d	file:
P_MEDIAN	motion_est.c	44;"	d	file:
P_MEDIAN	snow.c	1701;"	d	file:
P_MV1	motion_est.c	45;"	d	file:
P_MV1	snow.c	1702;"	d	file:
P_TOP	motion_est.c	42;"	d	file:
P_TOP	snow.c	1699;"	d	file:
P_TOPRIGHT	motion_est.c	43;"	d	file:
P_TOPRIGHT	snow.c	1700;"	d	file:
P_TYPE	mpegvideo.h	65;"	d
ParseContext	mpegvideo.h	/^typedef struct ParseContext{$/;"	s
ParseContext	mpegvideo.h	/^} ParseContext;$/;"	t
ParseContext1	parser.c	/^typedef struct ParseContext1{$/;"	s	file:
ParseContext1	parser.c	/^} ParseContext1;$/;"	t	file:
Parser	eval.c	/^typedef struct Parser{$/;"	s	file:
Parser	eval.c	/^} Parser;$/;"	t	file:
Picture	mpegvideo.h	/^typedef struct Picture{$/;"	s
Picture	mpegvideo.h	/^} Picture;$/;"	t
PixFmtInfo	imgconvert.c	/^typedef struct PixFmtInfo {$/;"	s	file:
PixFmtInfo	imgconvert.c	/^} PixFmtInfo;$/;"	t	file:
PixelFormat	avcodec.h	/^enum PixelFormat {$/;"	g
PixelFormatTag	raw.c	/^} PixelFormatTag;$/;"	t	file:
PixleFormatTag	raw.c	/^typedef struct PixleFormatTag {$/;"	s	file:
Plane	snow.c	/^typedef struct Plane{$/;"	s	file:
Plane	snow.c	/^}Plane;$/;"	t	file:
PlaneContext	ffv1.c	/^typedef struct PlaneContext{$/;"	s	file:
PlaneContext	ffv1.c	/^} PlaneContext;$/;"	t	file:
Predictor	huffyuv.c	/^typedef enum Predictor{$/;"	g	file:
Predictor	huffyuv.c	/^} Predictor;$/;"	t	file:
Predictor	mpegvideo.h	/^typedef struct Predictor{$/;"	s
Predictor	mpegvideo.h	/^} Predictor;$/;"	t
PutBitContext	bitstream.h	/^typedef struct PutBitContext {$/;"	s
PutBitContext	bitstream.h	/^} PutBitContext;$/;"	t
Q	liba52/tables.h	49;"	d
Q0	liba52/tables.h	113;"	d
Q0	liba52/tables.h	123;"	d
Q0	liba52/tables.h	165;"	d
Q0	liba52/tables.h	51;"	d
Q0	liba52/tables.h	76;"	d
Q0	liba52/tables.h	80;"	d
Q1	liba52/tables.h	114;"	d
Q1	liba52/tables.h	124;"	d
Q1	liba52/tables.h	166;"	d
Q1	liba52/tables.h	52;"	d
Q1	liba52/tables.h	77;"	d
Q1	liba52/tables.h	81;"	d
Q2	liba52/tables.h	115;"	d
Q2	liba52/tables.h	125;"	d
Q2	liba52/tables.h	167;"	d
Q2	liba52/tables.h	53;"	d
Q2	liba52/tables.h	78;"	d
Q2	liba52/tables.h	82;"	d
Q3	liba52/tables.h	116;"	d
Q3	liba52/tables.h	126;"	d
Q3	liba52/tables.h	168;"	d
Q3	liba52/tables.h	83;"	d
Q4	liba52/tables.h	117;"	d
Q4	liba52/tables.h	127;"	d
Q4	liba52/tables.h	169;"	d
Q4	liba52/tables.h	84;"	d
Q5	liba52/tables.h	128;"	d
Q5	liba52/tables.h	170;"	d
Q6	liba52/tables.h	129;"	d
Q6	liba52/tables.h	171;"	d
Q7	liba52/tables.h	130;"	d
Q7	liba52/tables.h	172;"	d
Q8	liba52/tables.h	131;"	d
Q8	liba52/tables.h	173;"	d
Q9	liba52/tables.h	132;"	d
Q9	liba52/tables.h	174;"	d
QA	liba52/tables.h	133;"	d
QA	liba52/tables.h	175;"	d
QBIAS_SHIFT	snow.c	423;"	d	file:
QEXPSHIFT	snow.c	445;"	d	file:
QMAT_SHIFT	mpegvideo.h	47;"	d
QMAT_SHIFT_MMX	mpegvideo.h	46;"	d
QP	libpostproc/postprocess_internal.h	/^	int QP;$/;"	m	struct:PPContext
QPEL	sh4/dsputil_align.c	322;"	d	file:
QPEL_BASE	i386/dsputil_mmx.c	1660;"	d	file:
QPEL_H264	i386/dsputil_mmx.c	2320;"	d	file:
QPEL_H264HV	i386/dsputil_mmx.c	2306;"	d	file:
QPEL_H264V	i386/dsputil_mmx.c	2288;"	d	file:
QPEL_MC	dsputil.c	1522;"	d	file:
QPEL_MC	sh4/qpel.c	616;"	d	file:
QPEL_OP	i386/dsputil_mmx.c	1925;"	d	file:
QPEL_V_LOW	i386/dsputil_mmx.c	1639;"	d	file:
QP_STORE_T	libpostproc/postprocess.h	34;"	d
QROOT	snow.c	34;"	d	file:
QUALITY_THRESHOLD	svq1.c	924;"	d	file:
QUANT_BIAS_SHIFT	mpegvideo.h	465;"	d
QUANT_FRAME_EXPLICIT	vc9.c	78;"	d	file:
QUANT_FRAME_IMPLICIT	vc9.c	77;"	d	file:
QUANT_MASK	pcm.c	30;"	d	file:
QUANT_NON_UNIFORM	vc9.c	79;"	d	file:
QUANT_SHIFT	h264data.h	475;"	d
QUANT_UNIFORM	vc9.c	80;"	d	file:
QUEUE_MASK	vmdav.c	73;"	d	file:
QUEUE_SIZE	vmdav.c	72;"	d	file:
QdrawContext	qdrw.c	/^typedef struct QdrawContext{$/;"	s	file:
QdrawContext	qdrw.c	/^} QdrawContext;$/;"	t	file:
QpegContext	qpeg.c	/^typedef struct QpegContext{$/;"	s	file:
QpegContext	qpeg.c	/^} QpegContext;$/;"	t	file:
QtrleContext	qtrle.c	/^typedef struct QtrleContext {$/;"	s	file:
QtrleContext	qtrle.c	/^} QtrleContext;$/;"	t	file:
R	huffyuv.c	39;"	d	file:
R	huffyuv.c	43;"	d	file:
R1	simple_idct.c	533;"	d	file:
R2	simple_idct.c	534;"	d	file:
R3	simple_idct.c	535;"	d	file:
RA144TABLES_H	ra144.h	21;"	d
RA288TABLES_H	ra288.h	21;"	d
RATE_VARIATION	sonic.c	73;"	d	file:
RATIONAL_H	rational.h	28;"	d
REAL_DEINT_CUBIC	libpostproc/postprocess_template.c	1615;"	d	file:
REAL_DEINT_FF	libpostproc/postprocess_template.c	1679;"	d	file:
REAL_DEINT_L5	libpostproc/postprocess_template.c	1760;"	d	file:
REAL_DERING_CORE	libpostproc/postprocess_template.c	1332;"	d	file:
REAL_FIND_MIN_MAX	libpostproc/postprocess_template.c	1204;"	d	file:
REAL_FIND_MIN_MAX	libpostproc/postprocess_template.c	1209;"	d	file:
REAL_L2_DIFF_CORE	libpostproc/postprocess_template.c	2286;"	d	file:
REAL_L2_DIFF_CORE	libpostproc/postprocess_template.c	2303;"	d	file:
REAL_MEDIAN	libpostproc/postprocess_template.c	2011;"	d	file:
REAL_PAVGB	libpostproc/postprocess_template.c	51;"	d	file:
REAL_PAVGB	libpostproc/postprocess_template.c	53;"	d	file:
REAL_SCALED_CPY	libpostproc/postprocess_template.c	3205;"	d	file:
REAL_SCALED_CPY	libpostproc/postprocess_template.c	3228;"	d	file:
REAL_SIMPLE_CPY	libpostproc/postprocess_template.c	3287;"	d	file:
RECON_SHIFT	dsputil.h	325;"	d
RECT_SHAPE	mpeg4data.h	7;"	d
REF_0	sparc/dsputil_vis.c	75;"	d	file:
REF_0_1	sparc/dsputil_vis.c	76;"	d	file:
REF_2	sparc/dsputil_vis.c	77;"	d	file:
REF_2_1	sparc/dsputil_vis.c	78;"	d	file:
REF_4	sparc/dsputil_vis.c	79;"	d	file:
REF_4_1	sparc/dsputil_vis.c	80;"	d	file:
REF_6	sparc/dsputil_vis.c	81;"	d	file:
REF_6_1	sparc/dsputil_vis.c	82;"	d	file:
REF_S0	sparc/dsputil_vis.c	83;"	d	file:
REF_S0_1	sparc/dsputil_vis.c	84;"	d	file:
REF_S2	sparc/dsputil_vis.c	85;"	d	file:
REF_S2_1	sparc/dsputil_vis.c	86;"	d	file:
REF_S4	sparc/dsputil_vis.c	87;"	d	file:
REF_S4_1	sparc/dsputil_vis.c	88;"	d	file:
REF_S6	sparc/dsputil_vis.c	89;"	d	file:
REF_S6_1	sparc/dsputil_vis.c	90;"	d	file:
REG_S	i386/cputest.c	12;"	d	file:
REG_S	i386/cputest.c	9;"	d	file:
REG_SP	libpostproc/postprocess_template.c	32;"	d	file:
REG_SP	libpostproc/postprocess_template.c	41;"	d	file:
REG_a	i386/mmx.h	11;"	d
REG_a	i386/mmx.h	9;"	d
REG_a	libpostproc/postprocess_template.c	29;"	d	file:
REG_a	libpostproc/postprocess_template.c	38;"	d	file:
REG_b	i386/cputest.c	11;"	d	file:
REG_b	i386/cputest.c	8;"	d	file:
REG_c	libpostproc/postprocess_template.c	30;"	d	file:
REG_c	libpostproc/postprocess_template.c	39;"	d	file:
REG_d	libpostproc/postprocess_template.c	31;"	d	file:
REG_d	libpostproc/postprocess_template.c	40;"	d	file:
REGa	libpostproc/postprocess_template.c	26;"	d	file:
REGa	libpostproc/postprocess_template.c	35;"	d	file:
REGc	libpostproc/postprocess_template.c	27;"	d	file:
REGc	libpostproc/postprocess_template.c	36;"	d	file:
REGd	libpostproc/postprocess_template.c	28;"	d	file:
REGd	libpostproc/postprocess_template.c	37;"	d	file:
RENAME	i386/mpegvideo_mmx.c	676;"	d	file:
RENAME	i386/mpegvideo_mmx.c	681;"	d	file:
RENAME	i386/mpegvideo_mmx.c	683;"	d	file:
RENAME	i386/mpegvideo_mmx.c	687;"	d	file:
RENAME	i386/mpegvideo_mmx.c	689;"	d	file:
RENAME	libpostproc/postprocess.c	624;"	d	file:
RENAME	libpostproc/postprocess.c	630;"	d	file:
RENAME	libpostproc/postprocess.c	632;"	d	file:
RENAME	libpostproc/postprocess.c	640;"	d	file:
RENAME	libpostproc/postprocess.c	644;"	d	file:
RENAME	libpostproc/postprocess.c	650;"	d	file:
RENAME	libpostproc/postprocess.c	654;"	d	file:
RENAME	libpostproc/postprocess.c	660;"	d	file:
RENAME	libpostproc/postprocess.c	664;"	d	file:
RENAMEl	i386/mpegvideo_mmx.c	677;"	d	file:
RENAMEl	i386/mpegvideo_mmx.c	682;"	d	file:
RENAMEl	i386/mpegvideo_mmx.c	684;"	d	file:
RENAMEl	i386/mpegvideo_mmx.c	688;"	d	file:
RENAMEl	i386/mpegvideo_mmx.c	690;"	d	file:
RGBA_IN	imgconvert.c	1451;"	d	file:
RGBA_IN	imgconvert.c	1553;"	d	file:
RGBA_IN	imgconvert_template.h	851;"	d
RGBA_OUT	imgconvert.c	1460;"	d	file:
RGBA_OUT	imgconvert.c	1562;"	d	file:
RGBA_OUT	imgconvert_template.h	853;"	d
RGB_IN	imgconvert.c	1443;"	d	file:
RGB_IN	imgconvert.c	1474;"	d	file:
RGB_IN	imgconvert.c	1495;"	d	file:
RGB_IN	imgconvert.c	1513;"	d	file:
RGB_IN	imgconvert.c	1522;"	d	file:
RGB_IN	imgconvert.c	1545;"	d	file:
RGB_IN	imgconvert_template.h	850;"	d
RGB_NAME	imgconvert.c	1441;"	d	file:
RGB_NAME	imgconvert.c	1472;"	d	file:
RGB_NAME	imgconvert.c	1493;"	d	file:
RGB_NAME	imgconvert.c	1519;"	d	file:
RGB_NAME	imgconvert.c	1542;"	d	file:
RGB_NAME	imgconvert_template.h	855;"	d
RGB_OUT	imgconvert.c	1482;"	d	file:
RGB_OUT	imgconvert.c	1502;"	d	file:
RGB_OUT	imgconvert.c	1514;"	d	file:
RGB_OUT	imgconvert.c	1529;"	d	file:
RGB_OUT	imgconvert_template.h	21;"	d
RGB_OUT	imgconvert_template.h	852;"	d
RGB_TO_U	imgconvert.c	1056;"	d	file:
RGB_TO_U_CCIR	imgconvert.c	1068;"	d	file:
RGB_TO_V	imgconvert.c	1060;"	d	file:
RGB_TO_V_CCIR	imgconvert.c	1072;"	d	file:
RGB_TO_Y	imgconvert.c	1052;"	d	file:
RGB_TO_Y_CCIR	imgconvert.c	1064;"	d	file:
RICEContext	loco.c	/^typedef struct RICEContext{$/;"	s	file:
RICEContext	loco.c	/^}RICEContext;$/;"	t	file:
RIGHT_SHIFT	jfdctfst.c	45;"	d	file:
RIGHT_SHIFT	jfdctint.c	40;"	d	file:
RIGHT_SHIFT	jrevdct.c	44;"	d	file:
RIGHT_SIDE	flac.c	/^    RIGHT_SIDE,$/;"	e	enum:decorrelation_type	file:
RIGHT_SIDE	sonic.c	42;"	d	file:
RLE_V2_CHECK	indeo3.c	303;"	d	file:
RLE_V3_CHECK	indeo3.c	281;"	d	file:
RLTable	mpegvideo.h	/^typedef struct RLTable {$/;"	s
RLTable	mpegvideo.h	/^} RLTable;$/;"	t
RL_VLC_ELEM	bitstream.h	/^typedef struct RL_VLC_ELEM {$/;"	s
RL_VLC_ELEM	bitstream.h	/^} RL_VLC_ELEM;$/;"	t
RND_FRW_ROW	i386/fdct_mmx.c	36;"	d	file:
RN_SHIFT	simple_idct.c	531;"	d	file:
ROUND	liba52/a52_internal.h	124;"	d
ROUNDED_DIV	common.h	262;"	d
ROUNDER_0	ps2/idct_mmi.c	27;"	d	file:
ROUNDER_1	ps2/idct_mmi.c	28;"	d	file:
ROW0_MASK	simple_idct.c	87;"	d	file:
ROW0_MASK	simple_idct.c	89;"	d	file:
ROW_IDCT	i386/simple_idct_mmx.c	216;"	d	file:
ROW_IDCT	i386/simple_idct_mmx.c	633;"	d	file:
ROW_SHIFT	alpha/simple_idct_alpha.c	45;"	d	file:
ROW_SHIFT	armv4l/simple_idct_arm.S	/^#define ROW_SHIFT 11$/;"	d
ROW_SHIFT	i386/idct_mmx.c	32;"	d	file:
ROW_SHIFT	i386/idct_mmx.c	556;"	d	file:
ROW_SHIFT	i386/simple_idct_mmx.c	46;"	d	file:
ROW_SHIFT	simple_idct.c	42;"	d	file:
ROW_SHIFT	simple_idct.c	52;"	d	file:
ROW_SHIFT2MSHW	armv4l/simple_idct_arm.S	/^#define ROW_SHIFT2MSHW (16-11)$/;"	d
ROW_SHIFTED_1	armv4l/simple_idct_arm.S	/^#define ROW_SHIFTED_1 1024 \/* 1<< (ROW_SHIFT-1) *\/$/;"	d
RSHIFT	common.h	260;"	d
RST0	mjpeg.c	/^    RST0  = 0xd0,$/;"	e	file:
RST1	mjpeg.c	/^    RST1  = 0xd1,$/;"	e	file:
RST2	mjpeg.c	/^    RST2  = 0xd2,$/;"	e	file:
RST3	mjpeg.c	/^    RST3  = 0xd3,$/;"	e	file:
RST4	mjpeg.c	/^    RST4  = 0xd4,$/;"	e	file:
RST5	mjpeg.c	/^    RST5  = 0xd5,$/;"	e	file:
RST6	mjpeg.c	/^    RST6  = 0xd6,$/;"	e	file:
RST7	mjpeg.c	/^    RST7  = 0xd7,$/;"	e	file:
RUN7_VLC_BITS	h264.c	50;"	d	file:
RUN_VLC_BITS	h264.c	49;"	d	file:
R_FIX	simple_idct.c	532;"	d	file:
R_SHIFT	simple_idct.c	536;"	d	file:
RangeCoder	rangecoder.h	/^typedef struct RangeCoder{$/;"	s
RangeCoder	rangecoder.h	/^}RangeCoder;$/;"	t
RateControlContext	mpegvideo.h	/^typedef struct RateControlContext{$/;"	s
RateControlContext	mpegvideo.h	/^}RateControlContext;$/;"	t
RateControlEntry	mpegvideo.h	/^typedef struct RateControlEntry{$/;"	s
RateControlEntry	mpegvideo.h	/^}RateControlEntry;$/;"	t
RawVideoContext	raw.c	/^typedef struct RawVideoContext {$/;"	s	file:
RawVideoContext	raw.c	/^} RawVideoContext;$/;"	t	file:
RcOverride	avcodec.h	/^typedef struct RcOverride{$/;"	s
RcOverride	avcodec.h	/^} RcOverride;$/;"	t
ReSampleContext	avcodec.h	/^typedef struct ReSampleContext ReSampleContext;$/;"	t
ReSampleContext	resample.c	/^struct ReSampleContext {$/;"	s	file:
Real144_internal	ra144.c	/^} Real144_internal;$/;"	t	file:
Real288_internal	ra288.c	/^} Real288_internal;$/;"	t	file:
RoQ_ID_CCC	roqvideo.c	75;"	d	file:
RoQ_ID_FCC	roqvideo.c	73;"	d	file:
RoQ_ID_MOT	roqvideo.c	72;"	d	file:
RoQ_ID_SLD	roqvideo.c	74;"	d	file:
RoQ_INFO	roqvideo.c	66;"	d	file:
RoQ_QUAD_CODEBOOK	roqvideo.c	67;"	d	file:
RoQ_QUAD_VQ	roqvideo.c	68;"	d	file:
RoQ_SOUND_MONO	roqvideo.c	69;"	d	file:
RoQ_SOUND_STEREO	roqvideo.c	70;"	d	file:
RoqContext	roqvideo.c	/^typedef struct RoqContext {$/;"	s	file:
RoqContext	roqvideo.c	/^} RoqContext;$/;"	t	file:
RowIDCT	i386/vp3dsp_mmx.c	127;"	d	file:
RpzaContext	rpza.c	/^typedef struct RpzaContext {$/;"	s	file:
RpzaContext	rpza.c	/^} RpzaContext;$/;"	t	file:
S	i386/idct_mmx.c	326;"	d	file:
SAB_CHECK_MV	motion_est_template.c	659;"	d	file:
SAME_HEADER_MASK	mpegaudio.h	22;"	d
SAME_HEADER_MASK	parser.c	510;"	d	file:
SAME_HEADER_MASK	parser.c	511;"	d	file:
SAMPLE	liba52/a52_internal.h	129;"	d
SAMPLE	liba52/a52_internal.h	140;"	d
SAMPLES_BUF_SIZE	mpegaudio.c	36;"	d	file:
SAMPLE_FACTOR	sonic.c	70;"	d	file:
SAMPLE_FMT_DBL	avcodec.h	/^    SAMPLE_FMT_DBL,             \/\/\/< double$/;"	e	enum:SampleFormat
SAMPLE_FMT_FLT	avcodec.h	/^    SAMPLE_FMT_FLT,             \/\/\/< float$/;"	e	enum:SampleFormat
SAMPLE_FMT_S16	avcodec.h	/^    SAMPLE_FMT_S16 = 0,         \/\/\/< signed 16 bits $/;"	e	enum:SampleFormat
SAMPLE_FMT_S32	avcodec.h	/^    SAMPLE_FMT_S32,             \/\/\/< signed 32 bits $/;"	e	enum:SampleFormat
SAMPLE_SHIFT	sonic.c	68;"	d	file:
SATURATE_S16	dpcm.c	47;"	d	file:
SATURATE_U8	vp3.c	2224;"	d	file:
SBLIMIT	mpegaudio.h	14;"	d
SBUTTERFLY	i386/dsputil_mmx.c	1434;"	d	file:
SB_ALLOCATED	mpegaudio.c	497;"	d	file:
SB_FULLY_CODED	vp3.c	153;"	d	file:
SB_NOMORE	mpegaudio.c	498;"	d	file:
SB_NOTALLOCATED	mpegaudio.c	496;"	d	file:
SB_NOT_CODED	vp3.c	151;"	d	file:
SB_PARTIALLY_CODED	vp3.c	152;"	d	file:
SC	dv.c	681;"	d	file:
SCALE	faandct.c	34;"	d	file:
SCALE	faandct.c	36;"	d	file:
SCALE1	adx.c	44;"	d	file:
SCALE2	adx.c	45;"	d	file:
SCALEBITS	imgconvert.c	995;"	d	file:
SCALED_CPY	libpostproc/postprocess_template.c	3187;"	d	file:
SCALED_CPY	libpostproc/postprocess_template.c	3255;"	d	file:
SCALEFACTOR	xan.c	62;"	d	file:
SCALER	vp3.c	865;"	d	file:
SCALEX	snow.c	671;"	d	file:
SCALEX	snow.c	704;"	d	file:
SCALEX	snow.c	730;"	d	file:
SCALEX	snow.c	744;"	d	file:
SCALE_GEN	mpegaudiodec.c	190;"	d	file:
SEG_MASK	pcm.c	33;"	d	file:
SEG_SHIFT	pcm.c	32;"	d	file:
SEQ_END_CODE	mpeg12.c	38;"	d	file:
SEQ_START_CODE	mpeg12.c	39;"	d	file:
SEQ_START_CODE	parser.c	158;"	d	file:
SERIAL_FRAMESIZE	amr.c	113;"	d	file:
SET_CMP_FUNC	dsputil.c	3711;"	d	file:
SET_QPEL_FUNC	h263dec.c	565;"	d	file:
SET_QPEL_FUNC	i386/dsputil_mmx.c	2824;"	d	file:
SET_RND	i386/dsputil_mmx.c	133;"	d	file:
SET_RND	i386/dsputil_mmx.c	140;"	d	file:
SET_RND	i386/dsputil_mmx.c	147;"	d	file:
SET_RND	i386/dsputil_mmx.c	154;"	d	file:
SE_16BIT	dpcm.c	49;"	d	file:
SHIFT1	snow.c	677;"	d	file:
SHIFT1	snow.c	690;"	d	file:
SHIFT1	snow.c	706;"	d	file:
SHIFT1	snow.c	719;"	d	file:
SHIFT1	snow.c	733;"	d	file:
SHIFT1	snow.c	747;"	d	file:
SHIFT1	snow.c	760;"	d	file:
SHIFT1	snow.c	773;"	d	file:
SHIFT2	snow.c	680;"	d	file:
SHIFT2	snow.c	693;"	d	file:
SHIFT2	snow.c	709;"	d	file:
SHIFT2	snow.c	722;"	d	file:
SHIFT2	snow.c	736;"	d	file:
SHIFT2	snow.c	750;"	d	file:
SHIFT2	snow.c	763;"	d	file:
SHIFT2	snow.c	776;"	d	file:
SHIFT3	snow.c	683;"	d	file:
SHIFT3	snow.c	696;"	d	file:
SHIFT3	snow.c	712;"	d	file:
SHIFT3	snow.c	725;"	d	file:
SHIFT3	snow.c	739;"	d	file:
SHIFT3	snow.c	753;"	d	file:
SHIFT3	snow.c	766;"	d	file:
SHIFT3	snow.c	779;"	d	file:
SHIFT4	snow.c	686;"	d	file:
SHIFT4	snow.c	699;"	d	file:
SHIFT4	snow.c	715;"	d	file:
SHIFT4	snow.c	728;"	d	file:
SHIFT4	snow.c	742;"	d	file:
SHIFT4	snow.c	756;"	d	file:
SHIFT4	snow.c	769;"	d	file:
SHIFT4	snow.c	782;"	d	file:
SHIFT_FRW_COL	i386/fdct_mmx.c	34;"	d	file:
SHIFT_FRW_ROW	i386/fdct_mmx.c	35;"	d	file:
SHIFT_INV_COL	ps2/idct_mmi.c	20;"	d	file:
SHIFT_INV_ROW	ps2/idct_mmi.c	19;"	d	file:
SHIFT_TEMPS	jfdctfst.c	46;"	d	file:
SHIFT_TEMPS	jfdctint.c	36;"	d	file:
SHOW_SBITS	bitstream.h	401;"	d
SHOW_SBITS	bitstream.h	463;"	d
SHOW_SBITS	bitstream.h	528;"	d
SHOW_UBITS	bitstream.h	398;"	d
SHOW_UBITS	bitstream.h	460;"	d
SHOW_UBITS	bitstream.h	525;"	d
SIGN	libpostproc/postprocess.c	106;"	d	file:
SIGN_BIT	pcm.c	29;"	d	file:
SIGN_EXTENDED32	alac.c	255;"	d	file:
SIGN_ONLY	alac.c	257;"	d	file:
SIMPLE_CPY	libpostproc/postprocess_template.c	3293;"	d	file:
SIMPLE_VO_TYPE	mpeg4data.h	12;"	d
SIZE	cabac.c	152;"	d	file:
SIZE	h264.c	6641;"	d	file:
SIZE	rangecoder.c	138;"	d	file:
SI_TYPE	mpegvideo.h	68;"	d
SKIP_BITS	bitstream.h	389;"	d
SKIP_BITS	bitstream.h	451;"	d
SKIP_BITS	bitstream.h	516;"	d
SKIP_CACHE	bitstream.h	382;"	d
SKIP_CACHE	bitstream.h	445;"	d
SKIP_CACHE	bitstream.h	499;"	d
SKIP_CACHE	bitstream.h	507;"	d
SKIP_COUNTER	bitstream.h	386;"	d
SKIP_COUNTER	bitstream.h	448;"	d
SKIP_COUNTER	bitstream.h	513;"	d
SKIP_TYPE_COL	wmv2.c	30;"	d	file:
SKIP_TYPE_MPEG	wmv2.c	28;"	d	file:
SKIP_TYPE_NONE	wmv2.c	27;"	d	file:
SKIP_TYPE_ROW	wmv2.c	29;"	d	file:
SLIB	Makefile	/^SLIB= $(SLIBPREF)avcodec$(SLIBSUF)$/;"	m
SLICE_END	mpegvideo.h	697;"	d
SLICE_ERROR	mpegvideo.h	696;"	d
SLICE_FLAG_ALLOW_FIELD	avcodec.h	1499;"	d
SLICE_FLAG_ALLOW_PLANE	avcodec.h	1500;"	d
SLICE_FLAG_CODED_ORDER	avcodec.h	1498;"	d
SLICE_MAX_START_CODE	mpeg12.c	43;"	d	file:
SLICE_MAX_START_CODE	parser.c	161;"	d	file:
SLICE_MIN_START_CODE	mpeg12.c	42;"	d	file:
SLICE_MIN_START_CODE	parser.c	160;"	d	file:
SLICE_NOEND	mpegvideo.h	698;"	d
SLICE_OK	mpegvideo.h	695;"	d
SNR_INC1	ac3enc.c	666;"	d	file:
SOF0	mjpeg.c	/^    SOF0  = 0xc0,	\/* baseline *\/$/;"	e	file:
SOF1	mjpeg.c	/^    SOF1  = 0xc1,	\/* extended sequential, huffman *\/$/;"	e	file:
SOF10	mjpeg.c	/^    SOF10 = 0xca,	\/* progressive, arithmetic *\/$/;"	e	file:
SOF11	mjpeg.c	/^    SOF11 = 0xcb,	\/* lossless, arithmetic *\/$/;"	e	file:
SOF13	mjpeg.c	/^    SOF13 = 0xcd,	\/* differential sequential, arithmetic *\/$/;"	e	file:
SOF14	mjpeg.c	/^    SOF14 = 0xce,	\/* differential progressive, arithmetic *\/$/;"	e	file:
SOF15	mjpeg.c	/^    SOF15 = 0xcf,	\/* differential lossless, arithmetic *\/$/;"	e	file:
SOF2	mjpeg.c	/^    SOF2  = 0xc2,	\/* progressive, huffman *\/$/;"	e	file:
SOF3	mjpeg.c	/^    SOF3  = 0xc3,	\/* lossless, huffman *\/$/;"	e	file:
SOF5	mjpeg.c	/^    SOF5  = 0xc5,	\/* differential sequential, huffman *\/$/;"	e	file:
SOF6	mjpeg.c	/^    SOF6  = 0xc6,	\/* differential progressive, huffman *\/$/;"	e	file:
SOF7	mjpeg.c	/^    SOF7  = 0xc7,	\/* differential lossless, huffman *\/$/;"	e	file:
SOF9	mjpeg.c	/^    SOF9  = 0xc9,	\/* extended sequential, arithmetic *\/$/;"	e	file:
SOI	mjpeg.c	/^    SOI   = 0xd8,	\/* start of image *\/$/;"	e	file:
SOLID_PIXEL_VECTORS	vqavideo.c	81;"	d	file:
SOS	mjpeg.c	/^    SOS   = 0xda,	\/* start of scan *\/$/;"	e	file:
SP5X_H	sp5x.h	21;"	d
SPPLIB	libpostproc/Makefile	/^SPPLIB = $(SLIBPREF)postproc$(SLIBSUF)$/;"	m
SPPOBJS	libpostproc/Makefile	/^SPPOBJS=postprocess_pic.o$/;"	m
SPPVERSION	libpostproc/Makefile	/^SPPVERSION = 0.0.1$/;"	m
SPREADW	i386/mpegvideo_mmx_template.c	20;"	d	file:
SPREADW	i386/mpegvideo_mmx_template.c	23;"	d	file:
SPREADW	i386/mpegvideo_mmx_template.c	27;"	d	file:
SPRITE_TRAJ_VLC_BITS	h263.c	50;"	d	file:
SPS	h264.c	/^typedef struct SPS{$/;"	s	file:
SPS	h264.c	/^}SPS;$/;"	t	file:
SP_TYPE	mpegvideo.h	69;"	d
SQ	dsputil.c	3406;"	d	file:
SQ	motion_est.c	39;"	d	file:
SQRT2	mpegaudiotab.h	17;"	d
SQRT_2	ppc/fdct_altivec.c	41;"	d	file:
SRCS	Makefile	/^SRCS := $(OBJS:.o=.c) $(ASM_OBJS:.o=.S)$/;"	m
SSE2_Column_IDCT	i386/vp3dsp_sse2.c	58;"	d	file:
SSE2_Dequantize	i386/vp3dsp_sse2.c	473;"	d	file:
SSE2_Row_IDCT	i386/vp3dsp_sse2.c	229;"	d	file:
SSE2_Transpose	i386/vp3dsp_sse2.c	387;"	d	file:
SSE2_dequant_const	i386/vp3dsp_sse2.c	/^static unsigned short __align16 SSE2_dequant_const[] =$/;"	v	file:
SSE2_idct_data	i386/vp3dsp_sse2.c	/^static unsigned short __align16 SSE2_idct_data[7 * 8] =$/;"	v	file:
ST32	dsputil.h	521;"	d
ST32	dsputil.h	529;"	d
START_TIMER	common.h	469;"	d
START_TIMER	common.h	489;"	d
STATIC_SPRITE	mpeg4data.h	24;"	d
STOP_TIMER	common.h	473;"	d
STOP_TIMER	common.h	490;"	d
STORE	alpha/dsputil_alpha.c	259;"	d	file:
STORE	alpha/dsputil_alpha.c	262;"	d	file:
STORE	alpha/dsputil_alpha.c	263;"	d	file:
STORE	alpha/dsputil_alpha.c	270;"	d	file:
STORE	alpha/dsputil_alpha.c	274;"	d	file:
STORE	alpha/dsputil_alpha.c	277;"	d	file:
STORE	alpha/dsputil_alpha.c	278;"	d	file:
STORE	libpostproc/postprocess_altivec_template.c	488;"	d	file:
STORE4	i386/dsputil_mmx.c	1451;"	d	file:
STORE_DOUBLE_LINE	libpostproc/postprocess_altivec_template.c	1172;"	d	file:
STORE_LINE	libpostproc/postprocess_altivec_template.c	780;"	d	file:
STORE_LINE	libpostproc/postprocess_altivec_template.c	801;"	d	file:
STRIDE_ALIGN	dsputil.h	437;"	d
STRIDE_ALIGN	dsputil.h	447;"	d
STRIDE_ALIGN	dsputil.h	455;"	d
STRIDE_ALIGN	dsputil.h	463;"	d
STRIDE_ALIGN	dsputil.h	469;"	d
STRIDE_ALIGN	dsputil.h	486;"	d
STRIDE_ALIGN	dsputil.h	493;"	d
STRIDE_ALIGN	dsputil.h	500;"	d
STRIDE_ALIGN	dsputil.h	507;"	d
ST_DC	common.h	/^    ST_DC,$/;"	e
ST_INTER_AC	common.h	/^    ST_INTER_AC,$/;"	e
ST_INTER_MB	common.h	/^    ST_INTER_MB,$/;"	e
ST_INTRA_AC	common.h	/^    ST_INTRA_AC,$/;"	e
ST_INTRA_MB	common.h	/^    ST_INTRA_MB,$/;"	e
ST_MV	common.h	/^    ST_MV,$/;"	e
ST_NB	common.h	/^    ST_NB,$/;"	e
ST_UNKNOWN	common.h	/^    ST_UNKNOWN,$/;"	e
SUM	i386/dsputil_mmx.c	1102;"	d	file:
SUM	i386/dsputil_mmx.c	1156;"	d	file:
SUM	i386/dsputil_mmx.c	1164;"	d	file:
SUM	i386/dsputil_mmx.c	1197;"	d	file:
SUM	i386/dsputil_mmx.c	1206;"	d	file:
SUM	i386/dsputil_mmx.c	1276;"	d	file:
SUM	i386/dsputil_mmx.c	1285;"	d	file:
SUM	i386/dsputil_mmx.c	1334;"	d	file:
SUM8	mpegaudiodec.c	808;"	d	file:
SUM8P2	mpegaudiodec.c	820;"	d	file:
SVQ1Context	svq1.c	/^typedef struct SVQ1Context {$/;"	s	file:
SVQ1Context	svq1.c	/^} SVQ1Context;$/;"	t	file:
SVQ1_ADD_CODEBOOK	svq1.c	191;"	d	file:
SVQ1_BLOCK_INTER	svq1.c	61;"	d	file:
SVQ1_BLOCK_INTER_4V	svq1.c	62;"	d	file:
SVQ1_BLOCK_INTRA	svq1.c	63;"	d	file:
SVQ1_BLOCK_SKIP	svq1.c	60;"	d	file:
SVQ1_CALC_CODEBOOK_ENTRIES	svq1.c	240;"	d	file:
SVQ1_DO_CODEBOOK_INTRA	svq1.c	214;"	d	file:
SVQ1_DO_CODEBOOK_NONINTRA	svq1.c	226;"	d	file:
SVQ1_PROCESS_VECTOR	svq1.c	175;"	d	file:
SVQ1_VLC_H	svq1_vlc.h	2;"	d
SWAP	ppc/mpegvideo_altivec.c	32;"	d	file:
S_TYPE	mpegvideo.h	67;"	d
SampleFormat	avcodec.h	/^enum SampleFormat {$/;"	g
ScanTable	mpegvideo.h	/^typedef struct ScanTable{$/;"	s
ScanTable	mpegvideo.h	/^} ScanTable;$/;"	t
ShortenContext	shorten.c	/^typedef struct ShortenContext {$/;"	s	file:
ShortenContext	shorten.c	/^} ShortenContext;$/;"	t	file:
SmcContext	smc.c	/^typedef struct SmcContext {$/;"	s	file:
SmcContext	smc.c	/^} SmcContext;$/;"	t	file:
SnowContext	snow.c	/^typedef struct SnowContext{$/;"	s	file:
SnowContext	snow.c	/^}SnowContext;$/;"	t	file:
SonicContext	sonic.c	/^typedef struct SonicContext {$/;"	s	file:
SonicContext	sonic.c	/^} SonicContext;$/;"	t	file:
SubBand	snow.c	/^typedef struct SubBand{$/;"	s	file:
SubBand	snow.c	/^}SubBand;$/;"	t	file:
T1	i386/idct_mmx.c	393;"	d	file:
T1	i386/idct_mmx.c	533;"	d	file:
T2	i386/idct_mmx.c	394;"	d	file:
T2	i386/idct_mmx.c	534;"	d	file:
T3	i386/idct_mmx.c	395;"	d	file:
T3	i386/idct_mmx.c	535;"	d	file:
TABLE_4_3_SIZE	mpegaudiodec.c	174;"	d	file:
TABLE_SSE2	i386/fdct_mmx.c	143;"	d	file:
TAB_i_04	ps2/idct_mmi.c	30;"	d	file:
TAB_i_17	ps2/idct_mmi.c	31;"	d	file:
TAB_i_26	ps2/idct_mmi.c	32;"	d	file:
TAB_i_35	ps2/idct_mmi.c	33;"	d	file:
TCOEFF_VLC_BITS	h261.c	37;"	d	file:
TEM	mjpeg.c	/^    TEM   = 0x01,	\/* temporary private use for arithmetic coding *\/$/;"	e	file:
TEMP_NOISE_FILTER	libpostproc/postprocess_internal.h	58;"	d
TEMP_STRIDE	libpostproc/postprocess.c	111;"	d	file:
TESTS	Makefile	/^TESTS= imgresample-test dct-test motion-test fft-test$/;"	m
TEX_VLC_BITS	dv.c	50;"	d	file:
TEX_VLC_BITS	h263.c	52;"	d	file:
TEX_VLC_BITS	mpeg12.c	53;"	d	file:
TEX_VLC_BITS	msmpeg4.c	50;"	d	file:
TG1	ps2/idct_mmi.c	22;"	d	file:
TG2	ps2/idct_mmi.c	23;"	d	file:
TG3	ps2/idct_mmi.c	24;"	d	file:
TG_1_16	ps2/idct_mmi.c	35;"	d	file:
TG_2_16	ps2/idct_mmi.c	36;"	d	file:
TG_3_16	ps2/idct_mmi.c	37;"	d	file:
THIRDPEL_MODE	svq3.c	48;"	d	file:
THRESHOLD_MULTIPLIER	svq1.c	925;"	d	file:
TMP0	sparc/dsputil_vis.c	104;"	d	file:
TMP1	sparc/dsputil_vis.c	105;"	d	file:
TMP10	sparc/dsputil_vis.c	115;"	d	file:
TMP12	sparc/dsputil_vis.c	116;"	d	file:
TMP14	sparc/dsputil_vis.c	117;"	d	file:
TMP16	sparc/dsputil_vis.c	118;"	d	file:
TMP18	sparc/dsputil_vis.c	119;"	d	file:
TMP2	sparc/dsputil_vis.c	106;"	d	file:
TMP20	sparc/dsputil_vis.c	120;"	d	file:
TMP22	sparc/dsputil_vis.c	121;"	d	file:
TMP24	sparc/dsputil_vis.c	122;"	d	file:
TMP26	sparc/dsputil_vis.c	123;"	d	file:
TMP28	sparc/dsputil_vis.c	124;"	d	file:
TMP3	sparc/dsputil_vis.c	107;"	d	file:
TMP30	sparc/dsputil_vis.c	125;"	d	file:
TMP32	sparc/dsputil_vis.c	126;"	d	file:
TMP4	sparc/dsputil_vis.c	108;"	d	file:
TMP5	sparc/dsputil_vis.c	109;"	d	file:
TMP6	sparc/dsputil_vis.c	113;"	d	file:
TMP8	sparc/dsputil_vis.c	114;"	d	file:
TOP_DC_PRED	h264data.h	39;"	d
TOP_DC_PRED8x8	h264data.h	49;"	d
TOTAL_ZEROS_VLC_BITS	h264.c	47;"	d	file:
TPEL_WIDTH	dsputil.c	1364;"	d	file:
TRACE	vc9.c	49;"	d	file:
TRANSPOSE4	i386/dsputil_mmx.c	1439;"	d	file:
TRANSPOSE4	ppc/mpegvideo_altivec.c	40;"	d	file:
TRANSPOSE8	ppc/mpegvideo_altivec.c	53;"	d	file:
TRANSP_INDEX	imgconvert.c	1401;"	d	file:
TRUEMOTION1DATA_H	truemotion1data.h	10;"	d
TWOMATRIXES	mjpeg.c	40;"	d	file:
TYPESIZE	shorten.c	44;"	d	file:
TYPE_S16HL	shorten.c	50;"	d	file:
TYPE_S16LH	shorten.c	51;"	d	file:
ThreadContext	beosthread.c	/^typedef struct ThreadContext{$/;"	s	file:
ThreadContext	beosthread.c	/^}ThreadContext;$/;"	t	file:
ThreadContext	pthread.c	/^typedef struct ThreadContext {$/;"	s	file:
ThreadContext	pthread.c	/^} ThreadContext;$/;"	t	file:
ThreadContext	w32thread.c	/^typedef struct ThreadContext{$/;"	s	file:
ThreadContext	w32thread.c	/^}ThreadContext;$/;"	t	file:
Transpose	i386/vp3dsp_mmx.c	222;"	d	file:
TrueMotion1Context	truemotion1.c	/^typedef struct TrueMotion1Context {$/;"	s	file:
TrueMotion1Context	truemotion1.c	/^} TrueMotion1Context;$/;"	t	file:
TsccContext	tscc.c	/^typedef struct TsccContext {$/;"	s	file:
UINT64_MAX	common.h	124;"	d
ULONGSIZE	shorten.c	38;"	d	file:
UNALIGNED_STORES_ARE_BAD	bitstream.h	132;"	d
UNI_AC_ENC_INDEX	mpegvideo.h	477;"	d
UNI_MPEG4_ENC_INDEX	h263.c	100;"	d	file:
UNPACK	sh4/dsputil_align.c	29;"	d	file:
UPDATE_CACHE	bitstream.h	379;"	d
UPDATE_CACHE	bitstream.h	427;"	d
UPDATE_CACHE	bitstream.h	436;"	d
UPDATE_CACHE	bitstream.h	489;"	d
UPDATE_LEAK	liba52/bit_allocate.c	98;"	d	file:
USER_DATA_STARTCODE	mpeg4data.h	38;"	d
USER_START_CODE	mpeg12.c	45;"	d	file:
USES_LIST	mpegvideo.h	168;"	d
USE_HIGHPRECISION	mpegaudiodec.c	40;"	d	file:
U_B	xan.c	81;"	d	file:
U_G	xan.c	80;"	d	file:
U_R	xan.c	79;"	d	file:
Ubuf	indeo3.c	/^  unsigned char *Ubuf;$/;"	m	file:
UltimotionDecodeContext	ulti.c	/^typedef struct UltimotionDecodeContext {$/;"	s	file:
UltimotionDecodeContext	ulti.c	/^} UltimotionDecodeContext;$/;"	t	file:
V1_INTER_CBPC_VLC_BITS	msmpeg4.c	45;"	d	file:
V1_INTRA_CBPC_VLC_BITS	msmpeg4.c	44;"	d	file:
V2LPCQOFFSET	shorten.c	57;"	d	file:
V2_INTRA_CBPC_VLC_BITS	msmpeg4.c	46;"	d	file:
V2_MB_TYPE_VLC_BITS	msmpeg4.c	47;"	d	file:
V2_MV_VLC_BITS	msmpeg4.c	49;"	d	file:
VC9Context	vc9.c	/^typedef struct VC9Context{$/;"	s	file:
VC9Context	vc9.c	/^} VC9Context;$/;"	t	file:
VC9DATA_H	vc9data.h	7;"	d
VC9_4MV_BLOCK_PATTERN_VLC_BITS	vc9.c	171;"	d	file:
VC9_BFRACTION_VLC_BITS	vc9.c	156;"	d	file:
VC9_CBPCY_P_VLC_BITS	vc9.c	169;"	d	file:
VC9_IMODE_VLC_BITS	vc9.c	158;"	d	file:
VC9_MV_DIFF_VLC_BITS	vc9.c	167;"	d	file:
VC9_NORM2_VLC_BITS	vc9.c	160;"	d	file:
VC9_NORM6_VLC_BITS	vc9.c	162;"	d	file:
VC9_SUBBLKPAT_VLC_BITS	vc9.c	175;"	d	file:
VC9_TTBLK_VLC_BITS	vc9.c	173;"	d	file:
VC9_TTMB_VLC_BITS	vc9.c	165;"	d	file:
VCR1Context	vcr1.c	/^typedef struct VCR1Context{$/;"	s	file:
VCR1Context	vcr1.c	/^} VCR1Context;$/;"	t	file:
VERBATIM_BYTE_SIZE	shorten.c	72;"	d	file:
VERBATIM_CKSIZE_SIZE	shorten.c	71;"	d	file:
VERT_LEFT_PRED	h264data.h	35;"	d
VERT_PRED	h264data.h	28;"	d
VERT_PRED8x8	h264data.h	45;"	d
VERT_RIGHT_PRED	h264data.h	33;"	d
VISUAL_OBJ_STARTCODE	mpeg4data.h	40;"	d
VIS_GSR_ALIGNADDR_MASK	sparc/vis.h	150;"	d
VIS_GSR_ALIGNADDR_SHIFT	sparc/vis.h	151;"	d
VIS_GSR_SCALEFACT_MASK	sparc/vis.h	152;"	d
VIS_GSR_SCALEFACT_SHIFT	sparc/vis.h	153;"	d
VLC	bitstream.h	/^typedef struct VLC {$/;"	s
VLC	bitstream.h	/^} VLC;$/;"	t
VLC_BITS	asv1.c	32;"	d	file:
VLC_BITS	huffyuv.c	34;"	d	file:
VLC_TYPE	bitstream.h	117;"	d
VMD_HEADER_SIZE	vmdav.c	50;"	d	file:
VOP_STARTCODE	mpeg4data.h	41;"	d
VOS_STARTCODE	mpeg4data.h	37;"	d
VP3DATA_H	vp3data.h	2;"	d
VPATH	Makefile	/^VPATH=$(SRC_PATH)\/libavcodec$/;"	m
VPATH	libpostproc/Makefile	/^VPATH=$(SRC_PATH)\/libavcodec\/libpostproc$/;"	m
VPTZ_TAG	vqavideo.c	91;"	d	file:
VP_START	mpegvideo.h	522;"	d
VQA_DEBUG	vqavideo.c	93;"	d	file:
VQA_HEADER_SIZE	vqavideo.c	75;"	d	file:
V_A_DEBLOCK	libpostproc/postprocess_internal.h	40;"	d
V_B	xan.c	85;"	d	file:
V_DEBLOCK	libpostproc/postprocess_internal.h	24;"	d
V_G	xan.c	84;"	d	file:
V_R	xan.c	83;"	d	file:
V_X1_FILTER	libpostproc/postprocess_internal.h	39;"	d
Vbuf	indeo3.c	/^  unsigned char *Vbuf;$/;"	m	file:
VideoXLContext	xl.c	/^typedef struct VideoXLContext{$/;"	s	file:
VideoXLContext	xl.c	/^} VideoXLContext;$/;"	t	file:
VlcState	ffv1.c	/^typedef struct VlcState{$/;"	s	file:
VlcState	ffv1.c	/^} VlcState;$/;"	t	file:
VmdAudioContext	vmdav.c	/^typedef struct VmdAudioContext {$/;"	s	file:
VmdAudioContext	vmdav.c	/^} VmdAudioContext;$/;"	t	file:
VmdVideoContext	vmdav.c	/^typedef struct VmdVideoContext {$/;"	s	file:
VmdVideoContext	vmdav.c	/^} VmdVideoContext;$/;"	t	file:
Vp3DecodeContext	vp3.c	/^typedef struct Vp3DecodeContext {$/;"	s	file:
Vp3DecodeContext	vp3.c	/^} Vp3DecodeContext;$/;"	t	file:
Vp3Fragment	vp3.c	/^typedef struct Vp3Fragment {$/;"	s	file:
Vp3Fragment	vp3.c	/^} Vp3Fragment;$/;"	t	file:
VqaContext	vqavideo.c	/^typedef struct VqaContext {$/;"	s	file:
VqaContext	vqavideo.c	/^} VqaContext;$/;"	t	file:
W	g726.c	/^	int* W;               \/**< special table #1 ;-) *\/$/;"	m	struct:G726Tables	file:
W0	ppc/fdct_altivec.c	44;"	d	file:
W1	alpha/simple_idct_alpha.c	38;"	d	file:
W1	armv4l/simple_idct_arm.S	/^#define W1  22725$/;"	d
W1	ppc/fdct_altivec.c	45;"	d	file:
W1	simple_idct.c	35;"	d	file:
W1	simple_idct.c	45;"	d	file:
W2	alpha/simple_idct_alpha.c	39;"	d	file:
W2	armv4l/simple_idct_arm.S	/^#define W2  21407$/;"	d
W2	ppc/fdct_altivec.c	46;"	d	file:
W2	simple_idct.c	36;"	d	file:
W2	simple_idct.c	46;"	d	file:
W3	alpha/simple_idct_alpha.c	40;"	d	file:
W3	armv4l/simple_idct_arm.S	/^#define W3  19266$/;"	d
W3	ppc/fdct_altivec.c	47;"	d	file:
W3	simple_idct.c	37;"	d	file:
W3	simple_idct.c	47;"	d	file:
W4	alpha/simple_idct_alpha.c	41;"	d	file:
W4	armv4l/simple_idct_arm.S	/^#define W4  16383$/;"	d
W4	ppc/fdct_altivec.c	48;"	d	file:
W4	simple_idct.c	38;"	d	file:
W4	simple_idct.c	48;"	d	file:
W5	alpha/simple_idct_alpha.c	42;"	d	file:
W5	armv4l/simple_idct_arm.S	/^#define W5  12873$/;"	d
W5	ppc/fdct_altivec.c	49;"	d	file:
W5	simple_idct.c	39;"	d	file:
W5	simple_idct.c	49;"	d	file:
W6	alpha/simple_idct_alpha.c	43;"	d	file:
W6	armv4l/simple_idct_arm.S	/^#define W6  8867$/;"	d
W6	ppc/fdct_altivec.c	50;"	d	file:
W6	simple_idct.c	40;"	d	file:
W6	simple_idct.c	50;"	d	file:
W7	alpha/simple_idct_alpha.c	44;"	d	file:
W7	armv4l/simple_idct_arm.S	/^#define W7  4520$/;"	d
W7	ppc/fdct_altivec.c	51;"	d	file:
W7	simple_idct.c	41;"	d	file:
W7	simple_idct.c	51;"	d	file:
W8	ppc/fdct_altivec.c	52;"	d	file:
W9	ppc/fdct_altivec.c	53;"	d	file:
WA	ppc/fdct_altivec.c	54;"	d	file:
WARPER8_16	dsputil.h	587;"	d
WARPER8_16_SQ	dsputil.h	593;"	d
WAVE_FORMAT_PCM	shorten.c	40;"	d	file:
WB	ppc/fdct_altivec.c	55;"	d	file:
WFRAC_BITS	mpegaudio.c	32;"	d	file:
WFRAC_BITS	mpegaudiodec.c	45;"	d	file:
WFRAC_BITS	mpegaudiodec.c	48;"	d	file:
WIDTH	motion_test.c	32;"	d	file:
WIN32_LEAN_AND_MEAN	w32thread.c	24;"	d	file:
WMADecodeContext	wmadec.c	/^typedef struct WMADecodeContext {$/;"	s	file:
WMADecodeContext	wmadec.c	/^} WMADecodeContext;$/;"	t	file:
WMV1_SCANTABLE_COUNT	msmpeg4data.h	1821;"	d
WMV2_INTER_CBP_TABLE_COUNT	msmpeg4data.h	1878;"	d
WORD_0	ppc/dsputil_altivec.h	59;"	d
WORD_1	ppc/dsputil_altivec.h	60;"	d
WORD_2	ppc/dsputil_altivec.h	61;"	d
WORD_3	ppc/dsputil_altivec.h	62;"	d
WORD_VEC	alpha/asm.h	/^static inline uint64_t WORD_VEC(uint64_t x)$/;"	f
WORD_s0	ppc/dsputil_altivec.h	63;"	d
WORD_s1	ppc/dsputil_altivec.h	64;"	d
WORD_s2	ppc/dsputil_altivec.h	65;"	d
WORD_s3	ppc/dsputil_altivec.h	66;"	d
WSHIFT	mpegaudio.c	308;"	d	file:
W_AM	snow.c	1002;"	d	file:
W_AM	snow.c	951;"	d	file:
W_AM	snow.c	968;"	d	file:
W_AM	snow.c	984;"	d	file:
W_AO	snow.c	1003;"	d	file:
W_AO	snow.c	952;"	d	file:
W_AO	snow.c	969;"	d	file:
W_AO	snow.c	985;"	d	file:
W_AS	snow.c	1004;"	d	file:
W_AS	snow.c	953;"	d	file:
W_AS	snow.c	970;"	d	file:
W_AS	snow.c	986;"	d	file:
W_BM	snow.c	1006;"	d	file:
W_BM	snow.c	955;"	d	file:
W_BM	snow.c	972;"	d	file:
W_BM	snow.c	988;"	d	file:
W_BO	snow.c	1007;"	d	file:
W_BO	snow.c	956;"	d	file:
W_BO	snow.c	973;"	d	file:
W_BO	snow.c	989;"	d	file:
W_BS	snow.c	1008;"	d	file:
W_BS	snow.c	957;"	d	file:
W_BS	snow.c	974;"	d	file:
W_BS	snow.c	990;"	d	file:
W_CM	snow.c	1010;"	d	file:
W_CM	snow.c	960;"	d	file:
W_CM	snow.c	976;"	d	file:
W_CM	snow.c	992;"	d	file:
W_CO	snow.c	1011;"	d	file:
W_CO	snow.c	961;"	d	file:
W_CO	snow.c	977;"	d	file:
W_CO	snow.c	993;"	d	file:
W_CS	snow.c	1012;"	d	file:
W_CS	snow.c	962;"	d	file:
W_CS	snow.c	978;"	d	file:
W_CS	snow.c	994;"	d	file:
W_DM	snow.c	1014;"	d	file:
W_DM	snow.c	964;"	d	file:
W_DM	snow.c	980;"	d	file:
W_DM	snow.c	996;"	d	file:
W_DO	snow.c	1015;"	d	file:
W_DO	snow.c	965;"	d	file:
W_DO	snow.c	981;"	d	file:
W_DO	snow.c	997;"	d	file:
W_DS	snow.c	1016;"	d	file:
W_DS	snow.c	966;"	d	file:
W_DS	snow.c	982;"	d	file:
W_DS	snow.c	998;"	d	file:
W_tbl16	g726.c	/^static int W_tbl16[] = $/;"	v	file:
W_tbl24	g726.c	/^static int W_tbl24[] = $/;"	v	file:
W_tbl32	g726.c	/^static int W_tbl32[] = $/;"	v	file:
W_tbl40	g726.c	/^static int W_tbl40[] = $/;"	v	file:
Wmv2Context	wmv2.c	/^typedef struct Wmv2Context{$/;"	s	file:
Wmv2Context	wmv2.c	/^}Wmv2Context;$/;"	t	file:
X264Context	x264.c	/^typedef struct X264Context {$/;"	s	file:
X264Context	x264.c	/^} X264Context;$/;"	t	file:
X264_close	x264.c	/^X264_close(AVCodecContext *avctx)$/;"	f	file:
X264_frame	x264.c	/^X264_frame(AVCodecContext *ctx, uint8_t *buf, int bufsize, void *data)$/;"	f
X264_init	x264.c	/^X264_init(AVCodecContext *avctx)$/;"	f
X264_log	x264.c	/^X264_log(void *p, int level, const char *fmt, va_list args)$/;"	f	file:
XCHG	h264.c	2769;"	d	file:
XSIZE	imgresample.c	634;"	d	file:
XSIZE1	imgresample.c	639;"	d	file:
XVMC_decode_mb	xvmcvideo.c	/^void XVMC_decode_mb(MpegEncContext *s){$/;"	f
XVMC_field_end	xvmcvideo.c	/^void XVMC_field_end(MpegEncContext *s){$/;"	f
XVMC_field_start	xvmcvideo.c	/^int XVMC_field_start(MpegEncContext*s, AVCodecContext *avctx){$/;"	f
XVMC_init_block	xvmcvideo.c	/^inline void XVMC_init_block(MpegEncContext *s){$/;"	f
XVMC_pack_pblocks	xvmcvideo.c	/^void XVMC_pack_pblocks(MpegEncContext *s, int cbp){$/;"	f
XanContext	xan.c	/^typedef struct XanContext {$/;"	s	file:
XanContext	xan.c	/^} XanContext;$/;"	t	file:
YSIZE	imgresample.c	635;"	d	file:
YSIZE1	imgresample.c	640;"	d	file:
YUVBufs	indeo3.c	/^} YUVBufs;$/;"	t	file:
YUV_TO_RGB1	imgconvert.c	1017;"	d	file:
YUV_TO_RGB1_CCIR	imgconvert.c	999;"	d	file:
YUV_TO_RGB2	imgconvert.c	1026;"	d	file:
YUV_TO_RGB2_CCIR	imgconvert.c	1009;"	d	file:
Y_B	xan.c	77;"	d	file:
Y_CCIR_TO_JPEG	imgconvert.c	1034;"	d	file:
Y_G	xan.c	76;"	d	file:
Y_JPEG_TO_CCIR	imgconvert.c	1037;"	d	file:
Y_R	xan.c	75;"	d	file:
Ybuf	indeo3.c	/^  unsigned char *Ybuf;$/;"	m	file:
ZERO	sparc/dsputil_vis.c	110;"	d	file:
Z_COND_IDCT	i386/simple_idct_mmx.c	557;"	d	file:
Z_THRESHOLD	motion_est.c	543;"	d	file:
_DSPUTIL_ALTIVEC_	ppc/dsputil_altivec.h	22;"	d
_DSPUTIL_PPC_	ppc/dsputil_ppc.h	20;"	d
_GCC_FIXES_	ppc/gcc_fixes.h	8;"	d
_ISOC9X_SOURCE	dsputil.h	631;"	d
__BSWAP_H__	bswap.h	7;"	d
__MANGLE_H	libpostproc/mangle.h	8;"	d
__a_evaluation	armv4l/simple_idct_arm.S	/^__a_evaluation:$/;"	l
__a_evaluation2	armv4l/simple_idct_arm.S	/^__a_evaluation2:$/;"	l
__align16	dsputil.h	405;"	d
__align8	dsputil.h	436;"	d
__align8	dsputil.h	446;"	d
__align8	dsputil.h	454;"	d
__align8	dsputil.h	462;"	d
__align8	dsputil.h	468;"	d
__align8	dsputil.h	485;"	d
__align8	dsputil.h	492;"	d
__align8	dsputil.h	499;"	d
__align8	dsputil.h	506;"	d
__align8	h264.c	/^    DCTELEM mb[16*24] __align8;$/;"	m	struct:H264Context	file:
__align8	h264.c	/^    int16_t     mvd_cache[2][5*8][2] __align8;$/;"	m	struct:H264Context	file:
__align8	h264.c	/^    int16_t mv_cache[2][5*8][2] __align8;$/;"	m	struct:H264Context	file:
__align8	h264.c	/^    int8_t ref_cache[2][5*8] __align8;$/;"	m	struct:H264Context	file:
__align8	h264.c	/^    uint8_t non_zero_count_cache[6*8] __align8;$/;"	m	struct:H264Context	file:
__align8	imgresample.c	/^    int16_t h_filters[NB_PHASES][NB_TAPS] __align8; \/* horizontal filters *\/$/;"	m	struct:ImgReSampleContext	file:
__align8	imgresample.c	/^    int16_t v_filters[NB_PHASES][NB_TAPS] __align8; \/* vertical filters *\/$/;"	m	struct:ImgReSampleContext	file:
__align8	mjpeg.c	/^    DCTELEM block[64] __align8;$/;"	m	struct:MJpegDecodeContext	file:
__align8	wmv2.c	/^    DCTELEM abt_block2[6][64] __align8;$/;"	m	struct:Wmv2Context	file:
__almost_empty_row	armv4l/simple_idct_arm.S	/^__almost_empty_row:$/;"	l
__b_evaluation	armv4l/simple_idct_arm.S	/^__b_evaluation:$/;"	l
__b_evaluation2	armv4l/simple_idct_arm.S	/^__b_evaluation2:$/;"	l
__col_loop	armv4l/simple_idct_arm.S	/^__col_loop:$/;"	l
__constant_ptr__	armv4l/simple_idct_arm.S	/^__constant_ptr__:  @@ see #defines at the beginning of the source code for values.$/;"	l
__end_a_evaluation	armv4l/simple_idct_arm.S	/^__end_a_evaluation:$/;"	l
__end_a_evaluation2	armv4l/simple_idct_arm.S	/^__end_a_evaluation2:$/;"	l
__end_b_evaluation	armv4l/simple_idct_arm.S	/^__end_b_evaluation:$/;"	l
__end_b_evaluation2	armv4l/simple_idct_arm.S	/^__end_b_evaluation2:$/;"	l
__end_bef_a_evaluation	armv4l/simple_idct_arm.S	/^__end_bef_a_evaluation:$/;"	l
__end_col_loop	armv4l/simple_idct_arm.S	/^__end_col_loop:$/;"	l
__end_row_loop	armv4l/simple_idct_arm.S	/^__end_row_loop:$/;"	l
__end_simple_idct_ARM	armv4l/simple_idct_arm.S	/^__end_simple_idct_ARM:$/;"	l
__mmi_H	ps2/mmi.h	2;"	d
__row_loop	armv4l/simple_idct_arm.S	/^__row_loop:$/;"	l
a	g726.c	/^	 int a[2];            \/**< second order predictor coeffs *\/$/;"	m	struct:G726Context	file:
a0	alpha/regdef.h	25;"	d
a1	alpha/regdef.h	26;"	d
a2	alpha/regdef.h	27;"	d
a3	alpha/regdef.h	28;"	d
a4	alpha/regdef.h	29;"	d
a5	alpha/regdef.h	30;"	d
a52_bit_allocate	liba52/bit_allocate.c	/^void a52_bit_allocate (a52_state_t * state, ba_t * ba, int bndstart,$/;"	f
a52_bitstream_get_bh	liba52/bitstream.c	/^uint32_t a52_bitstream_get_bh (a52_state_t * state, uint32_t num_bits)$/;"	f
a52_bitstream_get_bh_2	liba52/bitstream.c	/^int32_t a52_bitstream_get_bh_2 (a52_state_t * state, uint32_t num_bits)$/;"	f
a52_bitstream_set_ptr	liba52/bitstream.c	/^void a52_bitstream_set_ptr (a52_state_t * state, uint8_t * buf)$/;"	f
a52_block	a52dec.c	/^    int (*a52_block)(a52_state_t * state);$/;"	m	struct:AC3DecodeState	file:
a52_block	liba52/parse.c	/^int a52_block (a52_state_t * state)$/;"	f
a52_crc16_block	liba52/crc.c	/^uint16_t a52_crc16_block(uint8_t *data,uint32_t num_bytes)$/;"	f
a52_decode_end	a52dec.c	/^static int a52_decode_end(AVCodecContext *avctx)$/;"	f	file:
a52_decode_frame	a52dec.c	/^static int a52_decode_frame(AVCodecContext *avctx,$/;"	f	file:
a52_decode_init	a52dec.c	/^static int a52_decode_init(AVCodecContext *avctx)$/;"	f	file:
a52_downmix	liba52/downmix.c	/^void a52_downmix (sample_t * samples, int acmod, int output, sample_t bias,$/;"	f
a52_downmix_coeff	liba52/downmix.c	/^int a52_downmix_coeff (level_t * coeff, int acmod, int output, level_t level,$/;"	f
a52_downmix_init	liba52/downmix.c	/^int a52_downmix_init (int input, int flags, level_t * level,$/;"	f
a52_dynrng	a52dec.c	/^    void (*a52_dynrng)(a52_state_t * state,$/;"	m	struct:AC3DecodeState	file:
a52_dynrng	liba52/parse.c	/^void a52_dynrng (a52_state_t * state,$/;"	f
a52_frame	a52dec.c	/^    int (*a52_frame)(a52_state_t * state, uint8_t * buf, int * flags,$/;"	m	struct:AC3DecodeState	file:
a52_frame	liba52/parse.c	/^int a52_frame (a52_state_t * state, uint8_t * buf, int * flags,$/;"	f
a52_free	a52dec.c	/^    void (*a52_free)(a52_state_t * state);$/;"	m	struct:AC3DecodeState	file:
a52_free	liba52/parse.c	/^void a52_free (a52_state_t * state)$/;"	f
a52_imdct_256	liba52/imdct.c	/^void a52_imdct_256 (sample_t * data, sample_t * delay, sample_t bias)$/;"	f
a52_imdct_512	liba52/imdct.c	/^void a52_imdct_512 (sample_t * data, sample_t * delay, sample_t bias)$/;"	f
a52_imdct_init	liba52/imdct.c	/^void a52_imdct_init (uint32_t mm_accel)$/;"	f
a52_imdct_window	liba52/imdct.c	/^static sample_t a52_imdct_window[256];$/;"	v	file:
a52_init	a52dec.c	/^    a52_state_t* (*a52_init)(uint32_t mm_accel);$/;"	m	struct:AC3DecodeState	file:
a52_init	liba52/parse.c	/^a52_state_t * a52_init (uint32_t mm_accel)$/;"	f
a52_resample	liba52/resample.c	/^int (* a52_resample) (float * _f, int16_t * s16)=NULL;$/;"	v
a52_resample_2F_2R_LFE_to_6_C	liba52/resample_c.c	/^static int a52_resample_2F_2R_LFE_to_6_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_2F_2R_LFE_to_6_MMX	liba52/resample_mmx.c	/^static int a52_resample_2F_2R_LFE_to_6_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_2F_2R_to_4_C	liba52/resample_c.c	/^static int a52_resample_2F_2R_to_4_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_2F_2R_to_4_MMX	liba52/resample_mmx.c	/^static int a52_resample_2F_2R_to_4_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_2R_LFE_to_6_C	liba52/resample_c.c	/^static int a52_resample_3F_2R_LFE_to_6_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_2R_LFE_to_6_MMX	liba52/resample_mmx.c	/^static int a52_resample_3F_2R_LFE_to_6_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_2R_to_5_C	liba52/resample_c.c	/^static int a52_resample_3F_2R_to_5_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_2R_to_5_MMX	liba52/resample_mmx.c	/^static int a52_resample_3F_2R_to_5_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_LFE_to_6_C	liba52/resample_c.c	/^static int a52_resample_3F_LFE_to_6_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_LFE_to_6_MMX	liba52/resample_mmx.c	/^static int a52_resample_3F_LFE_to_6_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_to_5_C	liba52/resample_c.c	/^static int a52_resample_3F_to_5_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_3F_to_5_MMX	liba52/resample_mmx.c	/^static int a52_resample_3F_to_5_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_C	liba52/resample_c.c	/^static void* a52_resample_C(int flags, int ch){$/;"	f	file:
a52_resample_MMX	liba52/resample_mmx.c	/^static void* a52_resample_MMX(int flags, int ch){$/;"	f	file:
a52_resample_MONO_LFE_to_6_C	liba52/resample_c.c	/^static int a52_resample_MONO_LFE_to_6_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_MONO_LFE_to_6_MMX	liba52/resample_mmx.c	/^static int a52_resample_MONO_LFE_to_6_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_MONO_to_1_C	liba52/resample_c.c	/^static int a52_resample_MONO_to_1_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_MONO_to_5_C	liba52/resample_c.c	/^static int a52_resample_MONO_to_5_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_MONO_to_5_MMX	liba52/resample_mmx.c	/^static int a52_resample_MONO_to_5_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_STEREO_LFE_to_6_C	liba52/resample_c.c	/^static int a52_resample_STEREO_LFE_to_6_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_STEREO_LFE_to_6_MMX	liba52/resample_mmx.c	/^static int a52_resample_STEREO_LFE_to_6_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_STEREO_to_2_C	liba52/resample_c.c	/^static int a52_resample_STEREO_to_2_C(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_STEREO_to_2_MMX	liba52/resample_mmx.c	/^static int a52_resample_STEREO_to_2_MMX(float * _f, int16_t * s16){$/;"	f	file:
a52_resample_init	liba52/resample.c	/^void* a52_resample_init(uint32_t mm_accel,int flags,int chans){$/;"	f
a52_samples	a52dec.c	/^    sample_t* (*a52_samples)(a52_state_t * state);$/;"	m	struct:AC3DecodeState	file:
a52_samples	liba52/parse.c	/^sample_t * a52_samples (a52_state_t * state)$/;"	f
a52_state_s	liba52/a52_internal.h	/^struct a52_state_s {$/;"	s
a52_state_t	liba52/a52.h	/^typedef struct a52_state_s a52_state_t;$/;"	t
a52_syncinfo	a52dec.c	/^    int (*a52_syncinfo)(uint8_t * buf, int * flags,$/;"	m	struct:AC3DecodeState	file:
a52_syncinfo	liba52/parse.c	/^int a52_syncinfo (uint8_t * buf, int * flags,$/;"	f
a52_upmix	liba52/downmix.c	/^void a52_upmix (sample_t * samples, int acmod, int output)$/;"	f
aanscales	dct-test.c	/^static const unsigned short aanscales[64] = {$/;"	v	file:
aanscales	mpegvideo.c	/^static const uint16_t aanscales[64] = {$/;"	v	file:
abt_flag	wmv2.c	/^    int abt_flag;$/;"	m	struct:Wmv2Context	file:
abt_scantable	wmv2.c	/^    ScanTable abt_scantable[2];$/;"	m	struct:Wmv2Context	file:
abt_type	wmv2.c	/^    int abt_type;$/;"	m	struct:Wmv2Context	file:
abt_type_table	wmv2.c	/^    int abt_type_table[6];$/;"	m	struct:Wmv2Context	file:
ac	ffv1.c	/^    int ac;                              \/\/\/< 1-> CABAC 0-> golomb rice$/;"	m	struct:FFV1Context	file:
ac3_5p1_mux	resample.c	/^static void ac3_5p1_mux(short *output, short *input1, short *input2, int n)$/;"	f	file:
ac3_bitratetab	ac3tab.h	/^static const uint16_t ac3_bitratetab[19] = {$/;"	v
ac3_common_init	ac3enc.c	/^void ac3_common_init(void)$/;"	f
ac3_crc	ac3enc.c	/^static unsigned int ac3_crc(uint8_t *data, int n, unsigned int crc)$/;"	f	file:
ac3_crc_init	ac3enc.c	/^static void ac3_crc_init(void)$/;"	f	file:
ac3_decode_end	ac3dec.c	/^static int ac3_decode_end(AVCodecContext *s)$/;"	f	file:
ac3_decode_frame	ac3dec.c	/^static int ac3_decode_frame(AVCodecContext *avctx, $/;"	f	file:
ac3_decode_init	ac3dec.c	/^static int ac3_decode_init(AVCodecContext *avctx)$/;"	f	file:
ac3_decoder	a52dec.c	/^AVCodec ac3_decoder = {$/;"	v
ac3_decoder	ac3dec.c	/^AVCodec ac3_decoder = {$/;"	v
ac3_encoder	ac3enc.c	/^AVCodec ac3_encoder = {$/;"	v
ac3_freqs	ac3tab.h	/^static const uint16_t ac3_freqs[3] = { 48000, 44100, 32000 };$/;"	v
ac3_parametric_bit_allocation	ac3enc.c	/^void ac3_parametric_bit_allocation(AC3BitAllocParameters *s, uint8_t *bap,$/;"	f
ac3_parse	parser.c	/^static int ac3_parse(AVCodecParserContext *s1,$/;"	f	file:
ac3_parse_init	parser.c	/^static int ac3_parse_init(AVCodecParserContext *s1)$/;"	f	file:
ac3_parser	parser.c	/^AVCodecParser ac3_parser = {$/;"	v
ac3_window	ac3tab.h	/^static const int16_t ac3_window[256] = {$/;"	v
ac_bias_0	vp3data.h	/^static const uint16_t ac_bias_0[16][32][2] = {$/;"	v
ac_bias_1	vp3data.h	/^static const uint16_t ac_bias_1[16][32][2] = {$/;"	v
ac_bias_2	vp3data.h	/^static const uint16_t ac_bias_2[16][32][2] = {$/;"	v
ac_bias_3	vp3data.h	/^static const uint16_t ac_bias_3[16][32][2] = {$/;"	v
ac_ccp_tab	asv1.c	/^static const uint8_t ac_ccp_tab[16][2]={$/;"	v	file:
ac_ccp_vlc	asv1.c	/^static VLC ac_ccp_vlc;$/;"	v	file:
ac_esc_length	mpegvideo.h	/^    int ac_esc_length;       \/\/\/< num of bits needed to encode the longest esc $/;"	m	struct:MpegEncContext
ac_index	mjpeg.c	/^    int ac_index[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
ac_pred	mpegvideo.h	/^    int ac_pred;$/;"	m	struct:MpegEncContext
ac_pred_plane	vc9.c	/^    BitPlane ac_pred_plane;       \/\/\/< AC prediction flags bitplane$/;"	m	struct:VC9Context	file:
ac_stats	mpegvideo.h	/^    int (*ac_stats)[2][MAX_LEVEL+1][MAX_RUN+1][2];$/;"	m	struct:MpegEncContext
ac_val	mpegvideo.h	/^    int16_t (*ac_val[3])[16];      \/\/\/< used for for mpeg4 AC prediction, all 3 arrays must be continuous $/;"	m	struct:MpegEncContext
ac_val_base	mpegvideo.h	/^    int16_t (*ac_val_base)[16];$/;"	m	struct:MpegEncContext
ac_vlc_1	vp3.c	/^    VLC ac_vlc_1[16];$/;"	m	struct:Vp3DecodeContext	file:
ac_vlc_2	vp3.c	/^    VLC ac_vlc_2[16];$/;"	m	struct:Vp3DecodeContext	file:
ac_vlc_3	vp3.c	/^    VLC ac_vlc_3[16];$/;"	m	struct:Vp3DecodeContext	file:
ac_vlc_4	vp3.c	/^    VLC ac_vlc_4[16];$/;"	m	struct:Vp3DecodeContext	file:
acmod	ac3enc.c	/^    unsigned int acmod;$/;"	m	struct:AC3EncodeContext	file:
acmod	liba52/a52_internal.h	/^    uint8_t acmod;		\/* coded channels *\/$/;"	m	struct:a52_state_s
action_t	pthread.c	/^typedef int (action_t)(AVCodecContext *c, void *arg);$/;"	t	file:
adaptive_quant	mpegvideo.h	/^    int adaptive_quant;         \/\/\/< use adaptive quantization $/;"	m	struct:MpegEncContext
adaptive_quantization	ratecontrol.c	/^static void adaptive_quantization(MpegEncContext *s, double q){$/;"	f	file:
add_8x8basis	dsputil.h	/^    void (*add_8x8basis)(int16_t rem[64], int16_t basis[64], int scale);$/;"	m	struct:DSPContext
add_8x8basis_c	dsputil.c	/^static void add_8x8basis_c(int16_t rem[64], int16_t basis[64], int scale){$/;"	f	file:
add_8x8basis_mmx	i386/dsputil_mmx.c	/^static void add_8x8basis_mmx(int16_t rem[64], int16_t basis[64], int scale){$/;"	f	file:
add_bytes	dsputil.h	/^    void (*add_bytes)(uint8_t *dst\/*align 16*\/, uint8_t *src\/*align 16*\/, int w);$/;"	m	struct:DSPContext
add_bytes_altivec	ppc/dsputil_altivec.c	/^void add_bytes_altivec(uint8_t *dst, uint8_t *src, int w) {$/;"	f
add_bytes_c	dsputil.c	/^static void add_bytes_c(uint8_t *dst, uint8_t *src, int w){$/;"	f	file:
add_bytes_mmx	i386/dsputil_mmx.c	/^static void add_bytes_mmx(uint8_t *dst, uint8_t *src, int w){$/;"	f	file:
add_dct	mpegvideo.c	/^static inline void add_dct(MpegEncContext *s, $/;"	f	file:
add_dequant_dct	mpegvideo.c	/^static inline void add_dequant_dct(MpegEncContext *s, $/;"	f	file:
add_left_prediction	huffyuv.c	/^static inline int add_left_prediction(uint8_t *dst, uint8_t *src, int w, int acc){$/;"	f	file:
add_left_prediction_bgr32	huffyuv.c	/^static inline void add_left_prediction_bgr32(uint8_t *dst, uint8_t *src, int w, int *red, int *green, int *blue){$/;"	f	file:
add_median_prediction	huffyuv.c	/^static inline void add_median_prediction(uint8_t *dst, uint8_t *src1, uint8_t *diff, int w, int *left, int *left_top){$/;"	f	file:
add_pixels_clamped	dsputil.h	/^    void (*add_pixels_clamped)(const DCTELEM *block\/*align 16*\/, uint8_t *pixels\/*align 8*\/, int line_size);$/;"	m	struct:DSPContext
add_pixels_clamped2_c	dsputil.c	/^static void add_pixels_clamped2_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
add_pixels_clamped4_c	dsputil.c	/^static void add_pixels_clamped4_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
add_pixels_clamped_axp_p	alpha/dsputil_alpha.c	/^void (*add_pixels_clamped_axp_p)(const DCTELEM *block, uint8_t *pixels, $/;"	v
add_pixels_clamped_c	dsputil.c	/^static void add_pixels_clamped_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
add_pixels_clamped_mlib	mlib/dsputil_mlib.c	/^static void add_pixels_clamped_mlib(const DCTELEM *block, uint8_t *pixels, int line_size)$/;"	f	file:
add_pixels_clamped_mmx	i386/dsputil_mmx.c	/^void add_pixels_clamped_mmx(const DCTELEM *block, uint8_t *pixels, int line_size)$/;"	f
add_pixels_clamped_mvi_asm	alpha/dsputil_alpha_asm.S	/^add_pixels_clamped_mvi_asm:$/;"	l
add_wav	ra144.c	/^static void add_wav(Real144_internal *glob, int n, int f, int m1, int m2, int m3, short *s1, short *s2, short *s3, short *dest)$/;"	f	file:
add_yblock	snow.c	/^static always_inline void add_yblock(SnowContext *s, DWTELEM *dst, uint8_t *dst8, uint8_t *src, uint8_t *obmc, int src_x, int src_y, int b_w, int b_h, int w, int h, int dst_stride, int src_stride, int obmc_stride, int b_x, int b_y, int add, int plane_index){$/;"	f	file:
adpcm_ct_expand_nibble	adpcm.c	/^static inline short adpcm_ct_expand_nibble(ADPCMChannelStatus *c, char nibble)$/;"	f	file:
adpcm_decode_frame	adpcm.c	/^static int adpcm_decode_frame(AVCodecContext *avctx,$/;"	f	file:
adpcm_decode_init	adpcm.c	/^static int adpcm_decode_init(AVCodecContext * avctx)$/;"	f	file:
adpcm_encode_close	adpcm.c	/^static int adpcm_encode_close(AVCodecContext *avctx)$/;"	f	file:
adpcm_encode_frame	adpcm.c	/^static int adpcm_encode_frame(AVCodecContext *avctx,$/;"	f	file:
adpcm_encode_init	adpcm.c	/^static int adpcm_encode_init(AVCodecContext *avctx)$/;"	f	file:
adpcm_g726_decoder	g726.c	/^AVCodec adpcm_g726_decoder = {$/;"	v
adpcm_g726_encoder	g726.c	/^AVCodec adpcm_g726_encoder = {$/;"	v
adpcm_ima_compress_sample	adpcm.c	/^static inline unsigned char adpcm_ima_compress_sample(ADPCMChannelStatus *c, short sample)$/;"	f	file:
adpcm_ima_expand_nibble	adpcm.c	/^static inline short adpcm_ima_expand_nibble(ADPCMChannelStatus *c, char nibble, int shift)$/;"	f	file:
adpcm_ms_compress_sample	adpcm.c	/^static inline unsigned char adpcm_ms_compress_sample(ADPCMChannelStatus *c, short sample)$/;"	f	file:
adpcm_ms_expand_nibble	adpcm.c	/^static inline short adpcm_ms_expand_nibble(ADPCMChannelStatus *c, char nibble)$/;"	f	file:
adu_mode	mpegaudiodec.c	/^    int adu_mode; \/\/\/< 0 for standard mp3, 1 for adu formatted mp3$/;"	m	struct:MPADecodeContext	file:
advanced_decode_i_mbs	vc9.c	/^static int advanced_decode_i_mbs(VC9Context *v)$/;"	f	file:
advanced_decode_picture_primary_header	vc9.c	/^static int advanced_decode_picture_primary_header(VC9Context *v)$/;"	f	file:
advanced_decode_picture_secondary_header	vc9.c	/^static int advanced_decode_picture_secondary_header(VC9Context *v)$/;"	f	file:
advanced_entry_point_process	vc9.c	/^static int advanced_entry_point_process(AVCodecContext *avctx, GetBitContext *gb)$/;"	f	file:
adx_adpcm_decoder	adx.c	/^AVCodec adx_adpcm_decoder = {$/;"	v
adx_adpcm_encoder	adx.c	/^AVCodec adx_adpcm_encoder = {$/;"	v
adx_decode	adx.c	/^static void adx_decode(short *out,const unsigned char *in,PREV *prev)$/;"	f	file:
adx_decode_frame	adx.c	/^static int adx_decode_frame(AVCodecContext *avctx,$/;"	f	file:
adx_decode_header	adx.c	/^static int adx_decode_header(AVCodecContext *avctx,const unsigned char *buf,size_t bufsize)$/;"	f	file:
adx_decode_init	adx.c	/^static int adx_decode_init(AVCodecContext * avctx)$/;"	f	file:
adx_decode_stereo	adx.c	/^static void adx_decode_stereo(short *out,const unsigned char *in,PREV *prev)$/;"	f	file:
adx_encode	adx.c	/^static void adx_encode(unsigned char *adx,const short *wav,PREV *prev)$/;"	f	file:
adx_encode_close	adx.c	/^static int adx_encode_close(AVCodecContext *avctx)$/;"	f	file:
adx_encode_frame	adx.c	/^static int adx_encode_frame(AVCodecContext *avctx,$/;"	f	file:
adx_encode_header	adx.c	/^static int adx_encode_header(AVCodecContext *avctx,unsigned char *buf,size_t bufsize)$/;"	f	file:
adx_encode_init	adx.c	/^static int adx_encode_init(AVCodecContext *avctx)$/;"	f	file:
alac_decode_close	alac.c	/^static int alac_decode_close(AVCodecContext *avctx)$/;"	f	file:
alac_decode_frame	alac.c	/^static int alac_decode_frame(AVCodecContext *avctx,$/;"	f	file:
alac_decode_init	alac.c	/^static int alac_decode_init(AVCodecContext * avctx)$/;"	f	file:
alac_decoder	alac.c	/^AVCodec alac_decoder = {$/;"	v
alac_set_info	alac.c	/^void alac_set_info(ALACContext *alac)$/;"	f
alaw2linear	pcm.c	/^static int alaw2linear(unsigned char	a_val)$/;"	f	file:
algorithm	truemotion1.c	/^    int algorithm;$/;"	m	struct:comp_types	file:
align16	ps2/idct_mmi.c	/^static short consttable[] align16 = {$/;"	v	file:
align16	ps2/mmi.h	4;"	d
align_get_bits	bitstream.c	/^void align_get_bits(GetBitContext *s)$/;"	f
align_put_bits	bitstream.c	/^void align_put_bits(PutBitContext *s)$/;"	f
all_fragments	vp3.c	/^    Vp3Fragment *all_fragments;$/;"	m	struct:Vp3DecodeContext	file:
alloc_bitplane	vc9.c	/^int alloc_bitplane(BitPlane *bp, int width, int height)$/;"	f
alloc_blocks	snow.c	/^static int alloc_blocks(SnowContext *s){$/;"	f	file:
alloc_picture	mpegvideo.c	/^static int alloc_picture(MpegEncContext *s, Picture *pic, int shared){$/;"	f	file:
alloc_table	bitstream.c	/^static int alloc_table(VLC *vlc, int size, int use_static)$/;"	f	file:
alloc_table	mpegaudio.c	/^    const unsigned char *alloc_table;$/;"	m	struct:MpegAudioContext	file:
alloc_table_0	mpegaudiodectab.h	/^static const unsigned char alloc_table_0[] = {$/;"	v
alloc_table_1	mpegaudiodectab.h	/^static const unsigned char alloc_table_1[] = {$/;"	v
alloc_table_2	mpegaudiodectab.h	/^static const unsigned char alloc_table_2[] = {$/;"	v
alloc_table_3	mpegaudiodectab.h	/^static const unsigned char alloc_table_3[] = {$/;"	v
alloc_table_4	mpegaudiodectab.h	/^static const unsigned char alloc_table_4[] = {$/;"	v
alloc_tables	h264.c	/^static int alloc_tables(H264Context *h){$/;"	f	file:
alloc_tables	mpegaudiodectab.h	/^const unsigned char *alloc_tables[5] = $/;"	v
alloc_temp	huffyuv.c	/^static void alloc_temp(HYuvContext *s){$/;"	f	file:
allocate_buffers	alac.c	/^static void allocate_buffers(ALACContext *alac)$/;"	f	file:
allocate_buffers	flac.c	/^static void allocate_buffers(FLACContext *s){$/;"	f	file:
allocate_buffers	shorten.c	/^static void allocate_buffers(ShortenContext *s)$/;"	f	file:
allocated_bitstream_buffer_size	mpegvideo.h	/^    int allocated_bitstream_buffer_size;$/;"	m	struct:MpegEncContext
allocated_bitstream_size	flac.c	/^    int allocated_bitstream_size;$/;"	m	struct:FLACContext	file:
allocated_bitstream_size	shorten.c	/^    int allocated_bitstream_size;$/;"	m	struct:ShortenContext	file:
allocated_edge_emu_buffer	mpegvideo.h	/^    uint8_t *allocated_edge_emu_buffer;$/;"	m	struct:MpegEncContext
allocated_size	4xm.c	/^    int allocated_size;$/;"	m	struct:CFrameBuffer	file:
allocated_static	utils.c	/^static unsigned int allocated_static = 0;$/;"	v	file:
allow_dtx	amr.c	/^    Word16 allow_dtx;$/;"	m	struct:AMRWBContext	file:
alpha_regdef_h	alpha/regdef.h	3;"	d
alpha_table	h264data.h	/^static const int alpha_table[52] = {$/;"	v
alt_inter_vlc	mpegvideo.h	/^    int alt_inter_vlc;              \/\/\/< alternative inter vlc$/;"	m	struct:MpegEncContext
alternate_scan	mpegvideo.h	/^    int alternate_scan;$/;"	m	struct:MpegEncContext
altivec_avg_h264_chroma_mc8_num	ppc/dsputil_ppc.h	/^  altivec_avg_h264_chroma_mc8_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_h264_qpel16_h_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_avg_h264_qpel16_h_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_h264_qpel16_hv_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_avg_h264_qpel16_hv_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_h264_qpel16_v_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_avg_h264_qpel16_v_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_pixels16_num	ppc/dsputil_ppc.h	/^  altivec_avg_pixels16_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_pixels8_num	ppc/dsputil_ppc.h	/^  altivec_avg_pixels8_num,$/;"	e	enum:powerpc_perf_index
altivec_avg_pixels8_xy2_num	ppc/dsputil_ppc.h	/^  altivec_avg_pixels8_xy2_num,$/;"	e	enum:powerpc_perf_index
altivec_dct_unquantize_h263_num	ppc/dsputil_ppc.h	/^  altivec_dct_unquantize_h263_num,$/;"	e	enum:powerpc_perf_index
altivec_fdct	ppc/dsputil_ppc.h	/^  altivec_fdct,$/;"	e	enum:powerpc_perf_index
altivec_fft_num	ppc/dsputil_ppc.h	/^  altivec_fft_num = 0,$/;"	e	enum:powerpc_perf_index
altivec_gmc1_num	ppc/dsputil_ppc.h	/^  altivec_gmc1_num,$/;"	e	enum:powerpc_perf_index
altivec_hadamard8_diff16_num	ppc/dsputil_ppc.h	/^  altivec_hadamard8_diff16_num,$/;"	e	enum:powerpc_perf_index
altivec_hadamard8_diff8x8_num	ppc/dsputil_ppc.h	/^  altivec_hadamard8_diff8x8_num,$/;"	e	enum:powerpc_perf_index
altivec_idct_add_num	ppc/dsputil_ppc.h	/^  altivec_idct_add_num,$/;"	e	enum:powerpc_perf_index
altivec_idct_put_num	ppc/dsputil_ppc.h	/^  altivec_idct_put_num,$/;"	e	enum:powerpc_perf_index
altivec_put_h264_chroma_mc8_num	ppc/dsputil_ppc.h	/^  altivec_put_h264_chroma_mc8_num,$/;"	e	enum:powerpc_perf_index
altivec_put_h264_qpel16_h_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_put_h264_qpel16_h_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_put_h264_qpel16_hv_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_put_h264_qpel16_hv_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_put_h264_qpel16_v_lowpass_num	ppc/dsputil_ppc.h	/^  altivec_put_h264_qpel16_v_lowpass_num,$/;"	e	enum:powerpc_perf_index
altivec_put_no_rnd_pixels16_xy2_num	ppc/dsputil_ppc.h	/^  altivec_put_no_rnd_pixels16_xy2_num,$/;"	e	enum:powerpc_perf_index
altivec_put_no_rnd_pixels8_xy2_num	ppc/dsputil_ppc.h	/^  altivec_put_no_rnd_pixels8_xy2_num,$/;"	e	enum:powerpc_perf_index
altivec_put_pixels16_num	ppc/dsputil_ppc.h	/^  altivec_put_pixels16_num,$/;"	e	enum:powerpc_perf_index
altivec_put_pixels16_xy2_num	ppc/dsputil_ppc.h	/^  altivec_put_pixels16_xy2_num,$/;"	e	enum:powerpc_perf_index
altivec_put_pixels8_xy2_num	ppc/dsputil_ppc.h	/^  altivec_put_pixels8_xy2_num,$/;"	e	enum:powerpc_perf_index
altpq	vc9.c	/^    uint8_t pq, altpq;    \/\/\/< Current\/alternate frame quantizer scale$/;"	m	struct:VC9Context	file:
always_inline	common.h	66;"	d
always_inline	common.h	68;"	d
always_inline	libpostproc/postprocess.c	116;"	d	file:
always_inline	libpostproc/postprocess.c	119;"	d	file:
always_reset	snow.c	/^    int always_reset;$/;"	m	struct:SnowContext	file:
amask	alpha/asm.h	143;"	d
amask	alpha/asm.h	82;"	d
amask	alpha/asm.h	96;"	d
amptable	ra288.h	/^static const float amptable[8]={ 0.515625, 0.90234375, 1.57910156, 2.76342773,$/;"	v
amr_nb_decode_close	amr.c	/^static int amr_nb_decode_close(AVCodecContext * avctx)$/;"	f	file:
amr_nb_decode_frame	amr.c	/^static int amr_nb_decode_frame(AVCodecContext * avctx,$/;"	f	file:
amr_nb_decode_init	amr.c	/^static int amr_nb_decode_init(AVCodecContext * avctx)$/;"	f	file:
amr_nb_decoder	amr.c	/^AVCodec amr_nb_decoder =$/;"	v
amr_nb_encode_close	amr.c	/^static int amr_nb_encode_close(AVCodecContext * avctx)$/;"	f	file:
amr_nb_encode_frame	amr.c	/^static int amr_nb_encode_frame(AVCodecContext *avctx,$/;"	f	file:
amr_nb_encode_init	amr.c	/^static int amr_nb_encode_init(AVCodecContext * avctx)$/;"	f	file:
amr_nb_encoder	amr.c	/^AVCodec amr_nb_encoder =$/;"	v
amr_wb_decode_close	amr.c	/^static int amr_wb_decode_close(AVCodecContext * avctx)$/;"	f	file:
amr_wb_decode_frame	amr.c	/^static int amr_wb_decode_frame(AVCodecContext * avctx,$/;"	f	file:
amr_wb_decode_init	amr.c	/^static int amr_wb_decode_init(AVCodecContext * avctx)$/;"	f	file:
amr_wb_decoder	amr.c	/^AVCodec amr_wb_decoder =$/;"	v
amr_wb_encode_close	amr.c	/^static int amr_wb_encode_close(AVCodecContext * avctx)$/;"	f	file:
amr_wb_encode_frame	amr.c	/^static int amr_wb_encode_frame(AVCodecContext *avctx,$/;"	f	file:
amr_wb_encode_init	amr.c	/^static int amr_wb_encode_init(AVCodecContext * avctx)$/;"	f	file:
amr_wb_encoder	amr.c	/^AVCodec amr_wb_encoder =$/;"	v
angle_by_index	ulti.c	/^static int angle_by_index[4] = { 0, 2, 6, 12};$/;"	v	file:
antialias_algo	avcodec.h	/^    int antialias_algo;$/;"	m	struct:AVCodecContext
ap	g726.c	/^	 int ap;              \/**< scale factor control *\/$/;"	m	struct:G726Context	file:
apply_loop_filter	vp3.c	/^static void apply_loop_filter(Vp3DecodeContext *s)$/;"	f	file:
apply_motion_4x4	roqvideo.c	/^static void apply_motion_4x4(RoqContext *ri, int x, int y, unsigned char mv,$/;"	f	file:
apply_motion_8x8	roqvideo.c	/^static void apply_motion_8x8(RoqContext *ri, int x, int y,$/;"	f	file:
apply_vector_2x2	roqvideo.c	/^static void apply_vector_2x2(RoqContext *ri, int x, int y, roq_cell *cell)$/;"	f	file:
apply_vector_4x4	roqvideo.c	/^static void apply_vector_4x4(RoqContext *ri, int x, int y, roq_cell *cell)$/;"	f	file:
area_q	dv.c	/^    int area_q[4];$/;"	m	struct:EncBlockInfo	file:
arg	beosthread.c	/^    void *arg;$/;"	m	struct:ThreadContext	file:
arg	w32thread.c	/^    void *arg;$/;"	m	struct:ThreadContext	file:
args	pthread.c	/^    void **args;$/;"	m	struct:ThreadContext	file:
array_static	utils.c	/^static void** array_static = NULL;$/;"	v	file:
aspect_ratio_info	mpegvideo.h	/^    int aspect_ratio_info; \/\/FIXME remove$/;"	m	struct:MpegEncContext
aspect_to_info	h263.c	/^static void aspect_to_info(MpegEncContext * s, AVRational aspect){$/;"	f	file:
asv1_decode_block	asv1.c	/^static inline int asv1_decode_block(ASV1Context *a, DCTELEM block[64]){$/;"	f	file:
asv1_decoder	asv1.c	/^AVCodec asv1_decoder = {$/;"	v
asv1_encode_block	asv1.c	/^static inline void asv1_encode_block(ASV1Context *a, DCTELEM block[64]){$/;"	f	file:
asv1_encoder	asv1.c	/^AVCodec asv1_encoder = {$/;"	v
asv1_get_level	asv1.c	/^static inline int asv1_get_level(GetBitContext *gb){$/;"	f	file:
asv1_put_level	asv1.c	/^static inline void asv1_put_level(PutBitContext *pb, int level){$/;"	f	file:
asv2_decode_block	asv1.c	/^static inline int asv2_decode_block(ASV1Context *a, DCTELEM block[64]){$/;"	f	file:
asv2_decoder	asv1.c	/^AVCodec asv2_decoder = {$/;"	v
asv2_encode_block	asv1.c	/^static inline void asv2_encode_block(ASV1Context *a, DCTELEM block[64]){$/;"	f	file:
asv2_encoder	asv1.c	/^AVCodec asv2_encoder = {$/;"	v
asv2_get_bits	asv1.c	/^static inline int asv2_get_bits(GetBitContext *gb, int n){$/;"	f	file:
asv2_get_level	asv1.c	/^static inline int asv2_get_level(GetBitContext *gb){$/;"	f	file:
asv2_level_tab	asv1.c	/^static const uint8_t asv2_level_tab[63][2]={$/;"	v	file:
asv2_level_vlc	asv1.c	/^static VLC asv2_level_vlc;$/;"	v	file:
asv2_put_bits	asv1.c	/^static inline void asv2_put_bits(PutBitContext *pb, int n, int v){$/;"	f	file:
asv2_put_level	asv1.c	/^static inline void asv2_put_level(PutBitContext *pb, int level){$/;"	f	file:
asym_quant	ac3enc.c	/^static inline int asym_quant(int c, int e, int qbits)$/;"	f	file:
atom	beosthread.c	/^	vint32 atom;$/;"	m	struct:benaphore	file:
attribute_unused	common.h	82;"	d
attribute_unused	common.h	84;"	d
attribute_used	common.h	74;"	d
attribute_used	common.h	76;"	d
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pb_FC attribute_used __attribute__ ((aligned(8))) = 0xFCFCFCFCFCFCFCFCULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_15 attribute_used __attribute__ ((aligned(8))) = 0x000F000F000F000FULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_16 attribute_used __attribute__ ((aligned(8))) = 0x0010001000100010ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_20 attribute_used __attribute__ ((aligned(8))) = 0x0014001400140014ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_3  attribute_used __attribute__ ((aligned(8))) = 0x0003000300030003ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_32 attribute_used __attribute__ ((aligned(8))) = 0x0020002000200020ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t ff_pw_5  attribute_used __attribute__ ((aligned(8))) = 0x0005000500050005ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t mm_bone attribute_used __attribute__ ((aligned(8))) = 0x0101010101010101ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t mm_wone attribute_used __attribute__ ((aligned(8))) = 0x0001000100010001ULL;$/;"	v	file:
attribute_used	i386/dsputil_mmx.c	/^static const uint64_t mm_wtwo attribute_used __attribute__ ((aligned(8))) = 0x0002000200020002ULL;$/;"	v	file:
attribute_used	libpostproc/postprocess.c	115;"	d	file:
attribute_used	libpostproc/postprocess.c	118;"	d	file:
audio_decode_example	apiexample.c	/^void audio_decode_example(const char *outfilename, const char *filename)$/;"	f
audio_encode_example	apiexample.c	/^void audio_encode_example(const char *filename)$/;"	f
audio_min_samples	dvdata.h	/^    int              audio_min_samples[3];\/* min ammount of audio samples *\/$/;"	m	struct:DVprofile
audio_resample	resample.c	/^int audio_resample(ReSampleContext *s, short *output, short *input, int nb_samples)$/;"	f
audio_resample_close	resample.c	/^void audio_resample_close(ReSampleContext *s)$/;"	f
audio_resample_init	resample.c	/^ReSampleContext *audio_resample_init(int output_channels, int input_channels, $/;"	f
audio_samples_dist	dvdata.h	/^    int              audio_samples_dist[5];\/* how many samples are supposed to be *\/$/;"	m	struct:DVprofile
audio_shuffle	dvdata.h	/^    const uint16_t (*audio_shuffle)[9];  \/* PCM shuffling table *\/$/;"	m	struct:DVprofile
audio_stride	dvdata.h	/^    int              audio_stride;        \/* size of audio_shuffle table *\/$/;"	m	struct:DVprofile
av_abort	common.h	257;"	d
av_add_i	integer.c	/^AVInteger av_add_i(AVInteger a, AVInteger b){$/;"	f
av_add_q	rational.c	/^AVRational av_add_q(AVRational b, AVRational c){$/;"	f
av_build_filter	resample2.c	/^void av_build_filter(FELEM *filter, double factor, int tap_count, int phase_count, int scale, int type){$/;"	f
av_class	avcodec.h	/^    AVClass *av_class;$/;"	m	struct:AVCodecContext
av_cmp_i	integer.c	/^int av_cmp_i(AVInteger a, AVInteger b){$/;"	f
av_cmp_q	rational.h	/^static inline int av_cmp_q(AVRational a, AVRational b){$/;"	f
av_codec_context_class	utils.c	/^static AVClass av_codec_context_class = { "AVCodecContext", context_to_name };$/;"	v	file:
av_d2q	rational.c	/^AVRational av_d2q(double d, int max){$/;"	f
av_div_i	integer.c	/^AVInteger av_div_i(AVInteger a, AVInteger b){$/;"	f
av_div_q	rational.c	/^AVRational av_div_q(AVRational b, AVRational c){$/;"	f
av_fast_realloc	utils.c	/^void *av_fast_realloc(void *ptr, unsigned int *size, unsigned int min_size)$/;"	f
av_first_parser	parser.c	/^AVCodecParser *av_first_parser = NULL;$/;"	v
av_free	mem.c	/^void av_free(void *ptr)$/;"	f
av_free_static	utils.c	/^void av_free_static(void)$/;"	f
av_freep	utils.c	/^void av_freep(void *arg)$/;"	f
av_get_pict_type_char	utils.c	/^char av_get_pict_type_char(int pict_type){$/;"	f
av_i2int	integer.c	/^int64_t av_i2int(AVInteger a){$/;"	f
av_int2i	integer.c	/^AVInteger av_int2i(int64_t a){$/;"	f
av_log	utils.c	/^void av_log(void* avcl, int level, const char *fmt, ...)$/;"	f
av_log2	common.h	/^static inline int av_log2(unsigned int v)$/;"	f
av_log2_16bit	common.h	/^static inline int av_log2_16bit(unsigned int v)$/;"	f
av_log2_i	integer.c	/^int av_log2_i(AVInteger a){$/;"	f
av_log_callback	utils.c	/^static void (*av_log_callback)(void*, int, const char*, va_list) = av_log_default_callback;$/;"	v	file:
av_log_default_callback	utils.c	/^static void av_log_default_callback(void* ptr, int level, const char* fmt, va_list vl)$/;"	f	file:
av_log_get_level	utils.c	/^int av_log_get_level(void)$/;"	f
av_log_level	utils.c	/^static int av_log_level = AV_LOG_DEBUG;$/;"	v	file:
av_log_set_callback	utils.c	/^void av_log_set_callback(void (*callback)(void*, int, const char*, va_list))$/;"	f
av_log_set_level	utils.c	/^void av_log_set_level(int level)$/;"	f
av_malloc	mem.c	/^void *av_malloc(unsigned int size)$/;"	f
av_mallocz	utils.c	/^void *av_mallocz(unsigned int size)$/;"	f
av_mallocz_static	utils.c	/^void *av_mallocz_static(unsigned int size)$/;"	f
av_mod_i	integer.c	/^AVInteger av_mod_i(AVInteger *quot, AVInteger a, AVInteger b){$/;"	f
av_mpeg4_decode_header	parser.c	/^static int av_mpeg4_decode_header(AVCodecParserContext *s1, $/;"	f	file:
av_mul_i	integer.c	/^AVInteger av_mul_i(AVInteger a, AVInteger b){$/;"	f
av_mul_q	rational.c	/^AVRational av_mul_q(AVRational b, AVRational c){$/;"	f
av_parser_close	parser.c	/^void av_parser_close(AVCodecParserContext *s)$/;"	f
av_parser_init	parser.c	/^AVCodecParserContext *av_parser_init(int codec_id)$/;"	f
av_parser_parse	parser.c	/^int av_parser_parse(AVCodecParserContext *s, $/;"	f
av_q2d	rational.h	/^static inline double av_q2d(AVRational a){$/;"	f
av_realloc	mem.c	/^void *av_realloc(void *ptr, unsigned int size)$/;"	f
av_realloc_static	utils.c	/^void *av_realloc_static(void *ptr, unsigned int size)$/;"	f
av_reduce	utils.c	/^int av_reduce(int *dst_nom, int *dst_den, int64_t nom, int64_t den, int64_t max){$/;"	f
av_register_codec_parser	parser.c	/^void av_register_codec_parser(AVCodecParser *parser)$/;"	f
av_resample	resample2.c	/^int av_resample(AVResampleContext *c, short *dst, short *src, int *consumed, int src_size, int dst_size, int update_ctx){$/;"	f
av_resample_close	resample2.c	/^void av_resample_close(AVResampleContext *c){$/;"	f
av_resample_compensate	resample2.c	/^void av_resample_compensate(AVResampleContext *c, int sample_delta, int compensation_distance){$/;"	f
av_resample_init	resample2.c	/^AVResampleContext *av_resample_init(int out_rate, int in_rate, int filter_size, int phase_shift, int linear, double cutoff){$/;"	f
av_rescale	utils.c	/^int64_t av_rescale(int64_t a, int64_t b, int64_t c){$/;"	f
av_rescale_rnd	utils.c	/^int64_t av_rescale_rnd(int64_t a, int64_t b, int64_t c, enum AVRounding rnd){$/;"	f
av_shr_i	integer.c	/^AVInteger av_shr_i(AVInteger a, int s){$/;"	f
av_strdup	utils.c	/^char *av_strdup(const char *s)$/;"	f
av_sub_i	integer.c	/^AVInteger av_sub_i(AVInteger a, AVInteger b){$/;"	f
av_sub_q	rational.c	/^AVRational av_sub_q(AVRational b, AVRational c){$/;"	f
av_thread_lib_ben	beosthread.c	/^static struct benaphore av_thread_lib_ben;$/;"	v	file:
av_vlog	utils.c	/^void av_vlog(void* avcl, int level, const char *fmt, va_list vl)$/;"	f
avcodec_align_dimensions	utils.c	/^void avcodec_align_dimensions(AVCodecContext *s, int *width, int *height){$/;"	f
avcodec_alloc_context	utils.c	/^AVCodecContext *avcodec_alloc_context(void){$/;"	f
avcodec_alloc_frame	utils.c	/^AVFrame *avcodec_alloc_frame(void){$/;"	f
avcodec_build	utils.c	/^unsigned avcodec_build( void )$/;"	f
avcodec_check_dimensions	utils.c	/^int avcodec_check_dimensions(void *av_log_ctx, unsigned int w, unsigned int h){$/;"	f
avcodec_close	utils.c	/^int avcodec_close(AVCodecContext *avctx)$/;"	f
avcodec_decode_audio	utils.c	/^int avcodec_decode_audio(AVCodecContext *avctx, int16_t *samples, $/;"	f
avcodec_decode_video	utils.c	/^int avcodec_decode_video(AVCodecContext *avctx, AVFrame *picture, $/;"	f
avcodec_default_execute	utils.c	/^int avcodec_default_execute(AVCodecContext *c, int (*func)(AVCodecContext *c2, void *arg2),void **arg, int *ret, int count){$/;"	f
avcodec_default_free_buffers	utils.c	/^void avcodec_default_free_buffers(AVCodecContext *s){$/;"	f
avcodec_default_get_buffer	utils.c	/^int avcodec_default_get_buffer(AVCodecContext *s, AVFrame *pic){$/;"	f
avcodec_default_get_format	utils.c	/^enum PixelFormat avcodec_default_get_format(struct AVCodecContext *s, const enum PixelFormat * fmt){$/;"	f
avcodec_default_reget_buffer	utils.c	/^int avcodec_default_reget_buffer(AVCodecContext *s, AVFrame *pic){$/;"	f
avcodec_default_release_buffer	utils.c	/^void avcodec_default_release_buffer(AVCodecContext *s, AVFrame *pic){$/;"	f
avcodec_encode_audio	utils.c	/^int avcodec_encode_audio(AVCodecContext *avctx, uint8_t *buf, int buf_size, $/;"	f
avcodec_encode_video	utils.c	/^int avcodec_encode_video(AVCodecContext *avctx, uint8_t *buf, int buf_size, $/;"	f
avcodec_find_best_pix_fmt	imgconvert.c	/^int avcodec_find_best_pix_fmt(int pix_fmt_mask, int src_pix_fmt,$/;"	f
avcodec_find_best_pix_fmt1	imgconvert.c	/^static int avcodec_find_best_pix_fmt1(int pix_fmt_mask, $/;"	f	file:
avcodec_find_decoder	utils.c	/^AVCodec *avcodec_find_decoder(enum CodecID id)$/;"	f
avcodec_find_decoder_by_name	utils.c	/^AVCodec *avcodec_find_decoder_by_name(const char *name)$/;"	f
avcodec_find_encoder	utils.c	/^AVCodec *avcodec_find_encoder(enum CodecID id)$/;"	f
avcodec_find_encoder_by_name	utils.c	/^AVCodec *avcodec_find_encoder_by_name(const char *name)$/;"	f
avcodec_flush_buffers	utils.c	/^void avcodec_flush_buffers(AVCodecContext *avctx)$/;"	f
avcodec_get_chroma_sub_sample	imgconvert.c	/^void avcodec_get_chroma_sub_sample(int pix_fmt, int *h_shift, int *v_shift)$/;"	f
avcodec_get_context_defaults	utils.c	/^void avcodec_get_context_defaults(AVCodecContext *s){$/;"	f
avcodec_get_frame_defaults	utils.c	/^void avcodec_get_frame_defaults(AVFrame *pic){$/;"	f
avcodec_get_pix_fmt	imgconvert.c	/^enum PixelFormat avcodec_get_pix_fmt(const char* name)$/;"	f
avcodec_get_pix_fmt_loss	imgconvert.c	/^int avcodec_get_pix_fmt_loss(int dst_pix_fmt, int src_pix_fmt,$/;"	f
avcodec_get_pix_fmt_name	imgconvert.c	/^const char *avcodec_get_pix_fmt_name(int pix_fmt)$/;"	f
avcodec_init	utils.c	/^void avcodec_init(void)$/;"	f
avcodec_open	utils.c	/^int avcodec_open(AVCodecContext *avctx, AVCodec *codec)$/;"	f
avcodec_pix_fmt_to_codec_tag	raw.c	/^unsigned int avcodec_pix_fmt_to_codec_tag(enum PixelFormat fmt)$/;"	f
avcodec_register_all	allcodecs.c	/^void avcodec_register_all(void)$/;"	f
avcodec_set_dimensions	utils.c	/^void avcodec_set_dimensions(AVCodecContext *s, int width, int height){$/;"	f
avcodec_string	utils.c	/^void avcodec_string(char *buf, int buf_size, AVCodecContext *enc, int encode)$/;"	f
avcodec_thread_execute	beosthread.c	/^int avcodec_thread_execute(AVCodecContext *s, int (*func)(AVCodecContext *c2, void *arg2),void **arg, int *ret, int count){$/;"	f
avcodec_thread_execute	pthread.c	/^int avcodec_thread_execute(AVCodecContext *avctx, action_t* func, void **arg, int *ret, int job_count) $/;"	f
avcodec_thread_execute	w32thread.c	/^int avcodec_thread_execute(AVCodecContext *s, int (*func)(AVCodecContext *c2, void *arg2),void **arg, int *ret, int count){$/;"	f
avcodec_thread_free	beosthread.c	/^void avcodec_thread_free(AVCodecContext *s){$/;"	f
avcodec_thread_free	pthread.c	/^void avcodec_thread_free(AVCodecContext *avctx) $/;"	f
avcodec_thread_free	w32thread.c	/^void avcodec_thread_free(AVCodecContext *s){$/;"	f
avcodec_thread_init	beosthread.c	/^int avcodec_thread_init(AVCodecContext *s, int thread_count){$/;"	f
avcodec_thread_init	pthread.c	/^int avcodec_thread_init(AVCodecContext *avctx, int thread_count) $/;"	f
avcodec_thread_init	utils.c	/^int avcodec_thread_init(AVCodecContext *s, int thread_count){$/;"	f
avcodec_thread_init	w32thread.c	/^int avcodec_thread_init(AVCodecContext *s, int thread_count){$/;"	f
avcodec_thread_lock_lib	beosthread.c	/^int avcodec_thread_lock_lib(void)$/;"	f
avcodec_thread_park_workers	pthread.c	/^static always_inline void avcodec_thread_park_workers(ThreadContext *c, int thread_count)$/;"	f	file:
avcodec_thread_unlock_lib	beosthread.c	/^int avcodec_thread_unlock_lib(void)$/;"	f
avcodec_version	utils.c	/^unsigned avcodec_version( void )$/;"	f
avctx	4xm.c	/^    AVCodecContext *avctx;$/;"	m	struct:FourXContext	file:
avctx	8bps.c	/^	AVCodecContext *avctx;$/;"	m	struct:EightBpsContext	file:
avctx	alac.c	/^    AVCodecContext *avctx;$/;"	m	file:
avctx	asv1.c	/^    AVCodecContext *avctx;$/;"	m	struct:ASV1Context	file:
avctx	beosthread.c	/^    AVCodecContext *avctx;$/;"	m	struct:ThreadContext	file:
avctx	cinepak.c	/^    AVCodecContext *avctx;$/;"	m	struct:CinepakContext	file:
avctx	cljr.c	/^    AVCodecContext *avctx;$/;"	m	struct:CLJRContext	file:
avctx	cyuv.c	/^    AVCodecContext *avctx;$/;"	m	struct:CyuvDecodeContext	file:
avctx	ffv1.c	/^    AVCodecContext *avctx;$/;"	m	struct:FFV1Context	file:
avctx	flac.c	/^    AVCodecContext *avctx;$/;"	m	struct:FLACContext	file:
avctx	flicvideo.c	/^    AVCodecContext *avctx;$/;"	m	struct:FlicDecodeContext	file:
avctx	huffyuv.c	/^    AVCodecContext *avctx;$/;"	m	struct:HYuvContext	file:
avctx	idcinvideo.c	/^    AVCodecContext *avctx;$/;"	m	struct:IdcinContext	file:
avctx	indeo3.c	/^    AVCodecContext *avctx;$/;"	m	struct:Indeo3DecodeContext	file:
avctx	interplayvideo.c	/^    AVCodecContext *avctx;$/;"	m	struct:IpvideoContext	file:
avctx	lcl.c	/^	AVCodecContext *avctx;$/;"	m	struct:LclContext	file:
avctx	loco.c	/^    AVCodecContext *avctx;$/;"	m	struct:LOCOContext	file:
avctx	mdec.c	/^    AVCodecContext *avctx;$/;"	m	struct:MDECContext	file:
avctx	mjpeg.c	/^    AVCodecContext *avctx;$/;"	m	struct:MJpegDecodeContext	file:
avctx	mpegvideo.h	/^    AVCodecContext *avctx;$/;"	m	struct:MotionEstContext
avctx	mpegvideo.h	/^    struct AVCodecContext *avctx;$/;"	m	struct:MpegEncContext
avctx	msrle.c	/^    AVCodecContext *avctx;$/;"	m	struct:MsrleContext	file:
avctx	msvideo1.c	/^    AVCodecContext *avctx;$/;"	m	struct:Msvideo1Context	file:
avctx	qdrw.c	/^    AVCodecContext *avctx;$/;"	m	struct:QdrawContext	file:
avctx	qpeg.c	/^    AVCodecContext *avctx;$/;"	m	struct:QpegContext	file:
avctx	qtrle.c	/^    AVCodecContext *avctx;$/;"	m	struct:QtrleContext	file:
avctx	roqvideo.c	/^    AVCodecContext *avctx;$/;"	m	struct:RoqContext	file:
avctx	rpza.c	/^    AVCodecContext *avctx;$/;"	m	struct:RpzaContext	file:
avctx	shorten.c	/^    AVCodecContext *avctx;$/;"	m	struct:ShortenContext	file:
avctx	smc.c	/^    AVCodecContext *avctx;$/;"	m	struct:SmcContext	file:
avctx	snow.c	/^    AVCodecContext *avctx;$/;"	m	struct:SnowContext	file:
avctx	svq1.c	/^    AVCodecContext *avctx;$/;"	m	struct:SVQ1Context	file:
avctx	truemotion1.c	/^    AVCodecContext *avctx;$/;"	m	struct:TrueMotion1Context	file:
avctx	tscc.c	/^    AVCodecContext *avctx;$/;"	m	struct:TsccContext	file:
avctx	ulti.c	/^    AVCodecContext *avctx;$/;"	m	struct:UltimotionDecodeContext	file:
avctx	vcr1.c	/^    AVCodecContext *avctx;$/;"	m	struct:VCR1Context	file:
avctx	vmdav.c	/^    AVCodecContext *avctx;$/;"	m	struct:VmdAudioContext	file:
avctx	vmdav.c	/^    AVCodecContext *avctx;$/;"	m	struct:VmdVideoContext	file:
avctx	vp3.c	/^    AVCodecContext *avctx;$/;"	m	struct:Vp3DecodeContext	file:
avctx	vqavideo.c	/^    AVCodecContext *avctx;$/;"	m	struct:VqaContext	file:
avctx	w32thread.c	/^    AVCodecContext *avctx;$/;"	m	struct:ThreadContext	file:
avctx	xan.c	/^    AVCodecContext *avctx;$/;"	m	struct:XanContext	file:
avctx	xl.c	/^    AVCodecContext *avctx;$/;"	m	struct:VideoXLContext	file:
avg	sh4/dsputil_align.c	47;"	d	file:
avg2	alpha/dsputil_alpha.c	/^static inline uint64_t avg2(uint64_t a, uint64_t b)$/;"	f	file:
avg2	alpha/motion_est_alpha.c	/^static inline uint64_t avg2(uint64_t a, uint64_t b)$/;"	f	file:
avg2	dsputil.c	1078;"	d	file:
avg2	roqvideo.c	45;"	d	file:
avg2	sh4/qpel.c	364;"	d	file:
avg2_no_rnd	alpha/dsputil_alpha.c	/^static inline uint64_t avg2_no_rnd(uint64_t a, uint64_t b)$/;"	f	file:
avg4	alpha/motion_est_alpha.c	/^static inline uint64_t avg4(uint64_t l1, uint64_t l2, uint64_t l3, uint64_t l4)$/;"	f	file:
avg4	dsputil.c	1079;"	d	file:
avg4	roqvideo.c	46;"	d	file:
avg4	sh4/qpel.c	365;"	d	file:
avg_bits_per_pixel	imgconvert.c	/^static int avg_bits_per_pixel(int pix_fmt)$/;"	f	file:
avg_h264_chroma_pixels_tab	dsputil.h	/^    h264_chroma_mc_func avg_h264_chroma_pixels_tab[3];$/;"	m	struct:DSPContext
avg_h264_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func avg_h264_qpel_pixels_tab[3][16];$/;"	m	struct:DSPContext
avg_no_rnd_pixels16_c	sh4/dsputil_align.c	320;"	d	file:
avg_no_rnd_pixels16_o	sh4/dsputil_align.c	311;"	d	file:
avg_no_rnd_pixels8_c	sh4/dsputil_align.c	319;"	d	file:
avg_no_rnd_pixels8_o	sh4/dsputil_align.c	310;"	d	file:
avg_no_rnd_pixels_tab	dsputil.h	/^    op_pixels_func avg_no_rnd_pixels_tab[4][4];$/;"	m	struct:DSPContext
avg_no_rnd_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func avg_no_rnd_qpel_pixels_tab[2][16];$/;"	m	struct:DSPContext
avg_pixels16	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels16)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
avg_pixels16_altivec	ppc/dsputil_altivec.c	/^void avg_pixels16_altivec(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels16_c	sh4/dsputil_align.c	316;"	d	file:
avg_pixels16_l2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels16_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
avg_pixels16_l2	ppc/dsputil_h264_altivec.c	/^} static inline void avg_pixels16_l2(uint8_t * dst, const uint8_t * src1, const uint8_t * src2, int dst_stride, int src_stride1, int src_stride2, int h) {$/;"	f	file:
avg_pixels16_l2_altivec	ppc/dsputil_h264_altivec.c	225;"	d	file:
avg_pixels16_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels16_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels16_x2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels16_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
avg_pixels16_x2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels16_x2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels16_xy2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels16_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
avg_pixels16_xy2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels16_xy2_mlib(uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels16_y2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels16_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
avg_pixels16_y2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels16_y2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels4_c	sh4/dsputil_align.c	/^static void avg_pixels4_c(uint8_t *dest,const uint8_t *ref, const int stride,int height)$/;"	f	file:
avg_pixels4_l2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels4_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
avg_pixels8	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels8)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels8_altivec	ppc/dsputil_altivec.c	/^void avg_pixels8_altivec(uint8_t * block, const uint8_t * pixels, int line_size, int h)$/;"	f
avg_pixels8_c	sh4/dsputil_align.c	315;"	d	file:
avg_pixels8_l2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels8_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
avg_pixels8_l2	ppc/dsputil_h264_altivec.c	/^} static inline void avg_pixels8_l2(uint8_t * dst, const uint8_t * src1, const uint8_t * src2, int dst_stride, int src_stride1, int src_stride2, int h) {$/;"	f	file:
avg_pixels8_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels8_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels8_x2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels8_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels8_x2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels8_x2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels8_xy2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels8_xy2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels8_xy2_altivec	ppc/dsputil_altivec.c	/^void avg_pixels8_xy2_altivec(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels8_xy2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels8_xy2_mlib(uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels8_y2	i386/dsputil_mmx_avg.h	/^static void DEF(avg_pixels8_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
avg_pixels8_y2_mlib	mlib/dsputil_mlib.c	/^static void avg_pixels8_y2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
avg_pixels_tab	dsputil.h	/^    op_pixels_func avg_pixels_tab[4][4];$/;"	m	struct:DSPContext
avg_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func avg_qpel_pixels_tab[2][16];$/;"	m	struct:DSPContext
avg_tpel_pixels_mc00_c	dsputil.c	/^static inline void avg_tpel_pixels_mc00_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc01_c	dsputil.c	/^static inline void avg_tpel_pixels_mc01_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc02_c	dsputil.c	/^static inline void avg_tpel_pixels_mc02_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc10_c	dsputil.c	/^static inline void avg_tpel_pixels_mc10_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc11_c	dsputil.c	/^static inline void avg_tpel_pixels_mc11_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc12_c	dsputil.c	/^static inline void avg_tpel_pixels_mc12_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc20_c	dsputil.c	/^static inline void avg_tpel_pixels_mc20_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc21_c	dsputil.c	/^static inline void avg_tpel_pixels_mc21_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_mc22_c	dsputil.c	/^static inline void avg_tpel_pixels_mc22_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
avg_tpel_pixels_tab	dsputil.h	/^    tpel_mc_func avg_tpel_pixels_tab[11]; \/\/FIXME individual func ptr per width?$/;"	m	struct:DSPContext
avpicture_alloc	imgconvert.c	/^int avpicture_alloc(AVPicture *picture,$/;"	f
avpicture_deinterlace	imgconvert.c	/^int avpicture_deinterlace(AVPicture *dst, const AVPicture *src,$/;"	f
avpicture_fill	imgconvert.c	/^int avpicture_fill(AVPicture *picture, uint8_t *ptr,$/;"	f
avpicture_free	imgconvert.c	/^void avpicture_free(AVPicture *picture)$/;"	f
avpicture_get_size	imgconvert.c	/^int avpicture_get_size(int pix_fmt, int width, int height)$/;"	f
avpicture_layout	imgconvert.c	/^int avpicture_layout(const AVPicture* src, int pix_fmt, int width, int height,$/;"	f
b	g726.c	/^	 int b[6];            \/**< sixth order predictor coeffs *\/$/;"	m	struct:G726Context	file:
b	i386/mmx.h	/^	char			b[8];	\/* 8 Byte (8-bit) values *\/$/;"	m
b0	snow.c	/^    DWTELEM *b0;$/;"	m	file:
b00	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used b00= 		0x0000000000000000LL;$/;"	v	file:
b01	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used b01= 		0x0101010101010101LL;$/;"	v	file:
b02	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used b02= 		0x0202020202020202LL;$/;"	v	file:
b08	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used b08= 		0x0808080808080808LL;$/;"	v	file:
b1	snow.c	/^    DWTELEM *b1;$/;"	m	file:
b2	snow.c	/^    DWTELEM *b2;$/;"	m	file:
b3	snow.c	/^    DWTELEM *b3;$/;"	m	file:
b4_stride	mpegvideo.h	/^    int b4_stride;             \/\/\/< 4*mb_width+1 used for some 4x4 block arrays to allow simple addressng$/;"	m	struct:MpegEncContext
b80	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used b80= 		0x8080808080808080LL;$/;"	v	file:
b8_stride	h264.c	/^    int b8_stride;$/;"	m	struct:H264Context	file:
b8_stride	mpegvideo.h	/^    int b8_stride;             \/\/\/< 2*mb_width+1 used for some 8x8 block arrays to allow simple addressng$/;"	m	struct:MpegEncContext
b_back_mv_table	mpegvideo.h	/^    int16_t (*b_back_mv_table)[2];       \/\/\/< MV table (1MV per MB) backward mode b-frame encoding $/;"	m	struct:MpegEncContext
b_back_mv_table_base	mpegvideo.h	/^    int16_t (*b_back_mv_table_base)[2];$/;"	m	struct:MpegEncContext
b_bidir_back_mv_table	mpegvideo.h	/^    int16_t (*b_bidir_back_mv_table)[2]; \/\/\/< MV table (1MV per MB) bidir mode b-frame encoding $/;"	m	struct:MpegEncContext
b_bidir_back_mv_table_base	mpegvideo.h	/^    int16_t (*b_bidir_back_mv_table_base)[2]; $/;"	m	struct:MpegEncContext
b_bidir_forw_mv_table	mpegvideo.h	/^    int16_t (*b_bidir_forw_mv_table)[2]; \/\/\/< MV table (1MV per MB) bidir mode b-frame encoding $/;"	m	struct:MpegEncContext
b_bidir_forw_mv_table_base	mpegvideo.h	/^    int16_t (*b_bidir_forw_mv_table_base)[2]; $/;"	m	struct:MpegEncContext
b_code	mpegvideo.h	/^    int b_code;                 \/\/\/< backward MV resolution for B Frames (mpeg4) $/;"	m	struct:MpegEncContext
b_code	mpegvideo.h	/^    int b_code;$/;"	m	struct:RateControlEntry
b_count	mpegvideo.h	/^    int b_count;$/;"	m	struct:MpegEncContext
b_direct_mv_table	mpegvideo.h	/^    int16_t (*b_direct_mv_table)[2];     \/\/\/< MV table (1MV per MB) direct mode b-frame encoding $/;"	m	struct:MpegEncContext
b_direct_mv_table_base	mpegvideo.h	/^    int16_t (*b_direct_mv_table_base)[2];$/;"	m	struct:MpegEncContext
b_field_mv_table	mpegvideo.h	/^    int16_t (*b_field_mv_table[2][2][2])[2];\/\/\/< MV table (4MV per MB) interlaced b-frame encoding$/;"	m	struct:MpegEncContext
b_field_mv_table_base	mpegvideo.h	/^    int16_t (*b_field_mv_table_base[2][2][2])[2];$/;"	m	struct:MpegEncContext
b_field_select_table	mpegvideo.h	/^    uint8_t (*b_field_select_table[2][2]);$/;"	m	struct:MpegEncContext
b_forw_mv_table	mpegvideo.h	/^    int16_t (*b_forw_mv_table)[2];       \/\/\/< MV table (1MV per MB) forward mode b-frame encoding $/;"	m	struct:MpegEncContext
b_forw_mv_table_base	mpegvideo.h	/^    int16_t (*b_forw_mv_table_base)[2];$/;"	m	struct:MpegEncContext
b_frame_score	mpegvideo.h	/^    int b_frame_score;          \/* *\/$/;"	m	struct:Picture
b_frame_strategy	avcodec.h	/^    int b_frame_strategy;$/;"	m	struct:AVCodecContext
b_frames_since_non_b	mpegvideo.h	/^    int b_frames_since_non_b;  \/\/\/< used for encoding, relative to not yet reordered input $/;"	m	struct:MpegEncContext
b_height	snow.c	/^    int b_height;$/;"	m	struct:SnowContext	file:
b_mb_type_info	h264data.h	/^static const PMbInfo b_mb_type_info[23]={$/;"	v
b_quant_factor	avcodec.h	/^    float b_quant_factor;$/;"	m	struct:AVCodecContext
b_quant_offset	avcodec.h	/^    float b_quant_offset;$/;"	m	struct:AVCodecContext
b_scratchpad	mpegvideo.h	/^    uint8_t *b_scratchpad;        \/\/\/< scratchpad used for writing into write only buffers$/;"	m	struct:MpegEncContext
b_stride	h264.c	/^    int b_stride; \/\/FIXME use s->b4_stride$/;"	m	struct:H264Context	file:
b_sub_mb_type_info	h264data.h	/^static const PMbInfo b_sub_mb_type_info[13]={$/;"	v
b_width	snow.c	/^    int b_width;$/;"	m	struct:SnowContext	file:
ba	liba52/a52_internal.h	/^    ba_t ba[5];			\/* channel bit allocation parameters *\/$/;"	m	struct:a52_state_s
ba_t	liba52/a52_internal.h	/^} ba_t;$/;"	t
backup_duplicate_context	mpegvideo.c	/^static void backup_duplicate_context(MpegEncContext *bak, MpegEncContext *src){$/;"	f	file:
backup_mb_border	h264.c	/^static inline void backup_mb_border(H264Context *h, uint8_t *src_y, uint8_t *src_cb, uint8_t *src_cr, int linesize, int uvlinesize){$/;"	f	file:
bai	liba52/a52_internal.h	/^    uint16_t bai;		\/* bit allocation information *\/$/;"	m	struct:a52_state_s
bai	liba52/a52_internal.h	/^    uint8_t bai;		\/* fine SNR offset, fast gain *\/$/;"	m
band	snow.c	/^    SubBand band[MAX_DECOMPOSITIONS][4];$/;"	m	struct:Plane	file:
band_index_long	mpegaudiodec.c	/^static uint16_t band_index_long[9][23];$/;"	v	file:
band_size_long	mpegaudiodectab.h	/^const uint8_t band_size_long[9][22] = {$/;"	v
band_size_short	mpegaudiodectab.h	/^const uint8_t band_size_short[9][13] = {$/;"	v
bap	liba52/a52_internal.h	/^    int8_t bap[256];		\/* derived channel bit allocation *\/$/;"	m
baptab	ac3tab.h	/^static const uint8_t baptab[64]= {$/;"	v
baptab	liba52/bit_allocate.c	/^static int8_t baptab[305] = {$/;"	v	file:
base	utils.c	/^    uint8_t *base[4];$/;"	m	struct:InternalBuffer	file:
baseDcDiff	libpostproc/postprocess_internal.h	/^	int baseDcDiff;$/;"	m	struct:PPMode
basis	mpegvideo.c	/^static int16_t basis[64][64];$/;"	v	file:
bastardized_rice_decompress	alac.c	/^void bastardized_rice_decompress(ALACContext *alac,$/;"	f
be2me_16	bswap.h	127;"	d
be2me_16	bswap.h	134;"	d
be2me_32	bswap.h	128;"	d
be2me_32	bswap.h	135;"	d
be2me_64	bswap.h	129;"	d
be2me_64	bswap.h	136;"	d
benaphore	beosthread.c	/^struct benaphore {$/;"	s	file:
bessel	resample2.c	/^double bessel(double x){$/;"	f
besselI0	liba52/imdct.c	/^static double besselI0 (double x)$/;"	f	file:
best_bits	mpegvideo.h	/^    int best_bits;$/;"	m	struct:MotionEstContext
best_mb	mpegvideo.h	/^    uint8_t *best_mb;$/;"	m	struct:MotionEstContext
beta_table	h264data.h	/^static const int beta_table[52] = {$/;"	v
bfraction	vc9.c	/^    int16_t bfraction;    \/\/\/< Relative position % anchors=> how to scale MVs$/;"	m	struct:VC9Context	file:
bgr32	huffyuv.c	/^    int bgr32;                              \/\/use bgr32 instead of bgr24$/;"	m	struct:HYuvContext	file:
bias	ffv1.c	/^    int8_t bias;$/;"	m	struct:VlcState	file:
bias	liba52/a52_internal.h	/^    sample_t bias;		\/* output bias *\/$/;"	m	struct:a52_state_s
bidir_refine	motion_est.c	/^static inline int bidir_refine(MpegEncContext * s, int mb_x, int mb_y)$/;"	f	file:
big_values	mpegaudiodec.c	/^    int big_values;$/;"	m	struct:GranuleDef	file:
bit	dsputil.h	/^    me_cmp_func bit[5];$/;"	m	struct:DSPContext
bit8x8_c	dsputil.c	/^static int bit8x8_c(\/*MpegEncContext*\/ void *c, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
bit_alloc	ac3enc.c	/^    AC3BitAllocParameters bit_alloc;$/;"	m	struct:AC3EncodeContext	file:
bit_alloc	ac3enc.c	/^static int bit_alloc(AC3EncodeContext *s,$/;"	f	file:
bit_buffer	g726.c	/^   int bit_buffer;$/;"	m	struct:AVG726Context	file:
bit_copy	dv.c	/^static inline void bit_copy(PutBitContext *pb, GetBitContext *gb)$/;"	f	file:
bit_count	bitstream.h	/^    int bit_count;$/;"	m	struct:GetBitContext
bit_depth	png.c	/^    int bit_depth;$/;"	m	struct:PNGContext	file:
bit_rate	ac3enc.c	/^    int bit_rate;$/;"	m	struct:AC3EncodeContext	file:
bit_rate	avcodec.h	/^    int bit_rate;$/;"	m	struct:AVCodecContext
bit_rate	mpegaudio.c	/^    int freq, bit_rate;$/;"	m	struct:MpegAudioContext	file:
bit_rate	mpegaudiodec.c	/^    int bit_rate;$/;"	m	struct:MPADecodeContext	file:
bit_rate	mpegvideo.h	/^    int bit_rate;     \/\/\/< wanted bit rate $/;"	m	struct:MpegEncContext
bit_rate	wmadec.c	/^    int bit_rate;$/;"	m	struct:WMADecodeContext	file:
bit_rate_exponent	vc9.c	/^    uint8_t bit_rate_exponent;$/;"	m	struct:VC9Context	file:
bit_rate_tolerance	avcodec.h	/^    int bit_rate_tolerance; $/;"	m	struct:AVCodecContext
bit_size	dv.c	/^    int bit_size[4];$/;"	m	struct:EncBlockInfo	file:
bitcopy_n	imgconvert.c	/^static inline unsigned int bitcopy_n(unsigned int a, int n)$/;"	f	file:
bitindex	shorten.c	/^    int bitindex;$/;"	m	struct:ShortenContext	file:
bitinv32	mpegaudiotab.h	/^static const int bitinv32[32] = {$/;"	v
bitplane_decoding	vc9.c	/^static int bitplane_decoding(BitPlane *bp, VC9Context *v)$/;"	f	file:
bitrate_index	mpegaudio.c	/^    int bitrate_index; \/* bit rate *\/$/;"	m	struct:MpegAudioContext	file:
bitrtq_postproc	vc9.c	/^    int bitrtq_postproc;  \/\/\/< 5bits, quantized framerate-based postprocessing strength$/;"	m	struct:VC9Context	file:
bits	bitstream.h	/^    int bits;$/;"	m	struct:VLC
bits	g726.c	/^	int  bits;            \/**< bits per sample *\/$/;"	m	struct:G726Tables	file:
bits	huffyuv.c	/^    uint32_t bits[3][256];$/;"	m	struct:HYuvContext	file:
bits	mjpeg.c	/^    int bits;           \/* bits per component *\/$/;"	m	struct:MJpegDecodeContext	file:
bits	mpegaudiodec.c	/^    const uint8_t *bits;$/;"	m	struct:HuffTable	file:
bits	vmdav.c	/^    int bits;$/;"	m	struct:VmdAudioContext	file:
bits2qp	ratecontrol.c	/^static inline double bits2qp(RateControlEntry *rce, double bits){$/;"	f	file:
bits_ac_chrominance	mjpeg.c	/^static const uint8_t bits_ac_chrominance[17] =$/;"	v	file:
bits_ac_luminance	mjpeg.c	/^static const uint8_t bits_ac_luminance[17] =$/;"	v	file:
bits_dc_chrominance	mjpeg.c	/^static const uint8_t bits_dc_chrominance[17] =$/;"	v	file:
bits_dc_luminance	mjpeg.c	/^static const uint8_t bits_dc_luminance[17] =$/;"	v	file:
bits_left	g726.c	/^   int bits_left;$/;"	m	struct:AVG726Context	file:
bits_left	liba52/a52_internal.h	/^    uint32_t bits_left;$/;"	m	struct:a52_state_s
bits_per_pixel	png.c	/^    int bits_per_pixel;$/;"	m	struct:PNGContext	file:
bits_per_sample	avcodec.h	/^     int bits_per_sample;$/;"	m	struct:AVCodecContext
bits_to_store	sonic.c	/^static int bits_to_store(uint64_t x)$/;"	f	file:
bitshift	shorten.c	/^    int bitshift;$/;"	m	struct:ShortenContext	file:
bitstream	flac.c	/^    uint8_t *bitstream;$/;"	m	struct:FLACContext	file:
bitstream	shorten.c	/^    uint8_t *bitstream;$/;"	m	struct:ShortenContext	file:
bitstream_bpp	huffyuv.c	/^    int bitstream_bpp;$/;"	m	struct:HYuvContext	file:
bitstream_buffer	4xm.c	/^    uint8_t *bitstream_buffer;$/;"	m	struct:FourXContext	file:
bitstream_buffer	asv1.c	/^    uint8_t *bitstream_buffer;$/;"	m	struct:ASV1Context	file:
bitstream_buffer	huffyuv.c	/^    uint8_t *bitstream_buffer;$/;"	m	struct:HYuvContext	file:
bitstream_buffer	mdec.c	/^    uint8_t *bitstream_buffer;$/;"	m	struct:MDECContext	file:
bitstream_buffer	mpegvideo.h	/^    uint8_t *bitstream_buffer; \/\/Divx 5.01 puts several frames in a single one, this is used to reorder them$/;"	m	struct:MpegEncContext
bitstream_buffer_size	4xm.c	/^    int bitstream_buffer_size;$/;"	m	struct:FourXContext	file:
bitstream_buffer_size	asv1.c	/^    int bitstream_buffer_size;$/;"	m	struct:ASV1Context	file:
bitstream_buffer_size	huffyuv.c	/^    int bitstream_buffer_size;$/;"	m	struct:HYuvContext	file:
bitstream_buffer_size	mdec.c	/^    int bitstream_buffer_size;$/;"	m	struct:MDECContext	file:
bitstream_buffer_size	mpegvideo.h	/^    int bitstream_buffer_size;$/;"	m	struct:MpegEncContext
bitstream_fill_current	liba52/bitstream.c	/^static inline void bitstream_fill_current (a52_state_t * state)$/;"	f	file:
bitstream_get	liba52/bitstream.h	/^static inline uint32_t bitstream_get (a52_state_t * state, uint32_t num_bits)$/;"	f
bitstream_get_2	liba52/bitstream.h	/^static inline int32_t bitstream_get_2 (a52_state_t * state, uint32_t num_bits)$/;"	f
bitstream_index	flac.c	/^    int bitstream_index;$/;"	m	struct:FLACContext	file:
bitstream_index	shorten.c	/^    int bitstream_index;$/;"	m	struct:ShortenContext	file:
bitstream_restriction_flag	h264.c	/^    int bitstream_restriction_flag;$/;"	m	struct:SPS	file:
bitstream_size	flac.c	/^    int bitstream_size;$/;"	m	struct:FLACContext	file:
bitstream_size	shorten.c	/^    int bitstream_size;$/;"	m	struct:ShortenContext	file:
biweight_h264_pixels_tab	dsputil.h	/^    h264_biweight_func biweight_h264_pixels_tab[10];$/;"	m	struct:DSPContext
blah	a52dec.c	/^static inline int blah (int32_t i)$/;"	f	file:
blah	ac3dec.c	/^static inline int blah (int32_t i)$/;"	f	file:
block	4xm.c	/^    DCTELEM __align8 block[6][64];$/;"	m	struct:FourXContext	file:
block	asv1.c	/^    DCTELEM __align8 block[6][64];$/;"	m	struct:ASV1Context	file:
block	dct-test.c	/^static DCTELEM block[64] __attribute__ ((aligned (8)));$/;"	v	file:
block	mdec.c	/^    DCTELEM __align8 block[6][64];$/;"	m	struct:MDECContext	file:
block	mpegvideo.h	/^    DCTELEM (*block)[64]; \/\/\/< points to one of the following blocks $/;"	m	struct:MpegEncContext
block	snow.c	/^    BlockNode *block;$/;"	m	struct:SnowContext	file:
block1	dct-test.c	/^static DCTELEM block1[64] __attribute__ ((aligned (8)));$/;"	v	file:
blockCopy	libpostproc/postprocess_template.c	/^static inline void RENAME(blockCopy)(uint8_t dst[], int dstStride, uint8_t src[], int srcStride,$/;"	f	file:
block_align	avcodec.h	/^    int block_align; \/\/\/< used by some WAV based audio codecs$/;"	m	struct:AVCodecContext
block_align	sonic.c	/^    int channels, samplerate, block_align, frame_size;$/;"	m	struct:SonicContext	file:
block_align	vmdav.c	/^    int block_align;$/;"	m	struct:VmdAudioContext	file:
block_align	wmadec.c	/^    int block_align;$/;"	m	struct:WMADecodeContext	file:
block_coords	ulti.c	/^static int block_coords[8] = \/\/ 4x4 block coords in 8x8 superblock$/;"	v	file:
block_height	truemotion1.c	/^    int block_height; \/\/ hres$/;"	m	struct:comp_types	file:
block_height	truemotion1.c	/^    int block_height;$/;"	m	struct:TrueMotion1Context	file:
block_idx_x	h264.c	/^static const uint8_t block_idx_x[16] = {$/;"	v	file:
block_idx_xy	h264.c	/^static const uint8_t block_idx_xy[4][4] = {$/;"	v	file:
block_idx_y	h264.c	/^static const uint8_t block_idx_y[16] = {$/;"	v	file:
block_index	mpegvideo.h	/^    int block_index[6]; \/\/\/< index to current MB in block based arrays with edges$/;"	m	struct:MpegEncContext
block_last_index	mdec.c	/^    int block_last_index[6];$/;"	m	struct:MDECContext	file:
block_last_index	mpegvideo.h	/^    int block_last_index[12];  \/\/\/< last non zero coefficient in block$/;"	m	struct:MpegEncContext
block_len	wmadec.c	/^    int block_len; \/* block length in samples *\/$/;"	m	struct:WMADecodeContext	file:
block_len_bits	wmadec.c	/^    int block_len_bits; \/* log2 of current block length *\/$/;"	m	struct:WMADecodeContext	file:
block_max_depth	snow.c	/^    int block_max_depth;$/;"	m	struct:SnowContext	file:
block_num	wmadec.c	/^    int block_num; \/* block number in current frame *\/$/;"	m	struct:WMADecodeContext	file:
block_offset	h264.c	/^    int block_offset[2*(16+8)];$/;"	m	struct:H264Context	file:
block_org	dct-test.c	/^static DCTELEM block_org[64] __attribute__ ((aligned (8)));$/;"	v	file:
block_pos	wmadec.c	/^    int block_pos; \/* current position in frame *\/$/;"	m	struct:WMADecodeContext	file:
block_sizes	dv.c	/^static const uint16_t block_sizes[6] = {$/;"	v	file:
block_state	snow.c	/^    uint8_t block_state[128 + 32*128];$/;"	m	struct:SnowContext	file:
block_type	mpegaudiodec.c	/^    uint8_t block_type;$/;"	m	struct:GranuleDef	file:
block_type	truemotion1.c	/^    int block_type;$/;"	m	struct:TrueMotion1Context	file:
block_type	truemotion1.c	/^    int block_type;$/;"	m	struct:comp_types	file:
block_type_tab	4xm.c	/^static const uint8_t block_type_tab[4][8][2]={$/;"	v	file:
block_type_vlc	4xm.c	/^static VLC block_type_vlc[4];$/;"	v	file:
block_width	truemotion1.c	/^    int block_width; \/\/ vres$/;"	m	struct:comp_types	file:
block_width	truemotion1.c	/^    int block_width;$/;"	m	struct:TrueMotion1Context	file:
block_wrap	mpegvideo.h	/^    int block_wrap[6];$/;"	m	struct:MpegEncContext
blocks	mpegvideo.h	/^    DCTELEM (*blocks)[6][64]; \/\/ for HQ mode we need to keep the best block$/;"	m	struct:MpegEncContext
blocks	ulti.c	/^    int width, height, blocks;$/;"	m	struct:UltimotionDecodeContext	file:
blocksize	flac.c	/^    int blocksize\/*, last_blocksize*\/;$/;"	m	struct:FLACContext	file:
blocksize	shorten.c	/^    int blocksize;$/;"	m	struct:ShortenContext	file:
blocksize_table	flac.c	/^static int blocksize_table[] = {$/;"	v	file:
bndsz	ac3tab.h	/^static const uint8_t bndsz[50]={$/;"	v
bndtab	ac3tab.h	/^static uint8_t bndtab[51]; $/;"	v
bndtab	liba52/bit_allocate.c	/^static int bndtab[30] = {21, 22,  23,  24,  25,  26,  27,  28,  31,  34,$/;"	v	file:
bone	i386/motion_est_mmx.c	/^static attribute_used __attribute__ ((aligned(8))) uint64_t bone= 0x0101010101010101LL;$/;"	v	file:
border_masking	avcodec.h	/^    float border_masking;$/;"	m	struct:AVCodecContext
bottomBand	imgresample.c	/^    int topBand, bottomBand, leftBand, rightBand;$/;"	m	struct:ImgReSampleContext	file:
bottom_field	mjpeg.c	/^    int bottom_field;   \/* true if bottom field *\/$/;"	m	struct:MJpegDecodeContext	file:
bottomrightx	vc9.c	/^    uint16_t bottomrightx;$/;"	m	struct:VC9Context	file:
bottomrighty	vc9.c	/^    uint16_t bottomrighty;$/;"	m	struct:VC9Context	file:
bpp	png.c	/^    int bpp;$/;"	m	struct:PNGContext	file:
bpp	tscc.c	/^    int bpp;$/;"	m	struct:TsccContext	file:
bps	flac.c	/^    int bps, curr_bps;$/;"	m	struct:FLACContext	file:
broadcast	vc9.c	/^    int broadcast;        \/\/\/< TFF\/RFF present$/;"	m	struct:VC9Context	file:
broken_link	mpegvideo.h	/^    int broken_link;         \/\/\/< no_output_of_prior_pics_flag$/;"	m	struct:MpegEncContext
bsid	ac3enc.c	/^    unsigned int bsid;$/;"	m	struct:AC3EncodeContext	file:
bsmod	ac3enc.c	/^    unsigned int bsmod;$/;"	m	struct:AC3EncodeContext	file:
bswap_16	bswap.h	27;"	d
bswap_16	bswap.h	79;"	d
bswap_16	bswap.h	98;"	d
bswap_32	bswap.h	102;"	d
bswap_32	bswap.h	43;"	d
bswap_32	bswap.h	80;"	d
bswap_64	bswap.h	117;"	d
bswap_64	bswap.h	61;"	d
bswap_64	bswap.h	94;"	d
bswap_buf	dsputil.c	/^static void bswap_buf(uint32_t *dst, uint32_t *src, int w){$/;"	f	file:
bswap_buf	dsputil.h	/^    void (*bswap_buf)(uint32_t *dst, uint32_t *src, int w);$/;"	m	struct:DSPContext
bswap_buf_mlib	mlib/dsputil_mlib.c	/^static void bswap_buf_mlib(uint32_t *dst, uint32_t *src, int w)$/;"	f	file:
btype2mb_type	mpeg12data.h	/^static const uint32_t btype2mb_type[11] = {$/;"	v
buf	bitstream.h	/^    uint8_t *buf, *buf_end;$/;"	m	struct:PutBitContext
buf	dv.c	/^    uint8_t *buf;$/;"	m	struct:DVVideoContext	file:
buf	idcinvideo.c	/^    unsigned char *buf;$/;"	m	struct:IdcinContext	file:
buf	interplayvideo.c	/^    unsigned char *buf;$/;"	m	struct:IpvideoContext	file:
buf	msrle.c	/^    unsigned char *buf;$/;"	m	struct:MsrleContext	file:
buf	msvideo1.c	/^    unsigned char *buf;$/;"	m	struct:Msvideo1Context	file:
buf	png.c	/^    uint8_t buf[IOBUF_SIZE];$/;"	m	struct:PNGContext	file:
buf	qtrle.c	/^    unsigned char *buf;$/;"	m	struct:QtrleContext	file:
buf	roqvideo.c	/^    unsigned char *buf;$/;"	m	struct:RoqContext	file:
buf	rpza.c	/^    unsigned char *buf;$/;"	m	struct:RpzaContext	file:
buf	smc.c	/^    unsigned char *buf;$/;"	m	struct:SmcContext	file:
buf	snow.c	/^    DWTELEM *buf;$/;"	m	struct:SubBand	file:
buf	truemotion1.c	/^    uint8_t *buf;$/;"	m	struct:TrueMotion1Context	file:
buf	vmdav.c	/^    unsigned char *buf;$/;"	m	struct:VmdVideoContext	file:
buf	vqavideo.c	/^    unsigned char *buf;$/;"	m	struct:VqaContext	file:
buf	xan.c	/^    unsigned char *buf;$/;"	m	struct:XanContext	file:
buf_end	bitstream.h	/^    uint8_t *buf, *buf_end;$/;"	m	struct:PutBitContext
buffer	bitstream.h	/^    const uint8_t *buffer, *buffer_end;$/;"	m	struct:GetBitContext
buffer	mjpeg.c	/^    uint8_t *buffer;$/;"	m	struct:MJpegDecodeContext	file:
buffer	mp3lameaudio.c	/^        uint8_t buffer[BUFFER_SIZE];$/;"	m	struct:Mp3AudioContext	file:
buffer	mpegvideo.h	/^    uint8_t *buffer;$/;"	m	struct:ParseContext
buffer	oggvorbis.c	/^    uint8_t buffer[BUFFER_SIZE];$/;"	m	struct:OggVorbisContext	file:
buffer	ra144.c	/^	unsigned int buffer[5];$/;"	m	file:
buffer	raw.c	/^    unsigned char * buffer;  \/* block of memory for holding one frame *\/$/;"	m	struct:RawVideoContext	file:
buffer1	ra144.c	/^	int buffer1[10];$/;"	m	file:
buffer1	xan.c	/^    unsigned char *buffer1;$/;"	m	struct:XanContext	file:
buffer2	ra144.c	/^	int buffer2[10];$/;"	m	file:
buffer2	xan.c	/^    unsigned char *buffer2;$/;"	m	struct:XanContext	file:
buffer_2	ra144.c	/^	unsigned short int buffer_2[148];$/;"	m	file:
buffer_a	ra144.c	/^	unsigned short int buffer_a[40];$/;"	m	file:
buffer_b	ra144.c	/^	unsigned short int buffer_b[40];$/;"	m	file:
buffer_c	ra144.c	/^	unsigned short int buffer_c[40];$/;"	m	file:
buffer_d	ra144.c	/^	unsigned short int buffer_d[40];$/;"	m	file:
buffer_end	bitstream.h	/^    const uint8_t *buffer, *buffer_end;$/;"	m	struct:GetBitContext
buffer_fullness	vc9.c	/^    int buffer_fullness;  \/\/\/< HRD info$/;"	m	struct:VC9Context	file:
buffer_index	mp3lameaudio.c	/^        int buffer_index;$/;"	m	struct:Mp3AudioContext	file:
buffer_index	mpegvideo.h	/^    double buffer_index;          \/\/\/< amount of bits in the video\/audio buffer $/;"	m	struct:RateControlContext
buffer_index	oggvorbis.c	/^    int buffer_index;$/;"	m	struct:OggVorbisContext	file:
buffer_ptr	bitstream.h	/^    uint32_t *buffer_ptr;$/;"	m	struct:GetBitContext
buffer_ptr	bitstream.h	/^    uint8_t *buffer_ptr;$/;"	m	struct:GetBitContext
buffer_size	mjpeg.c	/^    int buffer_size;$/;"	m	struct:MJpegDecodeContext	file:
buffer_size	mpegvideo.h	/^    int buffer_size;$/;"	m	struct:ParseContext
buffer_size_exponent	vc9.c	/^    uint8_t buffer_size_exponent;$/;"	m	struct:VC9Context	file:
buffer_start	liba52/a52_internal.h	/^    uint32_t * buffer_start;$/;"	m	struct:a52_state_s
buggy_avid	mjpeg.c	/^    int buggy_avid;$/;"	m	struct:MJpegDecodeContext	file:
build_basis	mpegvideo.c	/^static void build_basis(uint8_t *perm){$/;"	f	file:
build_huffman_codes	mjpeg.c	/^static void build_huffman_codes(uint8_t *huff_size, uint16_t *huff_code,$/;"	f	file:
build_modpred	indeo3.c	/^static void build_modpred(Indeo3DecodeContext *s) $/;"	f	file:
build_rgb_palette	imgconvert.c	/^static void build_rgb_palette(uint8_t *palette, int has_alpha)$/;"	f	file:
build_table	bitstream.c	/^static int build_table(VLC *vlc, int table_nb_bits,$/;"	f	file:
build_vlc	mjpeg.c	/^static int build_vlc(VLC *vlc, const uint8_t *bits_table, const uint8_t *val_table, $/;"	f	file:
build_xlaw_table	pcm.c	/^static void build_xlaw_table(uint8_t *linear_to_xlaw, $/;"	f	file:
byte_offset_bits	wmadec.c	/^    int byte_offset_bits;$/;"	m	struct:WMADecodeContext	file:
bytecopy	xan.c	/^static inline void bytecopy(unsigned char *dest, unsigned char *src, int count)$/;"	f	file:
bytespersample	alac.c	/^    int bytespersample;$/;"	m	file:
bytestream	4xm.c	/^    uint8_t *bytestream;$/;"	m	struct:FourXContext	file:
bytestream	cabac.h	/^    const uint8_t *bytestream;$/;"	m	struct:CABACContext
bytestream	png.c	/^    uint8_t *bytestream;$/;"	m	struct:PNGContext	file:
bytestream	pnm.c	/^    uint8_t *bytestream;$/;"	m	struct:PNMContext	file:
bytestream	rangecoder.h	/^    uint8_t *bytestream;$/;"	m	struct:RangeCoder
bytestream_end	cabac.h	/^    const uint8_t *bytestream_end;$/;"	m	struct:CABACContext
bytestream_end	png.c	/^    uint8_t *bytestream_end;$/;"	m	struct:PNGContext	file:
bytestream_end	pnm.c	/^    uint8_t *bytestream_end;$/;"	m	struct:PNMContext	file:
bytestream_end	rangecoder.h	/^    uint8_t *bytestream_end;$/;"	m	struct:RangeCoder
bytestream_start	cabac.h	/^    const uint8_t *bytestream_start;$/;"	m	struct:CABACContext
bytestream_start	png.c	/^    uint8_t *bytestream_start;$/;"	m	struct:PNGContext	file:
bytestream_start	pnm.c	/^    uint8_t *bytestream_start;$/;"	m	struct:PNMContext	file:
bytestream_start	rangecoder.h	/^    uint8_t *bytestream_start;$/;"	m	struct:RangeCoder
c	fdctref.c	/^static double c[8][8]; \/* transform coefficients *\/$/;"	v	file:
c	ffv1.c	/^    RangeCoder c;$/;"	m	struct:FFV1Context	file:
c	g726.c	/^   G726Context c;$/;"	m	struct:AVG726Context	file:
c	imgresample.c	/^    unsigned char c[16];$/;"	m	file:
c	snow.c	/^    RangeCoder c;$/;"	m	struct:SnowContext	file:
c1	sh4/idct_sh4.c	22;"	d	file:
c1	sh4/idct_sh4.c	44;"	d	file:
c2	sh4/idct_sh4.c	23;"	d	file:
c2	sh4/idct_sh4.c	45;"	d	file:
c3	sh4/idct_sh4.c	24;"	d	file:
c3	sh4/idct_sh4.c	46;"	d	file:
c4	sh4/idct_sh4.c	25;"	d	file:
c4	sh4/idct_sh4.c	47;"	d	file:
c5	sh4/idct_sh4.c	26;"	d	file:
c5	sh4/idct_sh4.c	48;"	d	file:
c6	sh4/idct_sh4.c	27;"	d	file:
c6	sh4/idct_sh4.c	49;"	d	file:
c7	sh4/idct_sh4.c	28;"	d	file:
c7	sh4/idct_sh4.c	50;"	d	file:
c_ac_table_index	vc9.c	/^    int c_ac_table_index; \/\/\/< Chroma index from ACFRM element$/;"	m	struct:VC9Context	file:
c_block_height	svq1.c	/^    int c_block_height;$/;"	m	struct:SVQ1Context	file:
c_block_width	svq1.c	/^    int c_block_width;$/;"	m	struct:SVQ1Context	file:
c_ccir_to_jpeg	imgconvert.c	/^static uint8_t c_ccir_to_jpeg[256];$/;"	v	file:
c_dc_scale	mpegvideo.h	/^    int y_dc_scale, c_dc_scale;$/;"	m	struct:MpegEncContext
c_dc_scale_table	mpegvideo.h	/^    uint8_t *c_dc_scale_table;     \/\/\/< qscale -> c_dc_scale table $/;"	m	struct:MpegEncContext
c_jpeg_to_ccir	imgconvert.c	/^static uint8_t c_jpeg_to_ccir[256];$/;"	v	file:
c_predictor_table	truemotion1.c	/^    uint32_t c_predictor_table[1024];$/;"	m	struct:TrueMotion1Context	file:
c_stride	roqvideo.c	/^    int c_stride;$/;"	m	struct:RoqContext	file:
c_superblock_height	vp3.c	/^    int c_superblock_height;$/;"	m	struct:Vp3DecodeContext	file:
c_superblock_width	vp3.c	/^    int c_superblock_width;$/;"	m	struct:Vp3DecodeContext	file:
cabac	h264.c	/^    CABACContext cabac;$/;"	m	struct:H264Context	file:
cabac	h264.c	/^    int cabac;                  \/\/\/< entropy_coding_mode_flag$/;"	m	struct:PPS	file:
cabac_context_init_I	h264data.h	/^static const int cabac_context_init_I[399][2] =$/;"	v
cabac_context_init_PB	h264data.h	/^static const int cabac_context_init_PB[3][399][2] =$/;"	v
cabac_init_idc	h264.c	/^    int          cabac_init_idc;$/;"	m	struct:H264Context	file:
cabac_state	h264.c	/^    uint8_t      cabac_state[399];$/;"	m	struct:H264Context	file:
cache	bitstream.h	/^    uint32_t cache;$/;"	m	struct:GetBitContext
cache0	bitstream.h	/^    uint32_t cache0;$/;"	m	struct:GetBitContext
cache1	bitstream.h	/^    uint32_t cache1;$/;"	m	struct:GetBitContext
calc_exp_diff	ac3enc.c	/^static int calc_exp_diff(uint8_t *exp1, uint8_t *exp2, int n)$/;"	f	file:
calc_lowcomp	ac3enc.c	/^static inline int calc_lowcomp(int a, int b0, int b1, int bin)$/;"	f	file:
calc_lowcomp1	ac3enc.c	/^static inline int calc_lowcomp1(int a, int b0, int b1)$/;"	f	file:
calculate_vissual_weight	snow.c	/^static void calculate_vissual_weight(SnowContext *s, Plane *p){$/;"	f	file:
canjump	ppc/dsputil_altivec.c	/^static volatile sig_atomic_t canjump = 0;$/;"	v	file:
canjump	sparc/dsputil_vis.c	/^static volatile sig_atomic_t canjump = 0;$/;"	v	file:
capabilities	avcodec.h	/^    int capabilities;$/;"	m	struct:AVCodec
cbp	h264data.h	/^    uint8_t cbp;$/;"	m	struct:IMbInfo
cbp_table	h264.c	/^    uint16_t     *cbp_table;$/;"	m	struct:H264Context	file:
cbp_table	mpegvideo.h	/^    uint8_t *cbp_table;           \/\/\/< used to store cbp, ac_pred for partitioned decoding $/;"	m	struct:MpegEncContext
cbp_table_index	wmv2.c	/^    int cbp_table_index;$/;"	m	struct:Wmv2Context	file:
cbpc_b_tab	h263data.h	/^const uint8_t cbpc_b_tab[4][2] = {$/;"	v
cbpc_b_vlc	h263.c	/^static VLC cbpc_b_vlc;$/;"	v	file:
cbpcy_vlc	vc9.c	/^    VLC *cbpcy_vlc;               \/\/\/< CBPCY VLC table$/;"	m	struct:VC9Context	file:
cbpy_tab	h263data.h	/^const uint8_t cbpy_tab[16][2] =$/;"	v
cbpy_vlc	h263.c	/^static VLC cbpy_vlc;$/;"	v	file:
cbpy_vlc	msmpeg4.c	/^static VLC cbpy_vlc;$/;"	v	file:
ccp_tab	asv1.c	/^static const uint8_t ccp_tab[17][2]={$/;"	v	file:
ccp_vlc	asv1.c	/^static VLC ccp_vlc;$/;"	v	file:
cdt	truemotion1.c	/^    int16_t cdt[8];$/;"	m	struct:TrueMotion1Context	file:
cdt1	truemotion1data.h	/^static int16_t cdt1[8] = { 0, -1, 1, -2, 3, -4, 5, -4 };$/;"	v
cdt2	truemotion1data.h	/^static int16_t cdt2[8] = { 0, -4, 3, -16, 20, -32, 36, -32 };$/;"	v
cdt3	truemotion1data.h	/^static int16_t cdt3[8] = { 0, -2, 2, -8, 8, -18, 18, -40 };$/;"	v
cdts	truemotion1data.h	/^static int16_t *cdts[] = { cdt1, cdt2, cdt3, cdt3, NULL };$/;"	v
cells	roqvideo.c	/^    roq_cell cells[256];$/;"	m	struct:RoqContext	file:
cfrm	4xm.c	/^    CFrameBuffer cfrm[CFRAME_BUFFER_COUNT];$/;"	m	struct:FourXContext	file:
chan_cfg	mpegaudiodec.c	/^    int chan_cfg; \/\/\/< channel config number$/;"	m	struct:MP3On4DecodeContext	file:
chan_offset	mpegaudiodec.c	/^static int chan_offset[9][5] = {$/;"	v	file:
channel	adpcm.c	/^    int channel; \/* for stereo MOVs, decode left, then decode right, then tell it's decoded *\/$/;"	m	struct:ADPCMContext	file:
channel_coded	wmadec.c	/^    uint8_t channel_coded[MAX_CHANNELS]; \/* true if channel is coded *\/$/;"	m	struct:WMADecodeContext	file:
channels	a52dec.c	/^    int channels;$/;"	m	struct:AC3DecodeState	file:
channels	ac3dec.c	/^    int channels;$/;"	m	struct:AC3DecodeState	file:
channels	avcodec.h	/^    int channels;$/;"	m	struct:AVCodecContext
channels	dpcm.c	/^    int channels;$/;"	m	struct:DPCMContext	file:
channels	flac.c	/^    int samplerate, channels;$/;"	m	struct:FLACContext	file:
channels	png.c	/^    int channels;$/;"	m	struct:PNGContext	file:
channels	shorten.c	/^    int channels;$/;"	m	struct:ShortenContext	file:
channels	sonic.c	/^    int channels, samplerate, block_align, frame_size;$/;"	m	struct:SonicContext	file:
channels	vmdav.c	/^    int channels;$/;"	m	struct:VmdAudioContext	file:
channels_multi	dtsdec.c	/^channels_multi (int flags)$/;"	f	file:
chbwcod	ac3enc.c	/^    unsigned int chbwcod[AC3_MAX_CHANNELS];$/;"	m	struct:AC3EncodeContext	file:
check	motion_est_template.c	545;"	d	file:
check_bidir_mv	motion_est.c	/^static inline int check_bidir_mv(MpegEncContext * s,$/;"	f	file:
check_dcbzl_effect	ppc/dsputil_ppc.c	/^long check_dcbzl_effect(void)$/;"	f
check_diff	fft-test.c	/^void check_diff(float *tab1, float *tab2, int n)$/;"	f
check_input_motion	motion_est.c	/^static inline int check_input_motion(MpegEncContext * s, int mb_x, int mb_y, int p_type){$/;"	f	file:
check_intra4x4_pred_mode	h264.c	/^static inline int check_intra4x4_pred_mode(H264Context *h){$/;"	f	file:
check_intra_pred_mode	h264.c	/^static inline int check_intra_pred_mode(H264Context *h, int mode){$/;"	f	file:
check_marker	bitstream.c	/^int check_marker(GetBitContext *s, const char *msg)$/;"	f
checked	motion_est.c	/^    int checked;$/;"	m	struct:Minima	file:
checksum	truemotion1.c	/^    uint16_t checksum;$/;"	m	struct:frame_header	file:
checksum_table	svq1.c	/^static const uint16_t checksum_table[256] = {$/;"	v	file:
children	idcinvideo.c	/^  int children[2];$/;"	m	file:
chincpl	liba52/a52_internal.h	/^    uint8_t chincpl;		\/* channel coupled *\/$/;"	m	struct:a52_state_s
chomp3	mace.c	/^static void chomp3(MACEContext *ctx,$/;"	f	file:
chomp6	mace.c	/^static void chomp6(MACEContext *ctx,$/;"	f	file:
chromDefault	libpostproc/postprocess_internal.h	/^	int chromDefault; 	\/\/\/< is chrominance filtering on by default if this filter is manually activated$/;"	m	struct:PPFilter
chromMode	libpostproc/postprocess_internal.h	/^	int chromMode; 			\/\/\/< acivates filters for chrominance$/;"	m	struct:PPMode
chroma_420_type	mpegvideo.h	/^    int chroma_420_type;$/;"	m	struct:MpegEncContext
chroma_4mv_motion	mpegvideo.c	/^static inline void chroma_4mv_motion(MpegEncContext *s,$/;"	f	file:
chroma_4mv_motion_lowres	mpegvideo.c	/^static inline void chroma_4mv_motion_lowres(MpegEncContext *s,$/;"	f	file:
chroma_dc_coeff_token_bits	h264data.h	/^static const uint8_t chroma_dc_coeff_token_bits[4*5]={$/;"	v
chroma_dc_coeff_token_len	h264data.h	/^static const uint8_t chroma_dc_coeff_token_len[4*5]={$/;"	v
chroma_dc_coeff_token_vlc	h264.c	/^static VLC chroma_dc_coeff_token_vlc;$/;"	v	file:
chroma_dc_dequant_idct_c	h264.c	/^static void chroma_dc_dequant_idct_c(DCTELEM *block, int qp){$/;"	f	file:
chroma_dc_scan	h264data.h	/^static const uint8_t chroma_dc_scan[4]={$/;"	v
chroma_dc_total_zeros_bits	h264data.h	/^static const uint8_t chroma_dc_total_zeros_bits[3][4]= {$/;"	v
chroma_dc_total_zeros_len	h264data.h	/^static const uint8_t chroma_dc_total_zeros_len[3][4]= {$/;"	v
chroma_dc_total_zeros_vlc	h264.c	/^static VLC chroma_dc_total_zeros_vlc[3];$/;"	v	file:
chroma_dc_vlc_length	mpegvideo.h	/^    uint8_t *chroma_dc_vlc_length;$/;"	m	struct:MpegEncContext
chroma_elim_threshold	avcodec.h	/^    int chroma_elim_threshold;$/;"	m	struct:AVCodecContext
chroma_elim_threshold	mpegvideo.h	/^    int chroma_elim_threshold;$/;"	m	struct:MpegEncContext
chroma_format	mpegvideo.h	/^    int chroma_format;$/;"	m	struct:MpegEncContext
chroma_h_shift	ffv1.c	/^    int chroma_h_shift, chroma_v_shift;$/;"	m	struct:FFV1Context	file:
chroma_h_shift	snow.c	/^    int chroma_h_shift;$/;"	m	struct:SnowContext	file:
chroma_inter_matrix	mpegvideo.h	/^    uint16_t chroma_inter_matrix[64];$/;"	m	struct:MpegEncContext
chroma_intra_matrix	mpegvideo.h	/^    uint16_t chroma_intra_matrix[64];$/;"	m	struct:MpegEncContext
chroma_log2_weight_denom	h264.c	/^    int chroma_log2_weight_denom;$/;"	m	struct:H264Context	file:
chroma_offset	h264.c	/^    int chroma_offset[2][16][2];$/;"	m	struct:H264Context	file:
chroma_pred_mode	h264.c	/^    int chroma_pred_mode;$/;"	m	struct:H264Context	file:
chroma_pred_mode_table	h264.c	/^    uint8_t     *chroma_pred_mode_table;$/;"	m	struct:H264Context	file:
chroma_qp	h264.c	/^    int chroma_qp; \/\/QPc$/;"	m	struct:H264Context	file:
chroma_qp	h264data.h	/^static const uint8_t chroma_qp[52]={$/;"	v
chroma_qp_index_offset	h264.c	/^    int chroma_qp_index_offset;$/;"	m	struct:PPS	file:
chroma_qscale	mpegvideo.h	/^    int chroma_qscale;          \/\/\/< chroma QP $/;"	m	struct:MpegEncContext
chroma_qscale_table	mpegvideo.h	/^    const uint8_t *chroma_qscale_table;  \/\/\/< qscale -> chroma_qscale (h263)$/;"	m	struct:MpegEncContext
chroma_v_shift	ffv1.c	/^    int chroma_h_shift, chroma_v_shift;$/;"	m	struct:FFV1Context	file:
chroma_v_shift	snow.c	/^    int chroma_v_shift;$/;"	m	struct:SnowContext	file:
chroma_weight	h264.c	/^    int chroma_weight[2][16][2];$/;"	m	struct:H264Context	file:
chroma_x_shift	mpegvideo.h	/^    int chroma_x_shift;\/\/depend on pix_format, that depend on chroma_format$/;"	m	struct:MpegEncContext
chroma_y_shift	mpegvideo.h	/^    int chroma_y_shift;$/;"	m	struct:MpegEncContext
chromaformat	vc9.c	/^    int chromaformat;     \/\/\/< 2bits, 2=4:2:0, only defined$/;"	m	struct:VC9Context	file:
ci_table	mpegaudiodectab.h	/^const float ci_table[8] = {$/;"	v
cinepak_decode	cinepak.c	/^static int cinepak_decode (CinepakContext *s)$/;"	f	file:
cinepak_decode_codebook	cinepak.c	/^static void cinepak_decode_codebook (cvid_codebook_t *codebook,$/;"	f	file:
cinepak_decode_end	cinepak.c	/^static int cinepak_decode_end(AVCodecContext *avctx)$/;"	f	file:
cinepak_decode_frame	cinepak.c	/^static int cinepak_decode_frame(AVCodecContext *avctx,$/;"	f	file:
cinepak_decode_init	cinepak.c	/^static int cinepak_decode_init(AVCodecContext *avctx)$/;"	f	file:
cinepak_decode_strip	cinepak.c	/^static int cinepak_decode_strip (CinepakContext *s,$/;"	f	file:
cinepak_decode_vectors	cinepak.c	/^static int cinepak_decode_vectors (CinepakContext *s, cvid_strip_t *strip,$/;"	f	file:
cinepak_decoder	cinepak.c	/^AVCodec cinepak_decoder = {$/;"	v
class_name	avcodec.h	/^    const char* class_name;$/;"	m	struct:AVCLASS
classic_add_chroma	huffyuv.c	/^static const unsigned char classic_add_chroma[256] = {$/;"	v	file:
classic_add_luma	huffyuv.c	/^static const unsigned char classic_add_luma[256] = {$/;"	v	file:
classic_shift_chroma	huffyuv.c	/^static const unsigned char classic_shift_chroma[] = {$/;"	v	file:
classic_shift_luma	huffyuv.c	/^static const unsigned char classic_shift_luma[] = {$/;"	v	file:
clear_blocks	dsputil.h	/^    void (*clear_blocks)(DCTELEM *blocks\/*align 16*\/);$/;"	m	struct:DSPContext
clear_blocks_axp	alpha/dsputil_alpha.c	/^static void clear_blocks_axp(DCTELEM *blocks) {$/;"	f	file:
clear_blocks_c	dsputil.c	/^static void clear_blocks_c(DCTELEM *blocks)$/;"	f	file:
clear_blocks_dcbz128_ppc	ppc/dsputil_ppc.c	/^void clear_blocks_dcbz128_ppc(DCTELEM *blocks)$/;"	f
clear_blocks_dcbz32_ppc	ppc/dsputil_ppc.c	/^void clear_blocks_dcbz32_ppc(DCTELEM *blocks)$/;"	f
clear_blocks_mmi	ps2/dsputil_mmi.c	/^static void clear_blocks_mmi(DCTELEM * blocks)$/;"	f	file:
clear_blocks_mmx	i386/dsputil_mmx.c	/^static void clear_blocks_mmx(DCTELEM *blocks)$/;"	f	file:
clear_blocks_sh4	sh4/dsputil_sh4.c	/^static void clear_blocks_sh4(DCTELEM *blocks)$/;"	f	file:
clear_state	ffv1.c	/^static void clear_state(FFV1Context *f){$/;"	f	file:
clev	liba52/a52_internal.h	/^    level_t clev;		\/* centre channel mix level *\/$/;"	m	struct:a52_state_s
clip	common.h	/^static inline int clip(int a, int amin, int amax)$/;"	f
clip_coeffs	mpegvideo.c	/^static inline void clip_coeffs(MpegEncContext *s, DCTELEM *block, int last_index)$/;"	f	file:
clip_input_mv	motion_est.c	/^static void clip_input_mv(MpegEncContext * s, int16_t *mv, int interlaced){$/;"	f	file:
clip_tab	libpostproc/postprocess.c	/^static uint8_t * const clip_tab= clip_table + 256;$/;"	v	file:
clip_table	libpostproc/postprocess.c	/^static uint8_t clip_table[3*256];$/;"	v	file:
clip_uint8	common.h	/^static inline int clip_uint8(int a)$/;"	f
cljr_decoder	cljr.c	/^AVCodec cljr_decoder = {$/;"	v
close	avcodec.h	/^    int (*close)(AVCodecContext *);$/;"	m	struct:AVCodec
cmp	motion_est.c	/^static always_inline int cmp(MpegEncContext *s, const int x, const int y, const int subx, const int suby,$/;"	f	file:
cmpbge	alpha/asm.h	137;"	d
cmpbge	alpha/asm.h	75;"	d
cmpbge	alpha/asm.h	90;"	d
cno	dv.c	/^    int cno;$/;"	m	struct:EncBlockInfo	file:
co	ra288.c	/^static void co(int n, int i, int j, float *in, float *out, float *st1, float *st2, const float *table)$/;"	f	file:
co_located_mv	mpegvideo.h	/^    int co_located_mv[4][2];           \/\/\/< mv from last p frame for direct mode ME $/;"	m	struct:MotionEstContext
code012	msmpeg4.c	/^static void code012(PutBitContext *pb, int n)$/;"	f	file:
code_samplerate	sonic.c	/^static inline int code_samplerate(int samplerate)$/;"	f	file:
code_size	g726.c	/^   int code_size;$/;"	m	struct:AVG726Context	file:
codebook	vqavideo.c	/^    unsigned char *codebook;         \/* the current codebook *\/$/;"	m	struct:VqaContext	file:
codebook_size	vqavideo.c	/^    int codebook_size;$/;"	m	struct:VqaContext	file:
codec	avcodec.h	/^    struct AVCodec *codec;$/;"	m	struct:AVCodecContext
codec_id	avcodec.h	/^    enum CodecID codec_id; \/* see CODEC_ID_xxx *\/$/;"	m	struct:AVCodecContext
codec_id	mpegvideo.h	/^    enum CodecID codec_id;     \/* see CODEC_ID_xxx *\/$/;"	m	struct:MpegEncContext
codec_ids	avcodec.h	/^    int codec_ids[5]; \/* several codec IDs are permitted *\/$/;"	m	struct:AVCodecParser
codec_name	avcodec.h	/^    char codec_name[32];$/;"	m	struct:AVCodecContext
codec_tag	avcodec.h	/^    unsigned int codec_tag;$/;"	m	struct:AVCodecContext
codec_type	avcodec.h	/^    enum CodecType codec_type; \/* see CODEC_TYPE_xxx *\/$/;"	m	struct:AVCodecContext
coded_ac_scale_factor	vp3.c	/^    uint32_t coded_ac_scale_factor[64];$/;"	m	struct:Vp3DecodeContext	file:
coded_block	mpegvideo.h	/^    uint8_t *coded_block;          \/\/\/< used for coded block pattern prediction (msmpeg4v3, wmv1)$/;"	m	struct:MpegEncContext
coded_block_base	mpegvideo.h	/^    uint8_t *coded_block_base;$/;"	m	struct:MpegEncContext
coded_block_pred	msmpeg4.c	/^static inline int coded_block_pred(MpegEncContext * s, int n, uint8_t **coded_block_ptr)$/;"	f	file:
coded_dc_scale_factor	vp3.c	/^    uint16_t coded_dc_scale_factor[64];$/;"	m	struct:Vp3DecodeContext	file:
coded_fragment_list	vp3.c	/^    int *coded_fragment_list;$/;"	m	struct:Vp3DecodeContext	file:
coded_fragment_list_index	vp3.c	/^    int coded_fragment_list_index;$/;"	m	struct:Vp3DecodeContext	file:
coded_frame	avcodec.h	/^    AVFrame *coded_frame;$/;"	m	struct:AVCodecContext
coded_height	avcodec.h	/^    int coded_width, coded_height;$/;"	m	struct:AVCodecContext
coded_inter_dequant	vp3.c	/^    uint16_t coded_inter_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
coded_intra_c_dequant	vp3.c	/^    uint16_t coded_intra_c_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
coded_intra_y_dequant	vp3.c	/^    uint16_t coded_intra_y_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
coded_picture_number	mpegvideo.h	/^    int coded_picture_number;  \/\/\/< used to set pic->coded_picture_number, shouldnt be used for\/by anything else$/;"	m	struct:MpegEncContext
coded_samples	sonic.c	/^    int *coded_samples[MAX_CHANNELS];$/;"	m	struct:SonicContext	file:
coded_score	mpegvideo.h	/^    int coded_score[6];$/;"	m	struct:MpegEncContext
coded_width	avcodec.h	/^    int coded_width, coded_height;$/;"	m	struct:AVCodecContext
coder_type	avcodec.h	/^    int coder_type;$/;"	m	struct:AVCodecContext
codes	mpegaudiodec.c	/^    const uint16_t *codes;$/;"	m	struct:HuffTable	file:
codetable	ra288.h	/^static const float codetable[640]={$/;"	v
coding_method	vp3.c	/^    int coding_method;$/;"	m	struct:Vp3Fragment	file:
coef0_huffbits	wmadata.h	/^static const uint8_t coef0_huffbits[666] = {$/;"	v
coef0_huffcodes	wmadata.h	/^static const uint32_t coef0_huffcodes[666] = {$/;"	v
coef1_huffbits	wmadata.h	/^static const uint8_t coef1_huffbits[555] = {$/;"	v
coef1_huffcodes	wmadata.h	/^static const uint32_t coef1_huffcodes[555] = {$/;"	v
coef2_huffbits	wmadata.h	/^static const uint8_t coef2_huffbits[1336] = {$/;"	v
coef2_huffcodes	wmadata.h	/^static const uint32_t coef2_huffcodes[1336] = {$/;"	v
coef3_huffbits	wmadata.h	/^static const uint8_t coef3_huffbits[1072] = {$/;"	v
coef3_huffcodes	wmadata.h	/^static const uint32_t coef3_huffcodes[1072] = {$/;"	v
coef4_huffbits	wmadata.h	/^static const uint8_t coef4_huffbits[476] = {$/;"	v
coef4_huffcodes	wmadata.h	/^static const uint32_t coef4_huffcodes[476] = {$/;"	v
coef5_huffbits	wmadata.h	/^static const uint8_t coef5_huffbits[435] = {$/;"	v
coef5_huffcodes	wmadata.h	/^static const uint32_t coef5_huffcodes[435] = {$/;"	v
coef_vlc	wmadec.c	/^    VLC coef_vlc[2];$/;"	m	struct:WMADecodeContext	file:
coef_vlcs	wmadata.h	/^static const CoefVLCTable coef_vlcs[6] = {$/;"	v
coeff	mpegvideo.h	/^    double coeff;$/;"	m	struct:Predictor
coeff	snow.c	/^    DWTELEM *coeff;$/;"	m	struct:SubBand	file:
coeff1	adpcm.c	/^    int coeff1;$/;"	m	struct:ADPCMChannelStatus	file:
coeff2	adpcm.c	/^    int coeff2;$/;"	m	struct:ADPCMChannelStatus	file:
coeff_count	vp3.c	/^    int coeff_count;$/;"	m	struct:Vp3Fragment	file:
coeff_get	liba52/parse.c	/^static void coeff_get (a52_state_t * state, sample_t * coeff,$/;"	f	file:
coeff_get_coupling	liba52/parse.c	/^static void coeff_get_coupling (a52_state_t * state, int nfchans,$/;"	f	file:
coeff_token_bits	h264data.h	/^static const uint8_t coeff_token_bits[4][4*17]={$/;"	v
coeff_token_len	h264data.h	/^static const uint8_t coeff_token_len[4][4*17]={$/;"	v
coeff_token_vlc	h264.c	/^static VLC coeff_token_vlc[4];$/;"	v	file:
coeffs	i386/simple_idct_mmx.c	/^static const int16_t __attribute__((aligned(8))) coeffs[]= {$/;"	v	file:
coeffs	vp3.c	/^    DCTELEM coeffs[64];$/;"	m	struct:Vp3Fragment	file:
coefs	wmadec.c	/^    float coefs[MAX_CHANNELS][BLOCK_MAX_SIZE] __attribute__((aligned(16)));$/;"	m	struct:WMADecodeContext	file:
coefs1	wmadec.c	/^    int16_t coefs1[MAX_CHANNELS][BLOCK_MAX_SIZE];$/;"	m	struct:WMADecodeContext	file:
coefs_end	wmadec.c	/^    int coefs_end[BLOCK_NB_SIZES]; \/* max number of coded coefficients *\/$/;"	m	struct:WMADecodeContext	file:
coefs_start	wmadec.c	/^    int coefs_start;               \/* first coded coef *\/$/;"	m	struct:WMADecodeContext	file:
colmult	ra288.c	/^static void colmult(float *tgt, float *m1, const float *m2, int n)$/;"	f	file:
color	snow.c	/^    uint8_t color[3];$/;"	m	struct:BlockNode	file:
color_octets	smc.c	/^    unsigned char color_octets[COLORS_PER_TABLE * COCTET];$/;"	m	struct:SmcContext	file:
color_pairs	smc.c	/^    unsigned char color_pairs[COLORS_PER_TABLE * CPAIR];$/;"	m	struct:SmcContext	file:
color_prim	vc9.c	/^    int color_prim;       \/\/\/< 8bits, chroma coordinates of the color primaries$/;"	m	struct:VC9Context	file:
color_quads	smc.c	/^    unsigned char color_quads[COLORS_PER_TABLE * CQUAD];$/;"	m	struct:SmcContext	file:
color_table_id	avcodec.h	/^    int color_table_id;$/;"	m	struct:AVCodecContext
color_type	imgconvert.c	/^    uint8_t color_type;      \/* color type (see FF_COLOR_xxx constants) *\/$/;"	m	struct:PixFmtInfo	file:
color_type	png.c	/^    int color_type;$/;"	m	struct:PNGContext	file:
colorspace	ffv1.c	/^    int colorspace;$/;"	m	struct:FFV1Context	file:
colorspace_type	snow.c	/^    int colorspace_type;$/;"	m	struct:SnowContext	file:
column_loop	armv4l/jrevdct_arm.S	/^column_loop:$/;"	l
common_end	ffv1.c	/^static void common_end(FFV1Context *s){$/;"	f	file:
common_end	huffyuv.c	/^static int common_end(HYuvContext *s){$/;"	f	file:
common_end	snow.c	/^static void common_end(SnowContext *s){$/;"	f	file:
common_init	4xm.c	/^static void common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	asv1.c	/^static void common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	cljr.c	/^static void common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	ffv1.c	/^static int common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	h264.c	/^static void common_init(H264Context *h){$/;"	f	file:
common_init	huffyuv.c	/^static int common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	mpeg12.c	/^static void common_init(MpegEncContext *s)$/;"	f	file:
common_init	msmpeg4.c	/^static void common_init(MpegEncContext * s)$/;"	f	file:
common_init	png.c	/^static int common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	pnm.c	/^static int common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	snow.c	/^static int common_init(AVCodecContext *avctx){$/;"	f	file:
common_init	vcr1.c	/^static void common_init(AVCodecContext *avctx){$/;"	f	file:
comp_buf	lcl.c	/^    unsigned char* comp_buf;$/;"	m	struct:LclContext	file:
comp_index	mjpeg.c	/^    int comp_index[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
comp_types	truemotion1.c	/^typedef struct comp_types {$/;"	s	file:
comp_types	truemotion1.c	/^} comp_types;$/;"	t	file:
compensation_distance	resample2.c	/^    int compensation_distance;$/;"	m	struct:AVResampleContext	file:
complex_s	liba52/imdct.c	/^typedef struct complex_s {$/;"	s	file:
complex_t	liba52/imdct.c	/^} complex_t;$/;"	t	file:
component_id	mjpeg.c	/^    int component_id[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
component_resample	imgresample.c	/^static void component_resample(ImgReSampleContext *s, $/;"	f	file:
compression	lcl.c	/^    int compression;$/;"	m	struct:LclContext	file:
compression	truemotion1.c	/^    int compression;$/;"	m	struct:TrueMotion1Context	file:
compression	truemotion1.c	/^    uint8_t compression;$/;"	m	struct:frame_header	file:
compression_type	png.c	/^    int compression_type;$/;"	m	struct:PNGContext	file:
compression_types	truemotion1.c	/^static comp_types compression_types[17] = {$/;"	v	file:
compute_antialias	mpegaudiodec.c	/^    void (*compute_antialias)(struct MPADecodeContext *s, struct GranuleDef *g);$/;"	m	struct:MPADecodeContext	file:
compute_antialias_float	mpegaudiodec.c	/^static void compute_antialias_float(MPADecodeContext *s,$/;"	f	file:
compute_antialias_integer	mpegaudiodec.c	/^static void compute_antialias_integer(MPADecodeContext *s,$/;"	f	file:
compute_bit_allocation	ac3enc.c	/^static int compute_bit_allocation(AC3EncodeContext *s,$/;"	f	file:
compute_bit_allocation	mpegaudio.c	/^static void compute_bit_allocation(MpegAudioContext *s, $/;"	f	file:
compute_exp_strategy	ac3enc.c	/^static void compute_exp_strategy(uint8_t exp_strategy[NB_BLOCKS][AC3_MAX_CHANNELS],$/;"	f	file:
compute_imdct	mpegaudiodec.c	/^static void compute_imdct(MPADecodeContext *s,$/;"	f	file:
compute_mantissa_size	ac3enc.c	/^static int compute_mantissa_size(AC3EncodeContext *s, uint8_t *m, int nb_coefs)$/;"	f	file:
compute_scale_factors	mpegaudio.c	/^static void compute_scale_factors(unsigned char scale_code[SBLIMIT],$/;"	f	file:
compute_stereo	mpegaudiodec.c	/^static void compute_stereo(MPADecodeContext *s,$/;"	f	file:
concealment_motion_vectors	mpegvideo.h	/^    int concealment_motion_vectors;$/;"	m	struct:MpegEncContext
condover	vc9.c	/^    uint8_t condover;$/;"	m	struct:VC9Context	file:
const_array	armv4l/jrevdct_arm.S	/^const_array:$/;"	l
const_name	eval.c	/^    const char **const_name;          \/\/ NULL terminated$/;"	m	struct:Parser	file:
const_names	eval.c	/^static const char *const_names[]={$/;"	v	file:
const_value	eval.c	/^    double *const_value;$/;"	m	struct:Parser	file:
const_values	eval.c	/^static double const_values[]={$/;"	v	file:
const_vector	ppc/gcc_fixes.h	89;"	d
const_vector	ppc/gcc_fixes.h	91;"	d
const_vector_s16_t	ppc/idct_altivec.c	47;"	d	file:
constants	ppc/idct_altivec.c	/^static const_vector_s16_t constants[5] = {$/;"	v	file:
constrained_intra_pred	h264.c	/^    int constrained_intra_pred; \/\/\/< constrained_intra_pred_flag$/;"	m	struct:PPS	file:
context	huffyuv.c	/^    int context;$/;"	m	struct:HYuvContext	file:
context	xvidff.c	/^    xvid_context_t *context;        \/** Pointer to private context *\/$/;"	m	struct:xvid_ff_pass1	file:
context_count	ffv1.c	/^    int context_count;$/;"	m	struct:PlaneContext	file:
context_initialized	alac.c	/^    int context_initialized;$/;"	m	file:
context_initialized	mpegvideo.h	/^    int context_initialized;$/;"	m	struct:MpegEncContext
context_model	avcodec.h	/^    int context_model;$/;"	m	struct:AVCodecContext
context_to_name	utils.c	/^static const char* context_to_name(void* ptr) {$/;"	f	file:
control	truemotion1.c	/^    uint8_t control;$/;"	m	struct:frame_header	file:
conv	oggvorbis.c	/^static inline int conv(int samples, float **pcm, char *buf, int channels) {$/;"	f	file:
conv411	imgconvert.c	/^static void conv411(uint8_t *dst, int dst_wrap, $/;"	f	file:
convert	dtsdec.c	/^int16_t convert (int32_t i)$/;"	f	file:
convert	imgconvert.c	/^    void (*convert)(AVPicture *dst,$/;"	m	struct:ConvertEntry	file:
convert	liba52/resample_c.c	/^static inline int16_t convert (int32_t i)$/;"	f	file:
convert2s16_2	dtsdec.c	/^convert2s16_2 (sample_t * _f, int16_t * s16)$/;"	f
convert2s16_4	dtsdec.c	/^convert2s16_4 (sample_t * _f, int16_t * s16)$/;"	f
convert2s16_5	dtsdec.c	/^convert2s16_5 (sample_t * _f, int16_t * s16)$/;"	f
convert2s16_multi	dtsdec.c	/^convert2s16_multi (sample_t * _f, int16_t * s16, int flags)$/;"	f	file:
convert_from_rgba32	png.c	/^static void convert_from_rgba32(uint8_t *dst, const uint8_t *src, int width)$/;"	f	file:
convert_matrix	mpegvideo.c	/^static void convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64],$/;"	f	file:
convert_table	imgconvert.c	/^static ConvertEntry convert_table[PIX_FMT_NB][PIX_FMT_NB] = {$/;"	v	file:
convert_to_rgba32	png.c	/^static void convert_to_rgba32(uint8_t *dst, const uint8_t *src, int width)$/;"	f	file:
copy_block16	dsputil.c	/^static inline void copy_block16(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block16	sh4/qpel.c	/^static inline void copy_block16(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block17	dsputil.c	/^static inline void copy_block17(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block17	sh4/qpel.c	/^static inline void copy_block17(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block4	dsputil.c	/^static inline void copy_block4(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block4	sh4/qpel.c	/^static inline void copy_block4(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block8	dsputil.c	/^static inline void copy_block8(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block8	sh4/qpel.c	/^static inline void copy_block8(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block9	dsputil.c	/^static inline void copy_block9(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_block9	sh4/qpel.c	/^static inline void copy_block9(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h)$/;"	f	file:
copy_context_after_encode	mpegvideo.c	/^static inline void copy_context_after_encode(MpegEncContext *d, MpegEncContext *s, int type){$/;"	f	file:
copy_context_before_encode	mpegvideo.c	/^static inline void copy_context_before_encode(MpegEncContext *d, MpegEncContext *s, int type){$/;"	f	file:
copy_picture	mpegvideo.c	/^static void copy_picture(Picture *dst, Picture *src){$/;"	f	file:
copy_picture_attributes	mpegvideo.c	/^static void copy_picture_attributes(MpegEncContext *s, AVFrame *dst, AVFrame *src){$/;"	f	file:
copy_rac_state	snow.c	/^static inline void copy_rac_state(RangeCoder *d, RangeCoder *s){$/;"	f	file:
correction	indeo3data.h	/^static const uint32_t correction[] = {$/;"	v
correctionhighorder	indeo3data.h	/^static const uint32_t correctionhighorder[] = {$/;"	v
correctionloworder	indeo3data.h	/^static const uint32_t correctionloworder[] = {$/;"	v
corrector_type	indeo3.c	/^    unsigned short *corrector_type;$/;"	m	struct:Indeo3DecodeContext	file:
corrector_type_0	indeo3.c	/^static int corrector_type_0[24] = {$/;"	v	file:
corrector_type_2	indeo3.c	/^static int corrector_type_2[8] = { 9, 7, 6, 8, 5, 4, 3, 2 };$/;"	v	file:
correlate	snow.c	/^static void correlate(SnowContext *s, SubBand *b, DWTELEM *src, int stride, int inverse, int use_median){$/;"	f	file:
costab	ac3tab.h	/^static int16_t costab[64];$/;"	v
costab32	mpegaudiotab.h	/^static const int costab32[30] = {$/;"	v
count	ffv1.c	/^    uint8_t count;$/;"	m	struct:VlcState	file:
count	idcinvideo.c	/^  int count;$/;"	m	file:
count	loco.c	/^    int sum, count; \/* sum and count for getting rice parameter *\/$/;"	m	struct:RICEContext	file:
count	mpegvideo.h	/^    double count;$/;"	m	struct:Predictor
count1table_select	mpegaudiodec.c	/^    uint8_t count1table_select;$/;"	m	struct:GranuleDef	file:
count_leading_zeros	alac.c	/^static int count_leading_zeros(int32_t input)$/;"	f	file:
cpl_expbap	liba52/a52_internal.h	/^    expbap_t cpl_expbap;$/;"	m	struct:a52_state_s
cplba	liba52/a52_internal.h	/^    ba_t cplba;			\/* coupling bit allocation parameters *\/$/;"	m	struct:a52_state_s
cplbndstrc	liba52/a52_internal.h	/^    uint32_t cplbndstrc;	\/* coupling band structure *\/$/;"	m	struct:a52_state_s
cplco	liba52/a52_internal.h	/^    level_t cplco[5][18];	\/* coupling coordinates *\/$/;"	m	struct:a52_state_s
cplendmant	liba52/a52_internal.h	/^    uint8_t cplendmant;		\/* coupling channel end mantissa *\/$/;"	m	struct:a52_state_s
cplfleak	ac3.h	/^    int cplfleak, cplsleak;$/;"	m	struct:AC3BitAllocParameters
cplfleak	liba52/a52_internal.h	/^    uint8_t cplfleak;		\/* coupling fast leak init *\/$/;"	m	struct:a52_state_s
cplsleak	ac3.h	/^    int cplfleak, cplsleak;$/;"	m	struct:AC3BitAllocParameters
cplsleak	liba52/a52_internal.h	/^    uint8_t cplsleak;		\/* coupling slow leak init *\/$/;"	m	struct:a52_state_s
cplstrtbnd	liba52/a52_internal.h	/^    uint8_t cplstrtbnd;		\/* coupling start band (for bit allocation) *\/$/;"	m	struct:a52_state_s
cplstrtmant	liba52/a52_internal.h	/^    uint8_t cplstrtmant;	\/* coupling channel start mantissa *\/$/;"	m	struct:a52_state_s
cpuCaps	libpostproc/postprocess_internal.h	/^	int cpuCaps;$/;"	m	struct:PPContext
cpuid	i386/cputest.c	16;"	d	file:
crc_lut	liba52/crc.c	/^static const uint16_t crc_lut[256] = $/;"	v	file:
crc_table	ac3tab.h	/^static uint16_t crc_table[256];$/;"	v
crop	h264.c	/^    int crop;                   \/\/\/< frame_cropping_flag$/;"	m	struct:SPS	file:
cropTbl	dct-test.c	/^uint8_t cropTbl[256 + 2 * MAX_NEG_CROP];$/;"	v
cropTbl	dsputil.c	/^uint8_t cropTbl[256 + 2 * MAX_NEG_CROP] = {0, };$/;"	v
crop_bottom	h264.c	/^    int crop_bottom;            \/\/\/< frame_cropping_rect_bottom_offset$/;"	m	struct:SPS	file:
crop_left	h264.c	/^    int crop_left;              \/\/\/< frame_cropping_rect_left_offset$/;"	m	struct:SPS	file:
crop_right	h264.c	/^    int crop_right;             \/\/\/< frame_cropping_rect_right_offset$/;"	m	struct:SPS	file:
crop_top	h264.c	/^    int crop_top;               \/\/\/< frame_cropping_rect_top_offset$/;"	m	struct:SPS	file:
crow_buf	png.c	/^    uint8_t *crow_buf;$/;"	m	struct:PNGContext	file:
crow_size	png.c	/^    int crow_size; \/* compressed row size (include filter type) *\/$/;"	m	struct:PNGContext	file:
cs_itu601	mjpeg.c	/^    int cs_itu601;$/;"	m	struct:MJpegDecodeContext	file:
csa_table	mpegaudiodec.c	/^static int32_t csa_table[8][4];$/;"	v	file:
csa_table_float	mpegaudiodec.c	/^static float csa_table_float[8][4];$/;"	v	file:
csnroffst	ac3enc.c	/^    int csnroffst;$/;"	m	struct:AC3EncodeContext	file:
csnroffst	liba52/a52_internal.h	/^    uint8_t csnroffst;		\/* coarse SNR offset *\/$/;"	m	struct:a52_state_s
ct_adpcm_table	adpcm.c	/^static int ct_adpcm_table[8] = {$/;"	v	file:
cur_ac	dv.c	/^    int cur_ac;$/;"	m	struct:EncBlockInfo	file:
cur_chan	shorten.c	/^    int cur_chan;$/;"	m	struct:ShortenContext	file:
cur_frame	indeo3.c	/^    YUVBufs *cur_frame;$/;"	m	struct:Indeo3DecodeContext	file:
cur_frame_dts	avcodec.h	/^    int64_t cur_frame_dts[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext
cur_frame_offset	avcodec.h	/^    int64_t cur_frame_offset[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext
cur_frame_pts	avcodec.h	/^    int64_t cur_frame_pts[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext
cur_frame_start_index	avcodec.h	/^    int cur_frame_start_index;$/;"	m	struct:AVCodecParserContext
cur_offset	avcodec.h	/^    int64_t cur_offset; \/* current offset $/;"	m	struct:AVCodecParserContext
curr_bps	flac.c	/^    int bps, curr_bps;$/;"	m	struct:FLACContext	file:
curr_pic_num	h264.c	/^    int curr_pic_num;$/;"	m	struct:H264Context	file:
current_frame	interplayvideo.c	/^    AVFrame current_frame;$/;"	m	struct:IpvideoContext	file:
current_frame	roqvideo.c	/^    AVFrame current_frame;$/;"	m	struct:RoqContext	file:
current_frame	vp3.c	/^    AVFrame current_frame;$/;"	m	struct:Vp3DecodeContext	file:
current_frame	xan.c	/^    AVFrame current_frame;$/;"	m	struct:XanContext	file:
current_job	pthread.c	/^    int current_job;$/;"	m	struct:ThreadContext	file:
current_job_cond	pthread.c	/^    pthread_cond_t current_job_cond;$/;"	m	struct:ThreadContext	file:
current_job_lock	pthread.c	/^    pthread_mutex_t current_job_lock;$/;"	m	struct:ThreadContext	file:
current_mba	h261.c	/^    int current_mba;$/;"	m	struct:H261Context	file:
current_mv_penalty	mpegvideo.h	/^    uint8_t *current_mv_penalty;$/;"	m	struct:MotionEstContext
current_mv_x	h261.c	/^    int current_mv_x;$/;"	m	struct:H261Context	file:
current_mv_y	h261.c	/^    int current_mv_y;$/;"	m	struct:H261Context	file:
current_picture	4xm.c	/^    AVFrame current_picture, last_picture;$/;"	m	struct:FourXContext	file:
current_picture	mpegvideo.h	/^    Picture current_picture;    \/\/\/< buffer to store the decompressed current picture $/;"	m	struct:MpegEncContext
current_picture	snow.c	/^    AVFrame current_picture;$/;"	m	struct:SnowContext	file:
current_picture	svq1.c	/^    AVFrame current_picture;$/;"	m	struct:SVQ1Context	file:
current_picture_ptr	mpegvideo.h	/^    Picture *current_picture_ptr;  \/\/\/< pointer to the current picture$/;"	m	struct:MpegEncContext
current_word	liba52/a52_internal.h	/^    uint32_t current_word;$/;"	m	struct:a52_state_s
custom_pcf	mpegvideo.h	/^    int custom_pcf;$/;"	m	struct:MpegEncContext
cvid_codebook_t	cinepak.c	/^} cvid_codebook_t;$/;"	t	file:
cvid_strip_t	cinepak.c	/^} cvid_strip_t;$/;"	t	file:
cyuv_decode_end	cyuv.c	/^static int cyuv_decode_end(AVCodecContext *avctx)$/;"	f	file:
cyuv_decode_frame	cyuv.c	/^static int cyuv_decode_frame(AVCodecContext *avctx, $/;"	f	file:
cyuv_decode_init	cyuv.c	/^static int cyuv_decode_init(AVCodecContext *avctx)$/;"	f	file:
cyuv_decoder	cyuv.c	/^AVCodec cyuv_decoder = {$/;"	v
d	i386/mmx.h	/^	int			d[2];	\/* 2 Doubleword (32-bit) values *\/$/;"	m
d40000	i386/simple_idct_mmx.c	/^static const uint64_t attribute_used __attribute__((aligned(8))) d40000= 0x0000000000040000ULL;$/;"	v	file:
dark_masking	avcodec.h	/^    float dark_masking;$/;"	m	struct:AVCodecContext
data	4xm.c	/^    uint8_t *data;$/;"	m	struct:CFrameBuffer	file:
data	avcodec.h	/^    uint8_t *data[4];$/;"	m	struct:AVPicture
data	cinepak.c	/^    unsigned char *data;$/;"	m	struct:CinepakContext	file:
data	utils.c	/^    uint8_t *data[4];$/;"	m	struct:InternalBuffer	file:
data	vc9.c	/^    uint8_t *data;      \/\/\/< Data buffer$/;"	m	struct:BitPlane	file:
data_partitioning	mpegvideo.h	/^    int data_partitioning;           \/\/\/< data partitioning flag from header $/;"	m	struct:MpegEncContext
dbknee	ac3.h	/^    int sgain, sdecay, fdecay, dbknee, floor;$/;"	m	struct:AC3BitAllocParameters
dbkneecod	ac3enc.c	/^    int sgaincod, sdecaycod, fdecaycod, dbkneecod, floorcod; $/;"	m	struct:AC3EncodeContext	file:
dbkneetab	ac3tab.h	/^static const uint16_t dbkneetab[4]= { $/;"	v
dc_bias	vp3data.h	/^static const uint16_t dc_bias[16][32][2] = {$/;"	v
dc_cache	mpegvideo.h	/^    int16_t dc_cache[4*5];$/;"	m	struct:MpegEncContext
dc_ccp_tab	asv1.c	/^static const uint8_t dc_ccp_tab[8][2]={$/;"	v	file:
dc_ccp_vlc	asv1.c	/^static VLC dc_ccp_vlc;$/;"	v	file:
dc_chrom	h263.c	/^static VLC dc_lum, dc_chrom;$/;"	v	file:
dc_chroma_vlc	mpeg12.c	/^static VLC dc_chroma_vlc;$/;"	v	file:
dc_index	mjpeg.c	/^    int dc_index[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
dc_lum	h263.c	/^static VLC dc_lum, dc_chrom;$/;"	v	file:
dc_lum_vlc	mpeg12.c	/^static VLC dc_lum_vlc;$/;"	v	file:
dc_table_index	mpegvideo.h	/^    int dc_table_index;$/;"	m	struct:MpegEncContext
dc_val	mpegvideo.h	/^    int16_t *dc_val[3];            \/\/\/< used for mpeg4 DC prediction, all 3 arrays must be continuous $/;"	m	struct:MpegEncContext
dc_val_base	mpegvideo.h	/^    int16_t *dc_val_base;$/;"	m	struct:MpegEncContext
dc_vlc	vp3.c	/^    VLC dc_vlc[16];$/;"	m	struct:Vp3DecodeContext	file:
dct32	mpegaudiodec.c	/^static void dct32(int32_t *out, int32_t *tab)$/;"	f	file:
dct_algo	avcodec.h	/^    int dct_algo;$/;"	m	struct:AVCodecContext
dct_count	mpegvideo.h	/^    int dct_count[2];$/;"	m	struct:MpegEncContext
dct_error	dct-test.c	/^void dct_error(const char *name, int is_idct,$/;"	f
dct_error_sum	mpegvideo.h	/^    int (*dct_error_sum)[64];$/;"	m	struct:MpegEncContext
dct_get	asv1.c	/^static inline void dct_get(ASV1Context *a, int mb_x, int mb_y){$/;"	f	file:
dct_max	dsputil.h	/^    me_cmp_func dct_max[5];$/;"	m	struct:DSPContext
dct_max8x8_c	dsputil.c	/^static int dct_max8x8_c(\/*MpegEncContext*\/ void *c, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
dct_mode	dv.c	/^    int dct_mode;$/;"	m	struct:EncBlockInfo	file:
dct_mode	dv.c	/^    uint8_t dct_mode;$/;"	m	struct:BlockInfo	file:
dct_offset	mpegvideo.h	/^    uint16_t (*dct_offset)[64];$/;"	m	struct:MpegEncContext
dct_quantize	i386/mpegvideo_mmx_template.c	/^static int RENAME(dct_quantize)(MpegEncContext *s,$/;"	f	file:
dct_quantize	mpegvideo.h	/^    int (*dct_quantize)(struct MpegEncContext *s, DCTELEM *block\/*align 16*\/, int n, int qscale, int *overflow);$/;"	m	struct:MpegEncContext
dct_quantize_altivec	ppc/mpegvideo_altivec.c	/^int dct_quantize_altivec(MpegEncContext* s, $/;"	f
dct_quantize_c	mpegvideo.c	/^static int dct_quantize_c(MpegEncContext *s, $/;"	f	file:
dct_quantize_refine	mpegvideo.c	/^static int dct_quantize_refine(MpegEncContext *s, \/\/FIXME breaks denoise?$/;"	f	file:
dct_quantize_trellis_c	mpegvideo.c	/^static int dct_quantize_trellis_c(MpegEncContext *s, $/;"	f	file:
dct_sad	dsputil.h	/^    me_cmp_func dct_sad[5];$/;"	m	struct:DSPContext
dct_sad8x8_c	dsputil.c	/^static int dct_sad8x8_c(\/*MpegEncContext*\/ void *c, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
dct_single_coeff_elimination	mpegvideo.c	/^static inline void dct_single_coeff_elimination(MpegEncContext *s, int n, int threshold)$/;"	f	file:
dct_unquantize_h261_inter	mpegvideo.h	/^    void (*dct_unquantize_h261_inter)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_h261_intra	mpegvideo.h	/^    void (*dct_unquantize_h261_intra)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_h263_altivec	ppc/mpegvideo_altivec.c	/^void dct_unquantize_h263_altivec(MpegEncContext *s, $/;"	f
dct_unquantize_h263_inter	mpegvideo.h	/^    void (*dct_unquantize_h263_inter)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_h263_inter_axp	alpha/mpegvideo_alpha.c	/^static void dct_unquantize_h263_inter_axp(MpegEncContext *s, DCTELEM *block,$/;"	f	file:
dct_unquantize_h263_inter_c	mpegvideo.c	/^static void dct_unquantize_h263_inter_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_h263_inter_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_h263_inter_mmx(MpegEncContext *s,$/;"	f	file:
dct_unquantize_h263_intra	mpegvideo.h	/^    void (*dct_unquantize_h263_intra)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_h263_intra_axp	alpha/mpegvideo_alpha.c	/^static void dct_unquantize_h263_intra_axp(MpegEncContext *s, DCTELEM *block,$/;"	f	file:
dct_unquantize_h263_intra_c	mpegvideo.c	/^static void dct_unquantize_h263_intra_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_h263_intra_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_h263_intra_mmx(MpegEncContext *s,$/;"	f	file:
dct_unquantize_h263_mmi	ps2/mpegvideo_mmi.c	/^static void dct_unquantize_h263_mmi(MpegEncContext *s, $/;"	f	file:
dct_unquantize_inter	mpegvideo.h	/^    void (*dct_unquantize_inter)(struct MpegEncContext *s, \/\/ unquantizer to use (mpeg4 can use both)$/;"	m	struct:MpegEncContext
dct_unquantize_intra	mpegvideo.h	/^    void (*dct_unquantize_intra)(struct MpegEncContext *s, \/\/ unquantizer to use (mpeg4 can use both)$/;"	m	struct:MpegEncContext
dct_unquantize_mpeg1_inter	mpegvideo.h	/^    void (*dct_unquantize_mpeg1_inter)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_mpeg1_inter_c	mpegvideo.c	/^static void dct_unquantize_mpeg1_inter_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_mpeg1_inter_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_mpeg1_inter_mmx(MpegEncContext *s,$/;"	f	file:
dct_unquantize_mpeg1_intra	mpegvideo.h	/^    void (*dct_unquantize_mpeg1_intra)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_mpeg1_intra_c	mpegvideo.c	/^static void dct_unquantize_mpeg1_intra_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_mpeg1_intra_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_mpeg1_intra_mmx(MpegEncContext *s,$/;"	f	file:
dct_unquantize_mpeg2_inter	mpegvideo.h	/^    void (*dct_unquantize_mpeg2_inter)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_mpeg2_inter_c	mpegvideo.c	/^static void dct_unquantize_mpeg2_inter_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_mpeg2_inter_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_mpeg2_inter_mmx(MpegEncContext *s,$/;"	f	file:
dct_unquantize_mpeg2_intra	mpegvideo.h	/^    void (*dct_unquantize_mpeg2_intra)(struct MpegEncContext *s, $/;"	m	struct:MpegEncContext
dct_unquantize_mpeg2_intra_c	mpegvideo.c	/^static void dct_unquantize_mpeg2_intra_c(MpegEncContext *s, $/;"	f	file:
dct_unquantize_mpeg2_intra_mmx	i386/mpegvideo_mmx.c	/^static void dct_unquantize_mpeg2_intra_mmx(MpegEncContext *s,$/;"	f	file:
deInterlaceBlendLinear	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceBlendLinear)(uint8_t src[], int stride, uint8_t *tmp)$/;"	f	file:
deInterlaceFF	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceFF)(uint8_t src[], int stride, uint8_t *tmp)$/;"	f	file:
deInterlaceInterpolateCubic	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceInterpolateCubic)(uint8_t src[], int stride)$/;"	f	file:
deInterlaceInterpolateLinear	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceInterpolateLinear)(uint8_t src[], int stride)$/;"	f	file:
deInterlaceL5	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceL5)(uint8_t src[], int stride, uint8_t *tmp, uint8_t *tmp2)$/;"	f	file:
deInterlaceMedian	libpostproc/postprocess_template.c	/^static inline void RENAME(deInterlaceMedian)(uint8_t src[], int stride)$/;"	f	file:
deblocking_filter	h264.c	/^    int deblocking_filter;         \/\/\/< disable_deblocking_filter_idc with 1<->0 $/;"	m	struct:H264Context	file:
deblocking_filter_parameters_present	h264.c	/^    int deblocking_filter_parameters_present; \/\/\/< deblocking_filter_parameters_present_flag$/;"	m	struct:PPS	file:
debug	avcodec.h	/^    int debug;$/;"	m	struct:AVCodecContext
debug_block_coding	vp3.c	/^static inline void debug_block_coding(const char *format, ...) { } $/;"	f	file:
debug_block_coding	vp3.c	96;"	d	file:
debug_dc_pred	vp3.c	/^static inline void debug_dc_pred(const char *format, ...) { } $/;"	f	file:
debug_dc_pred	vp3.c	126;"	d	file:
debug_dequantizers	vp3.c	/^static inline void debug_dequantizers(const char *format, ...) { } $/;"	f	file:
debug_dequantizers	vp3.c	90;"	d	file:
debug_idct	vp3.c	/^static inline void debug_idct(const char *format, ...) { } $/;"	f	file:
debug_idct	vp3.c	132;"	d	file:
debug_init	vp3.c	/^static inline void debug_init(const char *format, ...) { }$/;"	f	file:
debug_init	vp3.c	84;"	d	file:
debug_interplay	interplayvideo.c	/^static inline void debug_interplay(const char *format, ...) { }$/;"	f	file:
debug_interplay	interplayvideo.c	50;"	d	file:
debug_modes	vp3.c	/^static inline void debug_modes(const char *format, ...) { } $/;"	f	file:
debug_modes	vp3.c	102;"	d	file:
debug_mv	avcodec.h	/^    int debug_mv;$/;"	m	struct:AVCodecContext
debug_token	vp3.c	/^static inline void debug_token(const char *format, ...) { } $/;"	f	file:
debug_token	vp3.c	114;"	d	file:
debug_vectors	vp3.c	/^static inline void debug_vectors(const char *format, ...) { } $/;"	f	file:
debug_vectors	vp3.c	108;"	d	file:
debug_vlc	vp3.c	/^static inline void debug_vlc(const char *format, ...) { } $/;"	f	file:
debug_vlc	vp3.c	120;"	d	file:
debug_vp3	vp3.c	/^static inline void debug_vp3(const char *format, ...) { }$/;"	f	file:
debug_vp3	vp3.c	78;"	d	file:
dec1	ra144.c	/^static void dec1(Real144_internal *glob, int *data, int *inp, int n, int f)$/;"	f	file:
dec2	ra144.c	/^static void dec2(Real144_internal *glob, int *data, int *inp, int n, int f, int *inp2, int l)$/;"	f	file:
decState	amr.c	/^    void * decState;$/;"	m	struct:AMRContext	file:
dec_temp	adx.c	/^    unsigned char dec_temp[18*2];$/;"	m	file:
decay	mpegvideo.h	/^    double decay;$/;"	m	struct:Predictor
decide_ac_pred	h263.c	/^static inline int decide_ac_pred(MpegEncContext * s, DCTELEM block[6][64], int dir[6], uint8_t *st[6], int zigzag_last_index[6])$/;"	f	file:
declare_idct	i386/idct_mmx.c	558;"	d	file:
decode	avcodec.h	/^    int (*decode)(AVCodecContext *, void *outdata, int *outdata_size,$/;"	m	struct:AVCodec
decode	mpegvideo.h	/^    int decode;                 \/\/\/< if 0 then decoding will be skiped (for encoding b frames for example)$/;"	m	struct:MpegEncContext
decode	ra288.c	/^static void decode(Real288_internal *glob, unsigned int input)$/;"	f	file:
decode012	bitstream.h	/^static inline int decode012(GetBitContext *gb){$/;"	f
decode_422_bitstream	huffyuv.c	/^static void decode_422_bitstream(HYuvContext *s, int count){$/;"	f	file:
decode_advanced_sequence_header	vc9.c	/^static int decode_advanced_sequence_header(AVCodecContext *avctx, GetBitContext *gb)$/;"	f	file:
decode_b_picture_primary_header	vc9.c	/^static int decode_b_picture_primary_header(VC9Context *v)$/;"	f	file:
decode_b_picture_secondary_header	vc9.c	/^static int decode_b_picture_secondary_header(VC9Context *v)$/;"	f	file:
decode_bgr_bitstream	huffyuv.c	/^static void decode_bgr_bitstream(HYuvContext *s, int count){$/;"	f	file:
decode_block	mjpeg.c	/^static int decode_block(MJpegDecodeContext *s, DCTELEM *block, $/;"	f	file:
decode_block	ra288.c	/^static void * decode_block(AVCodecContext * avctx, unsigned char *in, signed short int *out,unsigned len)$/;"	f	file:
decode_blocks	snow.c	/^static void decode_blocks(SnowContext *s){$/;"	f	file:
decode_buffer	vqavideo.c	/^    unsigned char *decode_buffer;$/;"	m	struct:VqaContext	file:
decode_buffer_size	vqavideo.c	/^    int decode_buffer_size;$/;"	m	struct:VqaContext	file:
decode_cabac_b_mb_sub_type	h264.c	/^static int decode_cabac_b_mb_sub_type( H264Context *h ) {$/;"	f	file:
decode_cabac_intra_mb_type	h264.c	/^static int decode_cabac_intra_mb_type(H264Context *h, int ctx_base, int intra_slice) {$/;"	f	file:
decode_cabac_mb_cbp_chroma	h264.c	/^static int decode_cabac_mb_cbp_chroma( H264Context *h) {$/;"	f	file:
decode_cabac_mb_cbp_luma	h264.c	/^static int decode_cabac_mb_cbp_luma( H264Context *h) {$/;"	f	file:
decode_cabac_mb_chroma_pre_mode	h264.c	/^static int decode_cabac_mb_chroma_pre_mode( H264Context *h) {$/;"	f	file:
decode_cabac_mb_dqp	h264.c	/^static int decode_cabac_mb_dqp( H264Context *h) {$/;"	f	file:
decode_cabac_mb_intra4x4_pred_mode	h264.c	/^static int decode_cabac_mb_intra4x4_pred_mode( H264Context *h, int pred_mode ) {$/;"	f	file:
decode_cabac_mb_mvd	h264.c	/^static int decode_cabac_mb_mvd( H264Context *h, int list, int n, int l ) {$/;"	f	file:
decode_cabac_mb_ref	h264.c	/^static int decode_cabac_mb_ref( H264Context *h, int list, int n ) {$/;"	f	file:
decode_cabac_mb_skip	h264.c	/^static int decode_cabac_mb_skip( H264Context *h) {$/;"	f	file:
decode_cabac_mb_type	h264.c	/^static int decode_cabac_mb_type( H264Context *h ) {$/;"	f	file:
decode_cabac_p_mb_sub_type	h264.c	/^static int decode_cabac_p_mb_sub_type( H264Context *h ) {$/;"	f	file:
decode_cabac_residual	h264.c	/^static int inline decode_cabac_residual( H264Context *h, DCTELEM *block, int cat, int n, const uint8_t *scantable, int qp, int max_coeff) {$/;"	f	file:
decode_close_mp3on4	mpegaudiodec.c	/^static int decode_close_mp3on4(AVCodecContext * avctx)$/;"	f	file:
decode_colskip	vc9.c	/^static void decode_colskip(uint8_t* plane, int width, int height, int stride, GetBitContext *gb){$/;"	f	file:
decode_dc	mpeg12.c	/^static inline int decode_dc(GetBitContext *gb, int component)$/;"	f	file:
decode_end	4xm.c	/^static int decode_end(AVCodecContext *avctx){$/;"	f	file:
decode_end	8bps.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_end	asv1.c	/^static int decode_end(AVCodecContext *avctx){$/;"	f	file:
decode_end	h264.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_end	huffyuv.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_end	lcl.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_end	mdec.c	/^static int decode_end(AVCodecContext *avctx){$/;"	f	file:
decode_end	qpeg.c	/^static int decode_end(AVCodecContext *avctx){$/;"	f	file:
decode_end	snow.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_end	tscc.c	/^static int decode_end(AVCodecContext *avctx)$/;"	f	file:
decode_exp_lsp	wmadec.c	/^static void decode_exp_lsp(WMADecodeContext *s, int ch)$/;"	f	file:
decode_exp_vlc	wmadec.c	/^static int decode_exp_vlc(WMADecodeContext *s, int ch)$/;"	f	file:
decode_ext_header	wmv2.c	/^static int decode_ext_header(Wmv2Context *w){$/;"	f	file:
decode_format80	vqavideo.c	/^static void decode_format80(unsigned char *src, int src_size,$/;"	f	file:
decode_frame	4xm.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	8bps.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size)$/;"	f	file:
decode_frame	asv1.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	cljr.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	ffv1.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size){$/;"	f	file:
decode_frame	flac.c	/^static int decode_frame(FLACContext *s)$/;"	f	file:
decode_frame	h264.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	huffyuv.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size){$/;"	f	file:
decode_frame	lcl.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size)$/;"	f	file:
decode_frame	loco.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	mdec.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	mpegaudiodec.c	/^static int decode_frame(AVCodecContext * avctx,$/;"	f	file:
decode_frame	png.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	qdrw.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	qpeg.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	snow.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size){$/;"	f	file:
decode_frame	tscc.c	/^static int decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size)$/;"	f	file:
decode_frame	vcr1.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame	xl.c	/^static int decode_frame(AVCodecContext *avctx, $/;"	f	file:
decode_frame_adu	mpegaudiodec.c	/^static int decode_frame_adu(AVCodecContext * avctx,$/;"	f	file:
decode_frame_mp3on4	mpegaudiodec.c	/^static int decode_frame_mp3on4(AVCodecContext * avctx,$/;"	f	file:
decode_gray_bitstream	huffyuv.c	/^static void decode_gray_bitstream(HYuvContext *s, int count){$/;"	f	file:
decode_header	mpegaudiodec.c	/^static int decode_header(MPADecodeContext *s, uint32_t header)$/;"	f	file:
decode_header	snow.c	/^static int decode_header(SnowContext *s){$/;"	f	file:
decode_hrd	vc9.c	/^static int decode_hrd(VC9Context *v, GetBitContext *gb)$/;"	f	file:
decode_hrd_parameters	h264.c	/^static inline void decode_hrd_parameters(H264Context *h, SPS *sps){$/;"	f	file:
decode_i_block	4xm.c	/^static int decode_i_block(FourXContext *f, DCTELEM *block){$/;"	f	file:
decode_i_frame	4xm.c	/^static int decode_i_frame(FourXContext *f, uint8_t *buf, int length){$/;"	f	file:
decode_i_mb	4xm.c	/^static int decode_i_mb(FourXContext *f){$/;"	f	file:
decode_i_picture_primary_header	vc9.c	/^static int decode_i_picture_primary_header(VC9Context *v)$/;"	f	file:
decode_i_picture_secondary_header	vc9.c	/^static int decode_i_picture_secondary_header(VC9Context *v)$/;"	f	file:
decode_init	4xm.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	8bps.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	asv1.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	cljr.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	ffv1.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	h264.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	huffyuv.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	lcl.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	loco.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	mdec.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	mpegaudiodec.c	/^static int decode_init(AVCodecContext * avctx)$/;"	f	file:
decode_init	qdrw.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	qpeg.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	snow.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	tscc.c	/^static int decode_init(AVCodecContext *avctx)$/;"	f	file:
decode_init	vcr1.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init	xl.c	/^static int decode_init(AVCodecContext *avctx){$/;"	f	file:
decode_init_mp3on4	mpegaudiodec.c	/^static int decode_init_mp3on4(AVCodecContext * avctx)$/;"	f	file:
decode_init_vlc	h264.c	/^static void decode_init_vlc(H264Context *h){$/;"	f	file:
decode_line	ffv1.c	/^static inline void decode_line(FFV1Context *s, int w, int_fast16_t *sample[2], int plane_index, int bits){$/;"	f	file:
decode_mb	asv1.c	/^static inline int decode_mb(ASV1Context *a, DCTELEM block[6][64]){$/;"	f	file:
decode_mb	error_resilience.c	/^static void decode_mb(MpegEncContext *s){$/;"	f	file:
decode_mb	mdec.c	/^static inline int decode_mb(MDECContext *a, DCTELEM block[6][64]){$/;"	f	file:
decode_mb	mpegvideo.h	/^    int (*decode_mb)(struct MpegEncContext *s, DCTELEM block[6][64]); \/\/ used by some codecs to avoid a switch()$/;"	m	struct:MpegEncContext
decode_mb_cabac	h264.c	/^static int decode_mb_cabac(H264Context *h) {$/;"	f	file:
decode_mb_cavlc	h264.c	/^static int decode_mb_cavlc(H264Context *h){$/;"	f	file:
decode_mb_skip	h264.c	/^static void decode_mb_skip(H264Context *h){$/;"	f	file:
decode_mv_component	h261.c	/^static int decode_mv_component(GetBitContext *gb, int v){$/;"	f	file:
decode_nal	h264.c	/^static uint8_t *decode_nal(H264Context *h, uint8_t *src, int *dst_length, int *consumed, int length){$/;"	f	file:
decode_nal_units	h264.c	/^static int decode_nal_units(H264Context *h, uint8_t *buf, int buf_size){$/;"	f	file:
decode_p_block	4xm.c	/^static void decode_p_block(FourXContext *f, uint16_t *dst, uint16_t *src, int log2w, int log2h, int stride){$/;"	f	file:
decode_p_frame	4xm.c	/^static int decode_p_frame(FourXContext *f, uint8_t *buf, int length){$/;"	f	file:
decode_p_picture_primary_header	vc9.c	/^static int decode_p_picture_primary_header(VC9Context *v)$/;"	f	file:
decode_p_picture_secondary_header	vc9.c	/^static int decode_p_picture_secondary_header(VC9Context *v)$/;"	f	file:
decode_picture_parameter_set	h264.c	/^static inline int decode_picture_parameter_set(H264Context *h){$/;"	f	file:
decode_plane	ffv1.c	/^static void decode_plane(FFV1Context *s, uint8_t *src, int w, int h, int stride, int plane_index){$/;"	f	file:
decode_q_branch	snow.c	/^static void decode_q_branch(SnowContext *s, int level, int x, int y){$/;"	f	file:
decode_rbsp_trailing	h264.c	/^static int decode_rbsp_trailing(uint8_t *src){$/;"	f	file:
decode_ref_pic_list_reordering	h264.c	/^static int decode_ref_pic_list_reordering(H264Context *h){$/;"	f	file:
decode_ref_pic_marking	h264.c	/^static int decode_ref_pic_marking(H264Context *h){$/;"	f	file:
decode_residual	h264.c	/^static int decode_residual(H264Context *h, GetBitContext *gb, DCTELEM *block, int n, const uint8_t *scantable, int qp, int max_coeff){$/;"	f	file:
decode_residuals	flac.c	/^static int decode_residuals(FLACContext *s, int channel, int pred_order)$/;"	f	file:
decode_rgb_frame	ffv1.c	/^static void decode_rgb_frame(FFV1Context *s, uint32_t *src, int w, int h, int stride){$/;"	f	file:
decode_rle	tscc.c	/^static int decode_rle(CamtasiaContext *c, unsigned int srcsize)$/;"	f	file:
decode_rowskip	vc9.c	/^static void decode_rowskip(uint8_t* plane, int width, int height, int stride, GetBitContext *gb){$/;"	f	file:
decode_seq_parameter_set	h264.c	/^static inline int decode_seq_parameter_set(H264Context *h){$/;"	f	file:
decode_sequence_header	vc9.c	/^static int decode_sequence_header(AVCodecContext *avctx, GetBitContext *gb)$/;"	f	file:
decode_slice	h263dec.c	/^static int decode_slice(MpegEncContext *s){$/;"	f	file:
decode_slice	h264.c	/^static int decode_slice(H264Context *h){$/;"	f	file:
decode_slice_header	h264.c	/^static int decode_slice_header(H264Context *h){$/;"	f	file:
decode_subband	snow.c	/^static inline void decode_subband(SnowContext *s, SubBand *b, DWTELEM *src, DWTELEM *parent, int stride, int orientation){$/;"	f	file:
decode_subframe	flac.c	/^static inline int decode_subframe(FLACContext *s, int channel)$/;"	f	file:
decode_subframe_fixed	flac.c	/^static int decode_subframe_fixed(FLACContext *s, int channel, int pred_order)$/;"	f	file:
decode_subframe_lpc	flac.c	/^static int decode_subframe_lpc(FLACContext *s, int channel, int pred_order)$/;"	f	file:
decode_subframe_lpc	shorten.c	/^static void decode_subframe_lpc(ShortenContext *s, int channel, int residual_size, int pred_order)$/;"	f	file:
decode_user_data	h263.c	/^static int decode_user_data(MpegEncContext *s, GetBitContext *gb){$/;"	f	file:
decode_vol_header	h263.c	/^static int decode_vol_header(MpegEncContext *s, GetBitContext *gb){$/;"	f	file:
decode_vop_header	h263.c	/^static int decode_vop_header(MpegEncContext *s, GetBitContext *gb){$/;"	f	file:
decode_vui_parameters	h264.c	/^static inline int decode_vui_parameters(H264Context *h, SPS *sps){$/;"	f	file:
decode_wave_header	shorten.c	/^static int decode_wave_header(AVCodecContext *avctx, uint8_t *header, int header_size)$/;"	f	file:
decoded	flac.c	/^    int32_t *decoded[MAX_CHANNELS];$/;"	m	struct:FLACContext	file:
decoded	shorten.c	/^    int32_t *decoded[MAX_CHANNELS];$/;"	m	struct:ShortenContext	file:
decodetable	ra144.h	/^static const short *decodetable[11]={$/;"	v
decodetable1	ra144.h	/^static const short decodetable1[63]={$/;"	v
decodetable10	ra144.h	/^static const short decodetable10[15]={$/;"	v
decodetable11	ra144.h	/^static const short decodetable11[7]={$/;"	v
decodetable2	ra144.h	/^static const short decodetable2[127]={$/;"	v
decodetable3	ra144.h	/^static const short decodetable3[63]={$/;"	v
decodetable4	ra144.h	/^static const short decodetable4[63]={$/;"	v
decodetable5	ra144.h	/^static const short decodetable5[31]={$/;"	v
decodetable6	ra144.h	/^static const short decodetable6[31]={$/;"	v
decodetable7	ra144.h	/^static const short decodetable7[15]={$/;"	v
decodetable8	ra144.h	/^static const short decodetable8[15]={$/;"	v
decodetable9	ra144.h	/^static const short decodetable9[15]={$/;"	v
decoding_map	interplayvideo.c	/^    unsigned char *decoding_map;$/;"	m	struct:IpvideoContext	file:
decoding_map_size	interplayvideo.c	/^    int decoding_map_size;$/;"	m	struct:IpvideoContext	file:
decomp_buf	lcl.c	/^    unsigned char* decomp_buf;$/;"	m	struct:LclContext	file:
decomp_buf	tscc.c	/^    unsigned char* decomp_buf;$/;"	m	struct:TsccContext	file:
decomp_size	lcl.c	/^    unsigned int decomp_size;$/;"	m	struct:LclContext	file:
decomp_size	tscc.c	/^    unsigned int decomp_size;$/;"	m	struct:TsccContext	file:
decorrelate	huffyuv.c	/^    int decorrelate;$/;"	m	struct:HYuvContext	file:
decorrelate	snow.c	/^static void decorrelate(SnowContext *s, SubBand *b, DWTELEM *src, int stride, int inverse, int use_median){$/;"	f	file:
decorrelation	flac.c	/^    enum decorrelation_type decorrelation;$/;"	m	struct:FLACContext	file:
decorrelation	sonic.c	/^    int lossless, decorrelation;$/;"	m	struct:SonicContext	file:
decorrelation_type	flac.c	/^enum decorrelation_type {$/;"	g	file:
decptr	ra144.c	/^	unsigned int	*decptr;			\/* decoder ptr *\/$/;"	m	file:
decsp	ra144.c	/^	signed   short	*decsp;$/;"	m	file:
default_fcode_tab	mpegvideo.c	/^static uint8_t default_fcode_tab[MAX_MV*2+1];$/;"	v	file:
default_mv_penalty	mpegvideo.c	/^static uint8_t (*default_mv_penalty)[MAX_MV*2+1]=NULL;$/;"	v	file:
default_ref_list	h264.c	/^    Picture default_ref_list[2][32];$/;"	m	struct:H264Context	file:
defstr	avcodec.h	/^    const char *defstr;$/;"	m	struct:AVOption
defval	avcodec.h	/^    double defval;$/;"	m	struct:AVOption
deintTemp	libpostproc/postprocess_internal.h	/^	uint8_t *deintTemp;$/;"	m	struct:PPContext
deinterlace_16	alac.c	/^void deinterlace_16(int32_t *buffer_a, int32_t *buffer_b,$/;"	f
deinterlace_bottom_field	imgconvert.c	/^static void deinterlace_bottom_field(uint8_t *dst, int dst_wrap,$/;"	f	file:
deinterlace_bottom_field_inplace	imgconvert.c	/^static void deinterlace_bottom_field_inplace(uint8_t *src1, int src_wrap,$/;"	f	file:
deinterlace_line	imgconvert.c	/^static void deinterlace_line(uint8_t *dst, $/;"	f	file:
deinterlace_line_inplace	imgconvert.c	/^static void deinterlace_line_inplace(uint8_t *lum_m4, uint8_t *lum_m3, uint8_t *lum_m2, uint8_t *lum_m1, uint8_t *lum,$/;"	f	file:
delay	avcodec.h	/^    int delay;$/;"	m	struct:AVCodecContext
delayed_output_pic	h264.c	/^    Picture *delayed_output_pic;$/;"	m	struct:H264Context	file:
delayed_pic	h264.c	/^    Picture *delayed_pic[16]; \/\/FIXME size?$/;"	m	struct:H264Context	file:
delta	cljr.c	/^    int delta[16];$/;"	m	struct:CLJRContext	file:
delta	vcr1.c	/^    int delta[16];$/;"	m	struct:VCR1Context	file:
delta_pic_order_always_zero_flag	h264.c	/^    int delta_pic_order_always_zero_flag;$/;"	m	struct:SPS	file:
delta_poc	h264.c	/^    int delta_poc[2];$/;"	m	struct:H264Context	file:
delta_poc_bottom	h264.c	/^    int delta_poc_bottom;$/;"	m	struct:H264Context	file:
deltaset	truemotion1.c	/^    uint8_t deltaset;$/;"	m	struct:frame_header	file:
deltba	liba52/a52_internal.h	/^    int8_t deltba[50];		\/* per-band delta bit allocation *\/$/;"	m
deltbae	liba52/a52_internal.h	/^    uint8_t deltbae;		\/* delta bit allocation exists *\/$/;"	m
den	rational.h	/^    int den; \/\/\/< denominator$/;"	m	struct:AVRational
denoise_dct	mpegvideo.h	/^    void (*denoise_dct)(struct MpegEncContext *s, DCTELEM *block);$/;"	m	struct:MpegEncContext
denoise_dct_c	mpegvideo.c	/^static void  denoise_dct_c(MpegEncContext *s, DCTELEM *block){$/;"	f	file:
denoise_dct_mmx	i386/mpegvideo_mmx.c	/^static void  denoise_dct_mmx(MpegEncContext *s, DCTELEM *block){$/;"	f	file:
denoise_dct_sse2	i386/mpegvideo_mmx.c	/^static void  denoise_dct_sse2(MpegEncContext *s, DCTELEM *block){$/;"	f	file:
depth	imgconvert.c	/^    uint8_t depth;           \/* bit depth of the color components *\/$/;"	m	struct:PixFmtInfo	file:
dequant_coeff	h264data.h	/^static const uint16_t dequant_coeff[52][16]={$/;"	v
dequant_table	4xm.c	/^static const uint8_t dequant_table[64]={$/;"	v	file:
dequantize	snow.c	/^static void dequantize(SnowContext *s, SubBand *b, DWTELEM *src, int stride){$/;"	f	file:
dering	libpostproc/postprocess_template.c	/^static inline void RENAME(dering)(uint8_t src[], int stride, PPContext *c)$/;"	f	file:
deringThreshold	libpostproc/postprocess.c	/^static const int attribute_used deringThreshold= 20;$/;"	v	file:
dering_altivec	libpostproc/postprocess_altivec_template.c	/^static inline void dering_altivec(uint8_t src[], int stride, PPContext *c) {$/;"	f	file:
dest	mpegvideo.h	/^    uint8_t *dest[3];$/;"	m	struct:MpegEncContext
dev_4_3_coefs	mpegaudiodec.c	/^static int dev_4_3_coefs[DEV_ORDER];$/;"	v	file:
dezigzag_index	vp3data.h	/^static const int dezigzag_index[64] =$/;"	v
dfaac	faad.c	203;"	d	file:
dfaac	faad.c	208;"	d	file:
dfacc	faad.c	239;"	d	file:
dia_size	avcodec.h	/^    int dia_size;$/;"	m	struct:AVCodecContext
dia_size	mpegvideo.h	/^    int dia_size;$/;"	m	struct:MotionEstContext
diamond_search	motion_est_template.c	/^static always_inline int diamond_search(MpegEncContext * s, int *best, int dmin,$/;"	f	file:
diff_bytes	dsputil.h	/^    void (*diff_bytes)(uint8_t *dst\/*align 16*\/, uint8_t *src1\/*align 16*\/, uint8_t *src2\/*align 1*\/,int w);$/;"	m	struct:DSPContext
diff_bytes_c	dsputil.c	/^static void diff_bytes_c(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w){$/;"	f	file:
diff_bytes_mmx	i386/dsputil_mmx.c	/^static void diff_bytes_mmx(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w){$/;"	f	file:
diff_pixels	dsputil.h	/^    void (*diff_pixels)(DCTELEM *block\/*align 16*\/, const uint8_t *s1\/*align 8*\/, const uint8_t *s2\/*align 8*\/, int stride);$/;"	m	struct:DSPContext
diff_pixels_altivec	ppc/dsputil_altivec.c	/^void diff_pixels_altivec(DCTELEM *restrict block, const uint8_t *s1,$/;"	f
diff_pixels_c	dsputil.c	/^static void diff_pixels_c(DCTELEM *restrict block, const uint8_t *s1,$/;"	f	file:
diff_pixels_mlib	mlib/dsputil_mlib.c	/^static void diff_pixels_mlib(DCTELEM *restrict block, const uint8_t *s1, const uint8_t *s2, int line_size)$/;"	f	file:
diff_pixels_mmx	i386/dsputil_mmx.c	/^static inline void diff_pixels_mmx(DCTELEM *block, const uint8_t *s1, const uint8_t *s2, int stride)$/;"	f	file:
diff_pixels_mvi	alpha/motion_est_alpha.c	/^void diff_pixels_mvi(DCTELEM *block, const uint8_t *s1, const uint8_t *s2,$/;"	f
difseg_size	dvdata.h	/^    int              difseg_size;         \/* number of DIF segments *\/$/;"	m	struct:DVprofile
direct_8x8_inference_flag	h264.c	/^    int direct_8x8_inference_flag;$/;"	m	struct:SPS	file:
direct_basis_mv	mpegvideo.h	/^    int direct_basis_mv[4][2];$/;"	m	struct:MotionEstContext
direct_cache	h264.c	/^    uint8_t     direct_cache[5*8];$/;"	m	struct:H264Context	file:
direct_dist_scale_factor	h264.c	/^static inline void direct_dist_scale_factor(H264Context * const h){$/;"	f	file:
direct_mb_plane	vc9.c	/^    BitPlane direct_mb_plane;     \/\/\/< bitplane for "direct" MBs$/;"	m	struct:VC9Context	file:
direct_ref_list_init	h264.c	/^static inline void direct_ref_list_init(H264Context * const h){$/;"	f	file:
direct_search	motion_est.c	/^static inline int direct_search(MpegEncContext * s, int mb_x, int mb_y)$/;"	f	file:
direct_spatial_mv_pred	h264.c	/^    int direct_spatial_mv_pred;$/;"	m	struct:H264Context	file:
direct_table	h264.c	/^    uint8_t     *direct_table;$/;"	m	struct:H264Context	file:
dist_scale_factor	h264.c	/^    int dist_scale_factor[16];$/;"	m	struct:H264Context	file:
dither_gen	liba52/parse.c	/^static inline int16_t dither_gen (a52_state_t * state)$/;"	f	file:
dither_lut	liba52/tables.h	/^static const uint16_t dither_lut[256] = {$/;"	v
dither_state	mpegaudiodec.c	/^    unsigned int dither_state;$/;"	m	struct:MPADecodeContext	file:
div6	h264data.h	/^static const uint8_t div6[52]={$/;"	v
divide	sonic.c	/^static inline int divide(int a, int b)$/;"	f	file:
divx_build	mpegvideo.h	/^    int divx_build;$/;"	m	struct:MpegEncContext
divx_packed	mpegvideo.h	/^    int divx_packed;$/;"	m	struct:MpegEncContext
divx_version	mpegvideo.h	/^    int divx_version;$/;"	m	struct:MpegEncContext
dlclose	faad.c	46;"	d	file:
dlopen	faad.c	45;"	d	file:
dlsymm	a52dec.c	/^static void* dlsymm(void* handle, const char* symbol)$/;"	f	file:
dml	g726.c	/^	 int dml;             \/**< long average magnitude of F[i] *\/$/;"	m	struct:G726Context	file:
dms	g726.c	/^	 int dms;             \/**< short average magnitude of F[i] *\/$/;"	m	struct:G726Context	file:
doHorizDefFilter_C	libpostproc/postprocess.c	/^static inline void doHorizDefFilter_C(uint8_t dst[], int stride, PPContext *c)$/;"	f	file:
doHorizDefFilter_altivec	libpostproc/postprocess_altivec_template.c	807;"	d	file:
doHorizLowPass_C	libpostproc/postprocess.c	/^static inline void doHorizLowPass_C(uint8_t dst[], int stride, PPContext *c)$/;"	f	file:
doHorizLowPass_altivec	libpostproc/postprocess_altivec_template.c	806;"	d	file:
doVertDefFilter	libpostproc/postprocess_template.c	/^static inline void RENAME(doVertDefFilter)(uint8_t src[], int stride, PPContext *c)$/;"	f	file:
doVertDefFilter_altivec	libpostproc/postprocess_altivec_template.c	/^static inline void doVertDefFilter_altivec(uint8_t src[], int stride, PPContext *c) {$/;"	f	file:
doVertLowPass	libpostproc/postprocess_template.c	/^static inline void RENAME(doVertLowPass)(uint8_t *src, int stride, PPContext *c)$/;"	f	file:
doVertLowPass_altivec	libpostproc/postprocess_altivec_template.c	/^static inline void doVertLowPass_altivec(uint8_t *src, int stride, PPContext *c) {$/;"	f	file:
do_a_deblock	libpostproc/postprocess_template.c	/^static always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int stride, PPContext *c){$/;"	f	file:
do_a_deblock_C	libpostproc/postprocess.c	/^static always_inline void do_a_deblock_C(uint8_t *src, int step, int stride, PPContext *c){$/;"	f	file:
do_a_deblock_altivec	libpostproc/postprocess_altivec_template.c	808;"	d	file:
do_output_subblock	ra144.c	/^static void do_output_subblock(Real144_internal *glob, unsigned int x)$/;"	f	file:
do_padding	mpegaudio.c	/^    int frame_frac, frame_frac_incr, do_padding;$/;"	m	struct:MpegAudioContext	file:
do_voice	ra144.c	/^static void do_voice(int *a1, int *a2)$/;"	f	file:
done	pthread.c	/^    int done;$/;"	m	struct:ThreadContext	file:
done_sem	beosthread.c	/^    sem_id done_sem;$/;"	m	struct:ThreadContext	file:
done_sem	w32thread.c	/^    HANDLE done_sem;$/;"	m	struct:ThreadContext	file:
downmixed	liba52/a52_internal.h	/^    int downmixed;$/;"	m	struct:a52_state_s
downsampling	sonic.c	/^    int num_taps, downsampling;$/;"	m	struct:SonicContext	file:
dpcm_decode_frame	dpcm.c	/^static int dpcm_decode_frame(AVCodecContext *avctx,$/;"	f	file:
dpcm_decode_init	dpcm.c	/^static int dpcm_decode_init(AVCodecContext *avctx)$/;"	f	file:
dprintf	common.h	/^inline void dprintf(const char* fmt,...) {}$/;"	f
dprintf	common.h	250;"	d
dprintf	common.h	252;"	d
dq	g726.c	/^	 Float11 dq[6];       \/**< prev. difference *\/$/;"	m	struct:G726Context	file:
dqbilevel	vc9.c	/^    uint8_t dqbilevel;$/;"	m	struct:VC9Context	file:
dqprofile	vc9.c	/^    uint8_t dqprofile;$/;"	m	struct:VC9Context	file:
dqsbedge	vc9.c	/^    uint8_t dqsbedge;$/;"	m	struct:VC9Context	file:
dquant	mpegvideo.h	/^    int dquant;                 \/\/\/< qscale difference to prev qscale  $/;"	m	struct:MpegEncContext
dquant	vc9.c	/^    int dquant;           \/\/\/< How qscale varies with MBs, 2bits (not in Simple)$/;"	m	struct:VC9Context	file:
dquantfrm	vc9.c	/^    uint8_t dquantfrm;$/;"	m	struct:VC9Context	file:
draw_arrow	mpegvideo.c	/^static void draw_arrow(uint8_t *buf, int sx, int sy, int ex, int ey, int w, int h, int stride, int color){ $/;"	f	file:
draw_edges	mpegvideo.c	/^void (*draw_edges)(uint8_t *buf, int wrap, int width, int height, int w)= draw_edges_c;$/;"	v
draw_edges_c	mpegvideo.c	/^static void draw_edges_c(uint8_t *buf, int wrap, int width, int height, int w)$/;"	f	file:
draw_edges_mmx	i386/mpegvideo_mmx.c	/^static void draw_edges_mmx(uint8_t *buf, int wrap, int width, int height, int w)$/;"	f	file:
draw_horiz_band	avcodec.h	/^    void (*draw_horiz_band)(struct AVCodecContext *s,$/;"	m	struct:AVCodecContext
draw_line	mpegvideo.c	/^static void draw_line(uint8_t *buf, int sx, int sy, int ex, int ey, int w, int h, int stride, int color){$/;"	f	file:
draw_slice	huffyuv.c	/^static void draw_slice(HYuvContext *s, int y){$/;"	f	file:
drift	ffv1.c	/^    int16_t drift;$/;"	m	struct:VlcState	file:
dropable	mpegvideo.h	/^    int dropable;$/;"	m	struct:MpegEncContext
dsf	dvdata.h	/^    int              dsf;                 \/* value of the dsf in the DV header *\/$/;"	m	struct:DVprofile
dsp	4xm.c	/^    DSPContext dsp;$/;"	m	struct:FourXContext	file:
dsp	asv1.c	/^    DSPContext dsp;$/;"	m	struct:ASV1Context	file:
dsp	cinepak.c	/^    DSPContext dsp;$/;"	m	struct:CinepakContext	file:
dsp	ffv1.c	/^    DSPContext dsp; $/;"	m	struct:FFV1Context	file:
dsp	huffyuv.c	/^    DSPContext dsp; $/;"	m	struct:HYuvContext	file:
dsp	idcinvideo.c	/^    DSPContext dsp;$/;"	m	struct:IdcinContext	file:
dsp	interplayvideo.c	/^    DSPContext dsp;$/;"	m	struct:IpvideoContext	file:
dsp	mdec.c	/^    DSPContext dsp;$/;"	m	struct:MDECContext	file:
dsp	mpegvideo.h	/^    DSPContext dsp;             \/\/\/< pointers for accelerated dsp fucntions $/;"	m	struct:MpegEncContext
dsp	msvideo1.c	/^    DSPContext dsp;$/;"	m	struct:Msvideo1Context	file:
dsp	qtrle.c	/^    DSPContext dsp;$/;"	m	struct:QtrleContext	file:
dsp	roqvideo.c	/^    DSPContext dsp;$/;"	m	struct:RoqContext	file:
dsp	rpza.c	/^    DSPContext dsp;$/;"	m	struct:RpzaContext	file:
dsp	smc.c	/^    DSPContext dsp;$/;"	m	struct:SmcContext	file:
dsp	snow.c	/^    DSPContext dsp;$/;"	m	struct:SnowContext	file:
dsp	svq1.c	/^    DSPContext dsp;$/;"	m	struct:SVQ1Context	file:
dsp	vmdav.c	/^    DSPContext dsp;$/;"	m	struct:VmdVideoContext	file:
dsp	vp3.c	/^    DSPContext dsp;$/;"	m	struct:Vp3DecodeContext	file:
dsp	vqavideo.c	/^    DSPContext dsp;$/;"	m	struct:VqaContext	file:
dsp	xan.c	/^    DSPContext dsp;$/;"	m	struct:XanContext	file:
dsp_mask	avcodec.h	/^    unsigned dsp_mask;$/;"	m	struct:AVCodecContext
dspfunc	dsputil.c	3592;"	d	file:
dspfunc	dsputil.c	3611;"	d	file:
dspfunc	dsputil.c	3636;"	d	file:
dspfunc	dsputil.c	3673;"	d	file:
dspfunc	i386/dsputil_mmx.c	3161;"	d	file:
dspfunc	i386/dsputil_mmx.c	3185;"	d	file:
dspfunc	i386/dsputil_mmx.c	3247;"	d	file:
dspfunc	ppc/dsputil_h264_altivec.c	237;"	d	file:
dspfunc	ppc/dsputil_h264_altivec.c	257;"	d	file:
dspfunc	sh4/dsputil_align.c	370;"	d	file:
dspfunc	sh4/dsputil_align.c	407;"	d	file:
dsputil_h264_init_ppc	ppc/dsputil_h264_altivec.c	/^void dsputil_h264_init_ppc(DSPContext* c, AVCodecContext *avctx) {$/;"	f
dsputil_init	dsputil.c	/^void dsputil_init(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_align	sh4/dsputil_align.c	/^void dsputil_init_align(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_alpha	alpha/dsputil_alpha.c	/^void dsputil_init_alpha(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_armv4l	armv4l/dsputil_arm.c	/^void dsputil_init_armv4l(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_mlib	mlib/dsputil_mlib.c	/^void dsputil_init_mlib(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_mmi	ps2/dsputil_mmi.c	/^void dsputil_init_mmi(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_mmx	i386/dsputil_mmx.c	/^void dsputil_init_mmx(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_ppc	ppc/dsputil_ppc.c	/^void dsputil_init_ppc(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_sh4	sh4/dsputil_sh4.c	/^void dsputil_init_sh4(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_init_vis	sparc/dsputil_vis.c	/^void dsputil_init_vis(DSPContext* c, AVCodecContext *avctx)$/;"	f
dsputil_static_init	dsputil.c	/^void dsputil_static_init(void)$/;"	f
dst_incr	resample2.c	/^    int dst_incr;$/;"	m	struct:AVResampleContext	file:
dtg_active_format	avcodec.h	/^    int dtg_active_format;$/;"	m	struct:AVCodecContext
dts	avcodec.h	/^    int64_t dts;     \/* dts of the current frame *\/$/;"	m	struct:AVCodecParserContext
dts_decode_end	dtsdec.c	/^dts_decode_end (AVCodecContext *s)$/;"	f	file:
dts_decode_frame	dtsdec.c	/^dts_decode_frame (AVCodecContext *avctx, void *data, int *data_size,$/;"	f	file:
dts_decode_init	dtsdec.c	/^dts_decode_init (AVCodecContext *avctx)$/;"	f	file:
dts_decoder	dtsdec.c	/^AVCodec dts_decoder = {$/;"	v
dummy	avcodec.h	/^    void *dummy; \/\/ FIXME remove next time we break binary compatibility$/;"	m	struct:AVCodec
dummy	motion_test.c	/^int dummy;$/;"	v
dummy	svq1.c	/^    uint32_t *dummy;$/;"	m	struct:SVQ1Context	file:
dump_filter	imgresample.c	/^static void dump_filter(int16_t *filter)$/;"	f	file:
dump_floats	wmadec.c	/^static void dump_floats(const char *name, int prec, const float *tab, int n)$/;"	f	file:
dump_headers	flac.c	/^static void dump_headers(FLACContext *s)$/;"	f	file:
dump_shorts	wmadec.c	/^static void dump_shorts(const char *name, const short *tab, int n)$/;"	f	file:
duplicate	libpostproc/postprocess_template.c	/^static inline void RENAME(duplicate)(uint8_t src[], int stride)$/;"	f	file:
dv_248_areas	dvdata.h	/^static const uint8_t dv_248_areas[64] = {$/;"	v
dv_88_areas	dvdata.h	/^static const uint8_t dv_88_areas[64] = {$/;"	v
dv_anchor	dv.c	/^static uint8_t** dv_anchor;$/;"	v	file:
dv_audio_frequency	dvdata.h	/^static const __attribute__((unused)) int dv_audio_frequency[3] = {$/;"	v
dv_audio_shuffle525	dvdata.h	/^static const uint16_t dv_audio_shuffle525[10][9] = {$/;"	v
dv_audio_shuffle625	dvdata.h	/^static const uint16_t dv_audio_shuffle625[12][9] = {$/;"	v
dv_build_unquantize_tables	dv.c	/^static void dv_build_unquantize_tables(DVVideoContext *s, uint8_t* perm)$/;"	f	file:
dv_codec_profile	dvdata.h	/^static inline const DVprofile* dv_codec_profile(AVCodecContext* codec)$/;"	f
dv_decode_ac	dv.c	/^static void dv_decode_ac(GetBitContext *gb, BlockInfo *mb, DCTELEM *block)$/;"	f	file:
dv_decode_mt	dv.c	/^static int dv_decode_mt(AVCodecContext *avctx, void* sl)$/;"	f	file:
dv_decode_video_segment	dv.c	/^static inline void dv_decode_video_segment(DVVideoContext *s, $/;"	f	file:
dv_encode_ac	dv.c	/^static always_inline void dv_encode_ac(EncBlockInfo* bi, PutBitContext* pb_pool, $/;"	f	file:
dv_encode_mt	dv.c	/^static int dv_encode_mt(AVCodecContext *avctx, void* sl)$/;"	f	file:
dv_encode_video_segment	dv.c	/^static inline void dv_encode_video_segment(DVVideoContext *s, $/;"	f	file:
dv_frame_profile	dvdata.h	/^static inline const DVprofile* dv_frame_profile(uint8_t* frame)$/;"	f
dv_guess_dct_mode	dv.c	/^static always_inline int dv_guess_dct_mode(DCTELEM *blk) {$/;"	f	file:
dv_guess_qnos	dv.c	/^static inline void dv_guess_qnos(EncBlockInfo* blks, int* qnos)$/;"	f	file:
dv_idct_shift	dv.c	/^    uint8_t dv_idct_shift[2][2][22][64];$/;"	m	struct:DVVideoContext	file:
dv_place_411	dvdata.h	/^static const uint16_t dv_place_411[1350] = {$/;"	v
dv_place_411P	dvdata.h	/^static const uint16_t dv_place_411P[1620] = {$/;"	v
dv_place_420	dvdata.h	/^static const uint16_t dv_place_420[1620] = {$/;"	v
dv_profiles	dvdata.h	/^static const DVprofile dv_profiles[] = {$/;"	v
dv_quant_offset	dvdata.h	/^static const uint8_t dv_quant_offset[4] = { 6, 3, 0, 1 };$/;"	v
dv_quant_shifts	dvdata.h	/^static const uint8_t dv_quant_shifts[22][4] = {$/;"	v
dv_rl2vlc	dv.c	/^static always_inline int dv_rl2vlc(int run, int l, uint32_t* vlc)$/;"	f	file:
dv_rl2vlc_size	dv.c	/^static always_inline int dv_rl2vlc_size(int run, int l)$/;"	f	file:
dv_rl_vlc	dv.c	/^static RL_VLC_ELEM *dv_rl_vlc;$/;"	v	file:
dv_set_class_number	dv.c	/^static always_inline void dv_set_class_number(DCTELEM* blk, EncBlockInfo* bi, $/;"	f	file:
dv_vlc_bits	dvdata.h	/^static const uint16_t dv_vlc_bits[409] = {$/;"	v
dv_vlc_len	dvdata.h	/^static const uint8_t dv_vlc_len[409] = {$/;"	v
dv_vlc_level	dvdata.h	/^static const uint8_t dv_vlc_level[409] = {$/;"	v
dv_vlc_map	dv.c	/^} (*dv_vlc_map)[DV_VLC_MAP_LEV_SIZE] = NULL;$/;"	v	file:
dv_vlc_pair	dv.c	/^static struct dv_vlc_pair {$/;"	s	file:
dv_vlc_run	dvdata.h	/^static const uint8_t dv_vlc_run[409] = {$/;"	v
dv_zigzag	dv.c	/^    uint8_t dv_zigzag[2][64];$/;"	m	struct:DVVideoContext	file:
dvvideo_decode_frame	dv.c	/^static int dvvideo_decode_frame(AVCodecContext *avctx, $/;"	f	file:
dvvideo_decoder	dv.c	/^AVCodec dvvideo_decoder = {$/;"	v
dvvideo_encode_frame	dv.c	/^static int dvvideo_encode_frame(AVCodecContext *c, uint8_t *buf, int buf_size, $/;"	f	file:
dvvideo_encoder	dv.c	/^AVCodec dvvideo_encoder = {$/;"	v
dvvideo_init	dv.c	/^static int dvvideo_init(AVCodecContext *avctx)$/;"	f	file:
dwt_compose_t	snow.c	/^} dwt_compose_t;$/;"	t	file:
dynrng	liba52/a52_internal.h	/^    level_t dynrng;		\/* dynamic range *\/$/;"	m	struct:a52_state_s
dynrngcall	liba52/a52_internal.h	/^    level_t (* dynrngcall) (level_t range, void * dynrngdata);$/;"	m	struct:a52_state_s
dynrngdata	liba52/a52_internal.h	/^    void * dynrngdata;		\/* dynamic range callback funtion and data *\/$/;"	m	struct:a52_state_s
dynrnge	liba52/a52_internal.h	/^    int dynrnge;		\/* apply dynamic range *\/$/;"	m	struct:a52_state_s
ea_adpcm_table	adpcm.c	/^static int ea_adpcm_table[] = {$/;"	v	file:
eax	i386/vp3dsp_sse2.c	815;"	d	file:
ebx	i386/vp3dsp_sse2.c	816;"	d	file:
ebx	i386/vp3dsp_sse2.c	826;"	d	file:
ebx	i386/vp3dsp_sse2.c	827;"	d	file:
ecx	i386/vp3dsp_sse2.c	817;"	d	file:
edge_emu_buffer	mpegvideo.h	/^    uint8_t *edge_emu_buffer;     \/\/\/< points into the middle of allocated_edge_emu_buffer$/;"	m	struct:MpegEncContext
edge_emu_buffer	vp3.c	/^    uint8_t edge_emu_buffer[9*2048]; \/\/FIXME dynamic alloc$/;"	m	struct:Vp3DecodeContext	file:
edx	i386/vp3dsp_sse2.c	818;"	d	file:
eight_data	i386/vp3dsp_sse2.c	/^static unsigned int __align16 eight_data[] =$/;"	v	file:
eightbps_decoder	8bps.c	/^AVCodec eightbps_decoder = {$/;"	v
emms	dsputil.h	/^static inline void emms(void)$/;"	f
emms	i386/mmx.h	52;"	d
emms_c	dsputil.h	399;"	d
emms_c	dsputil.h	409;"	d
emms_c	dsputil.h	430;"	d
empty_odd_column	armv4l/jrevdct_arm.S	/^empty_odd_column:$/;"	l
empty_row	armv4l/jrevdct_arm.S	/^empty_row:$/;"	l
enc	parser.c	/^    MpegEncContext *enc;$/;"	m	struct:ParseContext1	file:
enc	x264.c	/^    x264_t *enc;$/;"	m	struct:X264Context	file:
enc_bitrate	amr.c	/^    enum Mode enc_bitrate;$/;"	m	struct:AMRContext	file:
enc_temp	adx.c	/^    unsigned short enc_temp[32*2];$/;"	m	file:
encode	avcodec.h	/^    int (*encode)(AVCodecContext *, uint8_t *buf, int buf_size, void *data);$/;"	m	struct:AVCodec
encode_422_bitstream	huffyuv.c	/^static int encode_422_bitstream(HYuvContext *s, int count){$/;"	f	file:
encode_block	mjpeg.c	/^static void encode_block(MpegEncContext *s, DCTELEM *block, int n)$/;"	f	file:
encode_block	svq1.c	/^static int encode_block(SVQ1Context *s, uint8_t *src, uint8_t *ref, uint8_t *decoded, int stride, int level, int threshold, int lambda, int intra){$/;"	f	file:
encode_blocks	snow.c	/^static void encode_blocks(SnowContext *s){$/;"	f	file:
encode_dc	mpeg12.c	/^static inline void encode_dc(MpegEncContext *s, int diff, int component)$/;"	f	file:
encode_end	ffv1.c	/^static int encode_end(AVCodecContext *avctx)$/;"	f	file:
encode_end	huffyuv.c	/^static int encode_end(AVCodecContext *avctx)$/;"	f	file:
encode_end	lcl.c	/^static int encode_end(AVCodecContext *avctx)$/;"	f	file:
encode_end	snow.c	/^static int encode_end(AVCodecContext *avctx)$/;"	f	file:
encode_exp	ac3enc.c	/^static int encode_exp(uint8_t encoded_exp[N\/2], $/;"	f	file:
encode_ext_header	wmv2.c	/^static int encode_ext_header(Wmv2Context *w){$/;"	f	file:
encode_frame	asv1.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_frame	ffv1.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_frame	huffyuv.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_frame	lcl.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_frame	mpegaudio.c	/^static void encode_frame(MpegAudioContext *s,$/;"	f	file:
encode_frame	png.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_frame	snow.c	/^static int encode_frame(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_gray_bitstream	huffyuv.c	/^static int encode_gray_bitstream(HYuvContext *s, int count){$/;"	f	file:
encode_header	snow.c	/^static void encode_header(SnowContext *s){$/;"	f	file:
encode_init	asv1.c	/^static int encode_init(AVCodecContext *avctx){$/;"	f	file:
encode_init	ffv1.c	/^static int encode_init(AVCodecContext *avctx)$/;"	f	file:
encode_init	huffyuv.c	/^static int encode_init(AVCodecContext *avctx)$/;"	f	file:
encode_init	lcl.c	/^static int encode_init(AVCodecContext *avctx)$/;"	f	file:
encode_init	mpeg12.c	/^static int encode_init(AVCodecContext *avctx)$/;"	f	file:
encode_init	snow.c	/^static int encode_init(AVCodecContext *avctx)$/;"	f	file:
encode_line	ffv1.c	/^static inline int encode_line(FFV1Context *s, int w, int_fast16_t *sample[2], int plane_index, int bits){$/;"	f	file:
encode_mb	asv1.c	/^static inline int encode_mb(ASV1Context *a, DCTELEM block[6][64]){$/;"	f	file:
encode_mb	mpegvideo.c	/^static void encode_mb(MpegEncContext *s, int motion_x, int motion_y)$/;"	f	file:
encode_mb_hq	mpegvideo.c	/^static inline void encode_mb_hq(MpegEncContext *s, MpegEncContext *backup, MpegEncContext *best, int type, $/;"	f	file:
encode_mb_skip_run	mpeg12.c	/^static inline void encode_mb_skip_run(MpegEncContext *s, int run){$/;"	f	file:
encode_nals	x264.c	/^encode_nals(u_char *buf, int size, x264_nal_t *nals, int nnal)$/;"	f	file:
encode_picture	mpegvideo.c	/^static void encode_picture(MpegEncContext *s, int picture_number)$/;"	f	file:
encode_picture_lossless	mjpeg.c	/^static int encode_picture_lossless(AVCodecContext *avctx, unsigned char *buf, int buf_size, void *data){$/;"	f	file:
encode_plane	ffv1.c	/^static void encode_plane(FFV1Context *s, uint8_t *src, int w, int h, int stride, int plane_index){$/;"	f	file:
encode_q_branch	snow.c	/^static int encode_q_branch(SnowContext *s, int level, int x, int y){$/;"	f	file:
encode_rgb_frame	ffv1.c	/^static void encode_rgb_frame(FFV1Context *s, uint32_t *src, int w, int h, int stride){$/;"	f	file:
encode_subband	snow.c	/^static int encode_subband(SnowContext *s, SubBand *b, DWTELEM *src, DWTELEM *parent, int stride, int orientation){    $/;"	f	file:
encode_subband_c0run	snow.c	/^static int encode_subband_c0run(SnowContext *s, SubBand *b, DWTELEM *src, DWTELEM *parent, int stride, int orientation){$/;"	f	file:
encode_thread	mpegvideo.c	/^static int encode_thread(AVCodecContext *c, void *arg){$/;"	f	file:
encoded_picture	xvidff.c	/^    AVFrame encoded_picture;       \/** Encoded frame information *\/$/;"	m	struct:xvid_context	file:
encoder_handle	xvidff.c	/^    void *encoder_handle;          \/** Handle for XviD Encoder *\/$/;"	m	struct:xvid_context	file:
encoding	mpegvideo.h	/^    int encoding;     \/\/\/< true if we are encoding (vs decoding) $/;"	m	struct:MpegEncContext
end_frame	avcodec.h	/^    int end_frame;$/;"	m	struct:RcOverride
end_mb_y	mpegvideo.h	/^    int end_mb_y;              \/\/\/< end   mb_y of this thread (so current thread should process start_mb_y <= row < end_mb_y)$/;"	m	struct:MpegEncContext
end_of_row_loop	armv4l/jrevdct_arm.S	/^end_of_row_loop:$/;"	l
endmant	liba52/a52_internal.h	/^    uint8_t endmant[5];		\/* channel end mantissa *\/$/;"	m	struct:a52_state_s
enhancement_type	mpegvideo.h	/^    int enhancement_type;$/;"	m	struct:MpegEncContext
enstate	amr.c	/^    Speech_Encode_FrameState *enstate;$/;"	m	struct:AMRContext	file:
enstate	amr.c	/^    int *enstate;$/;"	m	struct:AMRContext	file:
entry	mpegvideo.h	/^    RateControlEntry *entry;$/;"	m	struct:RateControlContext
epzs_motion_search2	motion_est_template.c	/^static int epzs_motion_search2(MpegEncContext * s,$/;"	f	file:
epzs_motion_search4	motion_est_template.c	/^static int epzs_motion_search4(MpegEncContext * s,$/;"	f	file:
epzs_motion_search_internal	motion_est_template.c	/^static always_inline int epzs_motion_search_internal(MpegEncContext * s, int *mx_ptr, int *my_ptr,$/;"	f	file:
eq	ra144.c	/^static int eq(Real144_internal *glob, short *in, int *target)$/;"	f	file:
error	avcodec.h	/^    uint64_t error[4];$/;"	m	struct:AVCodecContext
error	libpostproc/postprocess_internal.h	/^	int error; 			\/\/\/< non zero on error$/;"	m	struct:PPMode
error_concealment	avcodec.h	/^    int error_concealment;$/;"	m	struct:AVCodecContext
error_count	mpegvideo.h	/^    int error_count;$/;"	m	struct:MpegEncContext
error_protection	mpegaudiodec.c	/^    int error_protection;$/;"	m	struct:MPADecodeContext	file:
error_rate	avcodec.h	/^    int error_rate;$/;"	m	struct:AVCodecContext
error_resilience	avcodec.h	/^    int error_resilience;$/;"	m	struct:AVCodecContext
error_resilience	mpegvideo.h	/^    int error_resilience;$/;"	m	struct:MpegEncContext
error_status_table	mpegvideo.h	/^    uint8_t *error_status_table;       \/\/\/< table of the error status of each MB  $/;"	m	struct:MpegEncContext
error_sum	ffv1.c	/^    uint16_t error_sum;$/;"	m	struct:VlcState	file:
esc3_level_length	mpegvideo.h	/^    int esc3_level_length;$/;"	m	struct:MpegEncContext
esc3_run_length	mpegvideo.h	/^    int esc3_run_length;$/;"	m	struct:MpegEncContext
escape_FF	mjpeg.c	/^static void escape_FF(MpegEncContext *s, int start)$/;"	f	file:
estimate_motion_thread	mpegvideo.c	/^static int estimate_motion_thread(AVCodecContext *c, void *arg){$/;"	f	file:
etable1	ra144.h	/^static const signed short etable1[5120]={$/;"	v
etable2	ra144.h	/^static const signed short etable2[5120]={$/;"	v
evalExpression	eval.c	/^static double evalExpression(Parser *p){$/;"	f	file:
evalFactor	eval.c	/^static double evalFactor(Parser *p){$/;"	f	file:
evalPow	eval.c	/^static double evalPow(Parser *p){$/;"	f	file:
evalPrimary	eval.c	/^static double evalPrimary(Parser *p){$/;"	f	file:
evalTerm	eval.c	/^static double evalTerm(Parser *p){$/;"	f	file:
even_table	sh4/idct_sh4.c	/^const	static float even_table[] __attribute__ ((aligned(8))) = {$/;"	v	file:
exchange_uv	mpeg12.c	/^static void exchange_uv(MpegEncContext *s){$/;"	f	file:
execute	avcodec.h	/^    int (*execute)(struct AVCodecContext *c, int (*func)(struct AVCodecContext *c2, void *arg), void **arg2, int *ret, int count);$/;"	m	struct:AVCodecContext
execute_ref_pic_marking	h264.c	/^static int execute_ref_pic_marking(H264Context *h, MMCO *mmco, int mmco_count){$/;"	f	file:
exp	g726.c	/^	int exp;    \/**< 4bit exponent *\/$/;"	m	struct:Float11	file:
exp	liba52/a52_internal.h	/^    uint8_t exp[256];		\/* decoded channel exponents *\/$/;"	m
exp_1	liba52/tables.h	/^static const int8_t exp_1[128] = {$/;"	v
exp_2	liba52/tables.h	/^static const int8_t exp_2[128] = {$/;"	v
exp_3	liba52/tables.h	/^static const int8_t exp_3[128] = {$/;"	v
exp_vlc	wmadec.c	/^    VLC exp_vlc;$/;"	m	struct:WMADecodeContext	file:
expbap_t	liba52/a52_internal.h	/^} expbap_t;$/;"	t
expected_bits	mpegvideo.h	/^    uint64_t expected_bits;$/;"	m	struct:RateControlEntry
exponent_band_22050	wmadata.h	/^static const uint8_t exponent_band_22050[3][25] = {$/;"	v
exponent_band_32000	wmadata.h	/^static const uint8_t exponent_band_32000[3][25] = {$/;"	v
exponent_band_44100	wmadata.h	/^static const uint8_t exponent_band_44100[3][25] = {$/;"	v
exponent_bands	wmadec.c	/^    uint16_t exponent_bands[BLOCK_NB_SIZES][25];$/;"	m	struct:WMADecodeContext	file:
exponent_high_bands	wmadec.c	/^    int exponent_high_bands[BLOCK_NB_SIZES][HIGH_BAND_MAX_SIZE]; $/;"	m	struct:WMADecodeContext	file:
exponent_high_sizes	wmadec.c	/^    int exponent_high_sizes[BLOCK_NB_SIZES];$/;"	m	struct:WMADecodeContext	file:
exponent_min	ac3enc.c	/^static void exponent_min(uint8_t exp[N\/2], uint8_t exp1[N\/2], int n)$/;"	f	file:
exponent_sizes	wmadec.c	/^    int exponent_sizes[BLOCK_NB_SIZES];$/;"	m	struct:WMADecodeContext	file:
exponents	wmadec.c	/^    float exponents[MAX_CHANNELS][BLOCK_MAX_SIZE] __attribute__((aligned(16)));$/;"	m	struct:WMADecodeContext	file:
exponents_from_scale_factors	mpegaudiodec.c	/^static void exponents_from_scale_factors(MPADecodeContext *s, $/;"	f	file:
exptab	dsputil.h	/^    FFTComplex *exptab;$/;"	m	struct:FFTContext
exptab	fft-test.c	/^FFTComplex *exptab;$/;"	v
exptab1	dsputil.h	/^    FFTComplex *exptab1; \/* only used by SSE code *\/$/;"	m	struct:FFTContext
extended_dmv	vc9.c	/^    int extended_dmv;     \/\/\/< Additional extended dmv range at P\/B frame-level$/;"	m	struct:VC9Context	file:
extended_mv	vc9.c	/^    int extended_mv;      \/\/\/< Ext MV in P\/B (not in Simple)$/;"	m	struct:VC9Context	file:
extqh	alpha/asm.h	140;"	d
extqh	alpha/asm.h	79;"	d
extqh	alpha/asm.h	93;"	d
extql	alpha/asm.h	138;"	d
extql	alpha/asm.h	77;"	d
extql	alpha/asm.h	91;"	d
extradata	avcodec.h	/^    void *extradata;$/;"	m	struct:AVCodecContext
extradata_size	avcodec.h	/^    int extradata_size;$/;"	m	struct:AVCodecContext
extwl	alpha/asm.h	139;"	d
extwl	alpha/asm.h	78;"	d
extwl	alpha/asm.h	92;"	d
f_code	mpegvideo.h	/^    int f_code;                 \/\/\/< forward MV resolution $/;"	m	struct:MpegEncContext
f_code	mpegvideo.h	/^    int f_code;$/;"	m	struct:RateControlEntry
f_count	mpegvideo.h	/^    int f_count;$/;"	m	struct:MpegEncContext
faacDecClose	faad.c	/^    void FAADAPI (*faacDecClose)(faacDecHandle hDecoder);$/;"	m	file:
faacDecDecode	faad.c	/^	int FAADAPI (*faacDecDecode)(faacDecHandle hDecoder,$/;"	m	file:
faacDecDecode	faad.c	/^	void *FAADAPI (*faacDecDecode)(faacDecHandle hDecoder,$/;"	m	file:
faacDecGetCurrentConfiguration	faad.c	/^    faacDecConfigurationPtr FAADAPI (*faacDecGetCurrentConfiguration)(faacDecHandle hDecoder);$/;"	m	file:
faacDecGetErrorMessage	faad.c	/^	char* FAADAPI (*faacDecGetErrorMessage)(unsigned char errcode);$/;"	m	file:
faacDecInit	faad.c	/^	int FAADAPI (*faacDecInit)(faacDecHandle hDecoder,$/;"	m	file:
faacDecInit	faad.c	/^	long FAADAPI (*faacDecInit)(faacDecHandle hDecoder,$/;"	m	file:
faacDecInit2	faad.c	/^	char FAADAPI (*faacDecInit2)(faacDecHandle hDecoder, unsigned char *pBuffer,$/;"	m	file:
faacDecInit2	faad.c	/^	int FAADAPI (*faacDecInit2)(faacDecHandle hDecoder, unsigned char *pBuffer,$/;"	m	file:
faacDecOpen	faad.c	/^    faacDecHandle FAADAPI (*faacDecOpen)(void);$/;"	m	file:
faacDecSetConfiguration	faad.c	/^	int FAADAPI (*faacDecSetConfiguration)(faacDecHandle hDecoder,$/;"	m	file:
faacDecSetConfiguration	faad.c	/^	unsigned char FAADAPI (*faacDecSetConfiguration)(faacDecHandle hDecoder,$/;"	m	file:
faac_decode_end	faad.c	/^static int faac_decode_end(AVCodecContext *avctx)$/;"	f	file:
faac_decode_frame	faad.c	/^static int faac_decode_frame(AVCodecContext *avctx,$/;"	f	file:
faac_decode_init	faad.c	/^static int faac_decode_init(AVCodecContext *avctx)$/;"	f	file:
faac_encoder	faac.c	/^AVCodec faac_encoder = {$/;"	v
faac_handle	faac.c	/^    faacEncHandle faac_handle;$/;"	m	struct:FaacAudioContext	file:
faac_handle	faad.c	/^    void* faac_handle;		\/* FAAD library handle *\/$/;"	m	file:
faac_init_mp4	faad.c	/^static int faac_init_mp4(AVCodecContext *avctx)$/;"	f	file:
faac_srates	faad.c	/^static const unsigned long faac_srates[] =$/;"	v	file:
factor	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
fast_dct_quantize	mpegvideo.h	/^    int (*fast_dct_quantize)(struct MpegEncContext *s, DCTELEM *block\/*align 16*\/, int n, int qscale, int *overflow);$/;"	m	struct:MpegEncContext
fastuvmc	vc9.c	/^    int fastuvmc;         \/\/\/< Rounding of qpel vector to hpel ? (not in Simple)$/;"	m	struct:VC9Context	file:
fat_c_predictor_table	truemotion1.c	/^    uint32_t fat_c_predictor_table[1024];$/;"	m	struct:TrueMotion1Context	file:
fat_cdt	truemotion1.c	/^    int16_t fat_cdt[8];$/;"	m	struct:TrueMotion1Context	file:
fat_cdt2	truemotion1data.h	/^static int16_t fat_cdt2[8] = { 0, -20, 15, -80, 100, -160, 180, -160 };$/;"	v
fat_cdt3	truemotion1data.h	/^static int16_t fat_cdt3[8] = { 0, 40, 80, -76, 160, -154, 236, -236 };$/;"	v
fat_cdts	truemotion1data.h	/^static int16_t *fat_cdts[] = { fat_cdt2, fat_cdt2, fat_cdt2, fat_cdt3, NULL };$/;"	v
fat_y_predictor_table	truemotion1.c	/^    uint32_t fat_y_predictor_table[1024];$/;"	m	struct:TrueMotion1Context	file:
fat_ydt	truemotion1.c	/^    int16_t fat_ydt[8];$/;"	m	struct:TrueMotion1Context	file:
fat_ydt3	truemotion1data.h	/^static int16_t fat_ydt3[8] = { 0, -15, 50, -50, 115, -115, 235, -235 };$/;"	v
fat_ydt4	truemotion1data.h	/^static int16_t fat_ydt4[8] = { 0, 40, 80, -76, 160, -154, 236, -236 };$/;"	v
fat_ydts	truemotion1data.h	/^static int16_t *fat_ydts[] = { fat_ydt3, fat_ydt3, fat_ydt3, fat_ydt4, NULL };$/;"	v
fbw_expbap	liba52/a52_internal.h	/^    expbap_t fbw_expbap[5];$/;"	m	struct:a52_state_s
fcm	vc9.c	/^    uint8_t fcm; \/\/\/< 0->Progressive, 2->Frame-Interlace, 3->Field-Interlace$/;"	m	struct:VC9Context	file:
fcode_tab	h263.c	/^static uint8_t fcode_tab[MAX_MV*2+1];$/;"	v	file:
fcode_tab	mpeg12.c	/^static uint8_t fcode_tab[MAX_MV*2+1];$/;"	v	file:
fcode_tab	mpegvideo.h	/^    uint8_t *fcode_tab;               \/\/\/< smallest fcode needed for each MV $/;"	m	struct:MpegEncContext
fdct	dsputil.h	/^    void (*fdct)(DCTELEM *block\/* align 16*\/);$/;"	m	struct:DSPContext
fdct	dv.c	/^    void (*fdct[2])(DCTELEM *block);$/;"	m	struct:DVVideoContext	file:
fdct	fdctref.c	/^void fdct(block)$/;"	f
fdct248	dsputil.h	/^    void (*fdct248)(DCTELEM *block\/* align 16*\/);$/;"	m	struct:DSPContext
fdct_altivec	ppc/fdct_altivec.c	/^void fdct_altivec(int16_t *block)$/;"	f
fdct_col	i386/fdct_mmx.c	/^static always_inline void fdct_col(const int16_t *in, int16_t *out, int offset)$/;"	f	file:
fdct_ifast	jfdctfst.c	/^fdct_ifast (DCTELEM * data)$/;"	f
fdct_ifast248	jfdctfst.c	/^fdct_ifast248 (DCTELEM * data)$/;"	f
fdct_row_mmx	i386/fdct_mmx.c	/^static always_inline void fdct_row_mmx(const int16_t *in, int16_t *out, const int16_t *table)$/;"	f	file:
fdct_row_mmx2	i386/fdct_mmx.c	/^static always_inline void fdct_row_mmx2(const int16_t *in, int16_t *out, const int16_t *table)$/;"	f	file:
fdct_row_sse2	i386/fdct_mmx.c	/^static always_inline void fdct_row_sse2(const int16_t *in, int16_t *out)$/;"	f	file:
fdctconsts	ppc/fdct_altivec.c	/^static vector float fdctconsts[3] = {$/;"	v	file:
fdecay	ac3.h	/^    int sgain, sdecay, fdecay, dbknee, floor;$/;"	m	struct:AC3BitAllocParameters
fdecaycod	ac3enc.c	/^    int sgaincod, sdecaycod, fdecaycod, dbkneecod, floorcod; $/;"	m	struct:AC3EncodeContext	file:
fdecaytab	ac3tab.h	/^static const uint8_t fdecaytab[4]={ $/;"	v
fetch_diagonal_mv	h264.c	/^static inline int fetch_diagonal_mv(H264Context *h, const int16_t **C, int i, int list, int part_width){$/;"	f	file:
fetch_timestamp	avcodec.h	/^    int fetch_timestamp;$/;"	m	struct:AVCodecParserContext
ff_add_pixels_clamped	armv4l/dsputil_arm.c	/^static void (*ff_add_pixels_clamped)(const DCTELEM *block, uint8_t *pixels, int line_size);$/;"	v	file:
ff_aic_dc_scale_table	h263data.h	/^uint8_t ff_aic_dc_scale_table[32]={$/;"	v
ff_alternate_horizontal_scan	dsputil.c	/^const uint8_t ff_alternate_horizontal_scan[64] = {$/;"	v
ff_alternate_vertical_scan	dsputil.c	/^const uint8_t ff_alternate_vertical_scan[64] = {$/;"	v
ff_block_permute	dsputil.c	/^void ff_block_permute(DCTELEM *block, uint8_t *permutation, const uint8_t *scantable, int last)$/;"	f
ff_build_rac_states	rangecoder.c	/^void ff_build_rac_states(RangeCoder *c, int factor, int max_p){$/;"	f
ff_clean_h263_qscales	h263.c	/^void ff_clean_h263_qscales(MpegEncContext *s){$/;"	f
ff_clean_intra_table_entries	mpegvideo.c	/^void ff_clean_intra_table_entries(MpegEncContext *s)$/;"	f
ff_clean_mpeg4_qscales	h263.c	/^void ff_clean_mpeg4_qscales(MpegEncContext *s){$/;"	f
ff_combine_frame	parser.c	/^int ff_combine_frame(ParseContext *pc, int next, uint8_t **buf, int *buf_size)$/;"	f
ff_copy_bits	mpegvideo.c	/^void ff_copy_bits(PutBitContext *pb, uint8_t *src, int length)$/;"	f
ff_default_chroma_qscale_table	mpegvideo.c	/^static const uint8_t ff_default_chroma_qscale_table[32]={$/;"	v	file:
ff_draw_horiz_band	mpegvideo.c	/^void ff_draw_horiz_band(MpegEncContext *s, int y, int h){$/;"	f
ff_emulated_edge_mc	mpegvideo.c	/^void ff_emulated_edge_mc(uint8_t *buf, uint8_t *src, int linesize, int block_w, int block_h, $/;"	f
ff_epzs_motion_search	motion_est_template.c	/^inline int ff_epzs_motion_search(MpegEncContext * s, int *mx_ptr, int *my_ptr,$/;"	f
ff_er_add_slice	error_resilience.c	/^void ff_er_add_slice(MpegEncContext *s, int startx, int starty, int endx, int endy, int status){$/;"	f
ff_er_frame_end	error_resilience.c	/^void ff_er_frame_end(MpegEncContext *s){$/;"	f
ff_er_frame_start	error_resilience.c	/^void ff_er_frame_start(MpegEncContext *s){$/;"	f
ff_estimate_b_frame_motion	motion_est.c	/^void ff_estimate_b_frame_motion(MpegEncContext * s,$/;"	f
ff_estimate_motion_b	motion_est.c	/^static int ff_estimate_motion_b(MpegEncContext * s,$/;"	f	file:
ff_estimate_p_frame_motion	motion_est.c	/^void ff_estimate_p_frame_motion(MpegEncContext * s,$/;"	f
ff_eval	eval.c	/^double ff_eval(char *s, double *const_value, const char **const_name,$/;"	f
ff_faandct	faandct.c	/^void ff_faandct(DCTELEM * data)$/;"	f
ff_faandct248	faandct.c	/^void ff_faandct248(DCTELEM * data)$/;"	f
ff_fdct248_islow	jfdctint.c	/^ff_fdct248_islow (DCTELEM * data)$/;"	f
ff_fdct_mlib	mlib/dsputil_mlib.c	/^static void ff_fdct_mlib(DCTELEM *data)$/;"	f	file:
ff_fdct_mmx	i386/fdct_mmx.c	/^void ff_fdct_mmx(int16_t *block)$/;"	f
ff_fdct_mmx2	i386/fdct_mmx.c	/^void ff_fdct_mmx2(int16_t *block)$/;"	f
ff_fdct_sse2	i386/fdct_mmx.c	/^void ff_fdct_sse2(int16_t *block) $/;"	f
ff_fft_calc	dsputil.h	/^static inline void ff_fft_calc(FFTContext *s, FFTComplex *z)$/;"	f
ff_fft_calc_altivec	ppc/fft_altivec.c	/^void ff_fft_calc_altivec(FFTContext *s, FFTComplex *z)$/;"	f
ff_fft_calc_c	fft.c	/^void ff_fft_calc_c(FFTContext *s, FFTComplex *z)$/;"	f
ff_fft_calc_sse	i386/fft_sse.c	/^void ff_fft_calc_sse(FFTContext *s, FFTComplex *z)$/;"	f
ff_fft_end	fft.c	/^void ff_fft_end(FFTContext *s)$/;"	f
ff_fft_init	fft.c	/^int ff_fft_init(FFTContext *s, int nbits, int inverse)$/;"	f
ff_fft_permute	fft.c	/^void ff_fft_permute(FFTContext *s, FFTComplex *z)$/;"	f
ff_find_unused_picture	mpegvideo.c	/^int ff_find_unused_picture(MpegEncContext *s, int shared){$/;"	f
ff_fix_long_mvs	motion_est.c	/^void ff_fix_long_mvs(MpegEncContext * s, uint8_t *field_select_table, int field_select, $/;"	f
ff_fix_long_p_mvs	motion_est.c	/^void ff_fix_long_p_mvs(MpegEncContext * s)$/;"	f
ff_flv_encode_picture_header	h263.c	/^void ff_flv_encode_picture_header(MpegEncContext * s, int picture_number)$/;"	f
ff_gcd	utils.c	/^int64_t ff_gcd(int64_t a, int64_t b){$/;"	f
ff_get_best_fcode	motion_est.c	/^int ff_get_best_fcode(MpegEncContext * s, int16_t (*mv_table)[2], int type)$/;"	f
ff_get_fourcc	common.h	/^static inline int ff_get_fourcc(const char *s){$/;"	f
ff_get_mb_score	motion_est_template.c	/^int inline ff_get_mb_score(MpegEncContext * s, int mx, int my, int src_index,$/;"	f
ff_golomb_vlc_len	golomb.c	/^const uint8_t ff_golomb_vlc_len[512]={$/;"	v
ff_h261_encode_init	h261.c	/^void ff_h261_encode_init(MpegEncContext *s){$/;"	f
ff_h261_encode_mb	h261.c	/^void ff_h261_encode_mb(MpegEncContext * s,$/;"	f
ff_h261_encode_picture_header	h261.c	/^void ff_h261_encode_picture_header(MpegEncContext * s, int picture_number){$/;"	f
ff_h261_get_picture_format	h261.c	/^static int ff_h261_get_picture_format(int width, int height){$/;"	f	file:
ff_h261_loop_filter	h261.c	/^void ff_h261_loop_filter(MpegEncContext *s){$/;"	f
ff_h261_reorder_mb_index	h261.c	/^void ff_h261_reorder_mb_index(MpegEncContext* s){$/;"	f
ff_h261_resync	h261.c	/^static int ff_h261_resync(H261Context *h){$/;"	f	file:
ff_h263_chroma_qscale_table	h263data.h	/^const uint8_t ff_h263_chroma_qscale_table[32]={$/;"	v
ff_h263_decode_end	h263dec.c	/^int ff_h263_decode_end(AVCodecContext *avctx)$/;"	f
ff_h263_decode_frame	h263dec.c	/^int ff_h263_decode_frame(AVCodecContext *avctx, $/;"	f
ff_h263_decode_init	h263dec.c	/^int ff_h263_decode_init(AVCodecContext *avctx)$/;"	f
ff_h263_decode_mb	h263.c	/^int ff_h263_decode_mb(MpegEncContext *s,$/;"	f
ff_h263_decode_mba	h263.c	/^int ff_h263_decode_mba(MpegEncContext *s)$/;"	f
ff_h263_encode_mba	h263.c	/^void ff_h263_encode_mba(MpegEncContext *s)$/;"	f
ff_h263_encode_motion	h263.c	/^void ff_h263_encode_motion(MpegEncContext * s, int val, int f_code)$/;"	f
ff_h263_encode_motion_vector	h263.c	/^static inline void ff_h263_encode_motion_vector(MpegEncContext * s, int x, int y, int f_code){$/;"	f	file:
ff_h263_get_gob_height	h263.c	/^int ff_h263_get_gob_height(MpegEncContext *s){$/;"	f
ff_h263_loop_filter	h263.c	/^void ff_h263_loop_filter(MpegEncContext * s){$/;"	f
ff_h263_loop_filter_strength	h263data.h	/^const uint8_t ff_h263_loop_filter_strength[32]={$/;"	v
ff_h263_resync	h263.c	/^int ff_h263_resync(MpegEncContext *s){$/;"	f
ff_h263_round_chroma	mpegvideo.c	/^inline int ff_h263_round_chroma(int x){$/;"	f
ff_h263_update_motion_val	h263.c	/^void ff_h263_update_motion_val(MpegEncContext * s){$/;"	f
ff_h264_idct_add_c	h264idct.c	/^void ff_h264_idct_add_c(uint8_t *dst, DCTELEM *block, int stride){$/;"	f
ff_h264_lowres_idct_add_c	h264idct.c	/^void ff_h264_lowres_idct_add_c(uint8_t *dst, int stride, DCTELEM *block){$/;"	f
ff_h264_lowres_idct_put_c	h264idct.c	/^void ff_h264_lowres_idct_put_c(uint8_t *dst, int stride, DCTELEM *block){$/;"	f
ff_h264_lps_range	cabac.c	/^const uint8_t ff_h264_lps_range[64][4]= {$/;"	v
ff_h264_lps_state	cabac.c	/^const uint8_t ff_h264_lps_state[64]= {$/;"	v
ff_h264_mps_state	cabac.c	/^const uint8_t ff_h264_mps_state[64]= {$/;"	v
ff_h264_norm_shift	cabac.c	/^const uint8_t ff_h264_norm_shift[256]= {$/;"	v
ff_idct_add_mlib	mlib/dsputil_mlib.c	/^static void ff_idct_add_mlib(uint8_t *dest, int line_size, DCTELEM *data)$/;"	f	file:
ff_idct_mlib	mlib/dsputil_mlib.c	/^static void ff_idct_mlib(DCTELEM *data)$/;"	f	file:
ff_idct_put_mlib	mlib/dsputil_mlib.c	/^static void ff_idct_put_mlib(uint8_t *dest, int line_size, DCTELEM *data)$/;"	f	file:
ff_imdct_calc	mdct.c	/^void ff_imdct_calc(MDCTContext *s, FFTSample *output, $/;"	f
ff_init_block_index	mpegvideo.c	/^void ff_init_block_index(MpegEncContext *s){ \/\/FIXME maybe rename$/;"	f
ff_init_cabac_decoder	cabac.c	/^void ff_init_cabac_decoder(CABACContext *c, const uint8_t *buf, int buf_size){$/;"	f
ff_init_cabac_encoder	cabac.c	/^void ff_init_cabac_encoder(CABACContext *c, uint8_t *buf, int buf_size){$/;"	f
ff_init_cabac_states	cabac.c	/^void ff_init_cabac_states(CABACContext *c, uint8_t const (*lps_range)[4], $/;"	f
ff_init_me	motion_est.c	/^void ff_init_me(MpegEncContext *s){$/;"	f
ff_init_range_decoder	rangecoder.c	/^void ff_init_range_decoder(RangeCoder *c, const uint8_t *buf, int buf_size){$/;"	f
ff_init_range_encoder	rangecoder.c	/^void ff_init_range_encoder(RangeCoder *c, uint8_t *buf, int buf_size){$/;"	f
ff_init_scantable	mpegvideo.c	/^void ff_init_scantable(uint8_t *permutation, ScanTable *st, const uint8_t *src_scantable){$/;"	f
ff_interleaved_golomb_vlc_len	golomb.c	/^const uint8_t ff_interleaved_golomb_vlc_len[256]={$/;"	v
ff_interleaved_se_golomb_vlc_code	golomb.c	/^const int8_t ff_interleaved_se_golomb_vlc_code[256]={ $/;"	v
ff_interleaved_ue_golomb_vlc_code	golomb.c	/^const uint8_t ff_interleaved_ue_golomb_vlc_code[256]={ $/;"	v
ff_jpeg_fdct_islow	jfdctint.c	/^ff_jpeg_fdct_islow (DCTELEM * data)$/;"	f
ff_jref_idct1_add	dsputil.c	/^static void ff_jref_idct1_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct1_put	dsputil.c	/^static void ff_jref_idct1_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct2_add	dsputil.c	/^static void ff_jref_idct2_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct2_put	dsputil.c	/^static void ff_jref_idct2_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct4_add	dsputil.c	/^static void ff_jref_idct4_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct4_put	dsputil.c	/^static void ff_jref_idct4_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct_add	dsputil.c	/^static void ff_jref_idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_jref_idct_put	dsputil.c	/^static void ff_jref_idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_libmpeg2mmx2_idct_add	i386/dsputil_mmx.c	/^static void ff_libmpeg2mmx2_idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_libmpeg2mmx2_idct_put	i386/dsputil_mmx.c	/^static void ff_libmpeg2mmx2_idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_libmpeg2mmx_idct_add	i386/dsputil_mmx.c	/^static void ff_libmpeg2mmx_idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_libmpeg2mmx_idct_put	i386/dsputil_mmx.c	/^static void ff_libmpeg2mmx_idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
ff_log2_tab	utils.c	/^const uint8_t ff_log2_tab[256]={$/;"	v
ff_mba_length	h263data.h	/^const uint8_t ff_mba_length[6]={$/;"	v
ff_mba_max	h263data.h	/^const uint16_t ff_mba_max[6]={$/;"	v
ff_mdct_calc	mdct.c	/^void ff_mdct_calc(MDCTContext *s, FFTSample *out, $/;"	f
ff_mdct_end	mdct.c	/^void ff_mdct_end(MDCTContext *s)$/;"	f
ff_mdct_init	mdct.c	/^int ff_mdct_init(MDCTContext *s, int nbits, int inverse)$/;"	f
ff_mjpeg_stuffing	mjpeg.c	/^void ff_mjpeg_stuffing(PutBitContext * pbc)$/;"	f
ff_mmi_idct	ps2/idct_mmi.c	/^void ff_mmi_idct(int16_t * block)$/;"	f
ff_mmi_idct_add	ps2/idct_mmi.c	/^void ff_mmi_idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
ff_mmi_idct_put	ps2/idct_mmi.c	/^void ff_mmi_idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
ff_mpa_check_header	mpegaudio.h	/^static inline int ff_mpa_check_header(uint32_t header){$/;"	f
ff_mpa_synth_filter	mpegaudiodec.c	/^void ff_mpa_synth_filter(MPA_INT *synth_buf_ptr, int *synth_buf_offset,$/;"	f
ff_mpa_synth_init	mpegaudiodec.c	/^void ff_mpa_synth_init(MPA_INT *window)$/;"	f
ff_mpeg1_clean_buffers	mpeg12.c	/^void ff_mpeg1_clean_buffers(MpegEncContext *s){$/;"	f
ff_mpeg1_dc_scale_table	mpeg12data.h	/^uint8_t ff_mpeg1_dc_scale_table[128]={$/;"	v
ff_mpeg1_default_intra_matrix	mpeg12data.h	/^const int16_t ff_mpeg1_default_intra_matrix[64] = {$/;"	v
ff_mpeg1_default_non_intra_matrix	mpeg12data.h	/^const int16_t ff_mpeg1_default_non_intra_matrix[64] = {$/;"	v
ff_mpeg1_encode_init	mpeg12.c	/^void ff_mpeg1_encode_init(MpegEncContext *s)$/;"	f
ff_mpeg1_encode_slice_header	mpeg12.c	/^void ff_mpeg1_encode_slice_header(MpegEncContext *s){$/;"	f
ff_mpeg1_find_frame_end	mpeg12.c	/^int ff_mpeg1_find_frame_end(ParseContext *pc, const uint8_t *buf, int buf_size)$/;"	f
ff_mpeg4_c_dc_scale_table	mpeg4data.h	/^uint8_t ff_mpeg4_c_dc_scale_table[32]={$/;"	v
ff_mpeg4_clean_buffers	h263.c	/^void ff_mpeg4_clean_buffers(MpegEncContext *s)$/;"	f
ff_mpeg4_decode_mb	h263.c	/^int ff_mpeg4_decode_mb(MpegEncContext *s,$/;"	f
ff_mpeg4_decode_partitions	h263.c	/^int ff_mpeg4_decode_partitions(MpegEncContext *s)$/;"	f
ff_mpeg4_decode_picture_header	h263.c	/^int ff_mpeg4_decode_picture_header(MpegEncContext * s, GetBitContext *gb)$/;"	f
ff_mpeg4_default_intra_matrix	mpeg4data.h	/^const int16_t ff_mpeg4_default_intra_matrix[64] = {$/;"	v
ff_mpeg4_default_non_intra_matrix	mpeg4data.h	/^const int16_t ff_mpeg4_default_non_intra_matrix[64] = {$/;"	v
ff_mpeg4_encode_video_packet_header	h263.c	/^void ff_mpeg4_encode_video_packet_header(MpegEncContext *s)$/;"	f
ff_mpeg4_find_frame_end	h263dec.c	/^int ff_mpeg4_find_frame_end(ParseContext *pc, const uint8_t *buf, int buf_size){$/;"	f
ff_mpeg4_get_video_packet_prefix_length	h263.c	/^int ff_mpeg4_get_video_packet_prefix_length(MpegEncContext *s){$/;"	f
ff_mpeg4_init_partitions	h263.c	/^void ff_mpeg4_init_partitions(MpegEncContext *s)$/;"	f
ff_mpeg4_merge_partitions	h263.c	/^void ff_mpeg4_merge_partitions(MpegEncContext *s)$/;"	f
ff_mpeg4_pred_dc	h263.c	/^static inline int ff_mpeg4_pred_dc(MpegEncContext * s, int n, int level, int *dir_ptr, int encoding)$/;"	f	file:
ff_mpeg4_resync_prefix	mpeg4data.h	/^const uint16_t ff_mpeg4_resync_prefix[8]={$/;"	v
ff_mpeg4_set_direct_mv	h263.c	/^int ff_mpeg4_set_direct_mv(MpegEncContext *s, int mx, int my){$/;"	f
ff_mpeg4_stuffing	h263.c	/^void ff_mpeg4_stuffing(PutBitContext * pbc)$/;"	f
ff_mpeg4_y_dc_scale_table	mpeg4data.h	/^uint8_t ff_mpeg4_y_dc_scale_table[32]={$/;"	v
ff_mpeg_flush	mpegvideo.c	/^void ff_mpeg_flush(AVCodecContext *avctx){$/;"	f
ff_msmp4_dc_chroma_vlc	msmpeg4.c	/^VLC ff_msmp4_dc_chroma_vlc[2];$/;"	v
ff_msmp4_dc_luma_vlc	msmpeg4.c	/^VLC ff_msmp4_dc_luma_vlc[2];$/;"	v
ff_msmp4_mb_i_table	msmpeg4data.h	/^const uint16_t ff_msmp4_mb_i_table[64][2] = {$/;"	v
ff_msmp4_mb_i_vlc	msmpeg4.c	/^VLC ff_msmp4_mb_i_vlc;$/;"	v
ff_msmpeg4_decode_init	msmpeg4.c	/^int ff_msmpeg4_decode_init(MpegEncContext *s)$/;"	f
ff_msmpeg4_encode_init	msmpeg4.c	/^void ff_msmpeg4_encode_init(MpegEncContext *s)$/;"	f
ff_mspel_motion	wmv2.c	/^void ff_mspel_motion(MpegEncContext *s,$/;"	f
ff_parse_close	parser.c	/^void ff_parse_close(AVCodecParserContext *s)$/;"	f
ff_pre_estimate_p_frame_motion	motion_est.c	/^int ff_pre_estimate_p_frame_motion(MpegEncContext * s,$/;"	f
ff_print_debug_info	mpegvideo.c	/^void ff_print_debug_info(MpegEncContext *s, AVFrame *pict){$/;"	f
ff_put_pixels_clamped	armv4l/dsputil_arm.c	/^static void (*ff_put_pixels_clamped)(const DCTELEM *block, uint8_t *pixels, int line_size);$/;"	v	file:
ff_rac_terminate	rangecoder.c	/^int ff_rac_terminate(RangeCoder *c){$/;"	f
ff_rate_control_init	ratecontrol.c	/^int ff_rate_control_init(MpegEncContext *s)$/;"	f
ff_rate_control_uninit	ratecontrol.c	/^void ff_rate_control_uninit(MpegEncContext *s)$/;"	f
ff_rate_estimate_qscale	ratecontrol.c	/^float ff_rate_estimate_qscale(MpegEncContext *s)$/;"	f
ff_se_golomb_vlc_code	golomb.c	/^const int8_t ff_se_golomb_vlc_code[512]={ $/;"	v
ff_set_cmp	dsputil.c	/^void ff_set_cmp(DSPContext* c, me_cmp_func *cmp, int type){$/;"	f
ff_set_mpeg4_time	h263.c	/^void ff_set_mpeg4_time(MpegEncContext * s, int picture_number){$/;"	f
ff_set_qscale	h263.c	/^void ff_set_qscale(MpegEncContext * s, int qscale)$/;"	f
ff_simple_idct_add_mmx	i386/simple_idct_mmx.c	/^void ff_simple_idct_add_mmx(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
ff_simple_idct_mmx	i386/simple_idct_mmx.c	/^void ff_simple_idct_mmx(int16_t *block)$/;"	f
ff_simple_idct_put_mmx	i386/simple_idct_mmx.c	/^void ff_simple_idct_put_mmx(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
ff_spatial_dwt	snow.c	/^void ff_spatial_dwt(DWTELEM *buffer, int width, int height, int stride, int type, int decomposition_count){$/;"	f
ff_spatial_idwt	snow.c	/^void ff_spatial_idwt(DWTELEM *buffer, int width, int height, int stride, int type, int decomposition_count){$/;"	f
ff_spatial_idwt_init	snow.c	/^void ff_spatial_idwt_init(dwt_compose_t *cs, DWTELEM *buffer, int width, int height, int stride, int type, int decomposition_count){$/;"	f
ff_spatial_idwt_slice	snow.c	/^void ff_spatial_idwt_slice(dwt_compose_t *cs, DWTELEM *buffer, int width, int height, int stride, int type, int decomposition_count, int y){$/;"	f
ff_sqrt	common.h	/^static inline int ff_sqrt(int a)$/;"	f
ff_sqrt_tab	utils.c	/^const uint8_t ff_sqrt_tab[128]={$/;"	v
ff_table0_dc_chroma	msmpeg4data.h	/^const uint32_t ff_table0_dc_chroma[120][2] = {$/;"	v
ff_table0_dc_lum	msmpeg4data.h	/^const uint32_t ff_table0_dc_lum[120][2] = {$/;"	v
ff_table1_dc_chroma	msmpeg4data.h	/^const uint32_t ff_table1_dc_chroma[120][2] = {$/;"	v
ff_table1_dc_lum	msmpeg4data.h	/^const uint32_t ff_table1_dc_lum[120][2] = {$/;"	v
ff_thread_func	beosthread.c	/^static int32 ff_thread_func(void *v){$/;"	f	file:
ff_ue_golomb_len	golomb.c	/^const uint8_t ff_ue_golomb_len[256]={ $/;"	v
ff_ue_golomb_vlc_code	golomb.c	/^const uint8_t ff_ue_golomb_vlc_code[512]={ $/;"	v
ff_update_block_index	mpegvideo.h	/^static inline void ff_update_block_index(MpegEncContext *s){$/;"	f
ff_update_duplicate_context	mpegvideo.c	/^void ff_update_duplicate_context(MpegEncContext *dst, MpegEncContext *src){$/;"	f
ff_vbv_update	ratecontrol.c	/^int ff_vbv_update(MpegEncContext *s, int frame_size){$/;"	f
ff_vmrglb	ppc/gcc_fixes.h	/^static inline vector signed char ff_vmrglb (vector signed char const A,$/;"	f
ff_vmrglh	ppc/gcc_fixes.h	/^static inline vector signed short ff_vmrglh (vector signed short const A,$/;"	f
ff_vmrglw	ppc/gcc_fixes.h	/^static inline vector signed int ff_vmrglw (vector signed int const A,$/;"	f
ff_wmv2_add_mb	wmv2.c	/^void ff_wmv2_add_mb(MpegEncContext *s, DCTELEM block1[6][64], uint8_t *dest_y, uint8_t *dest_cb, uint8_t *dest_cr){$/;"	f
ff_wmv2_decode_picture_header	wmv2.c	/^int ff_wmv2_decode_picture_header(MpegEncContext * s)$/;"	f
ff_wmv2_decode_secondary_picture_header	wmv2.c	/^int ff_wmv2_decode_secondary_picture_header(MpegEncContext * s)$/;"	f
ff_wmv2_encode_mb	wmv2.c	/^void ff_wmv2_encode_mb(MpegEncContext * s, $/;"	f
ff_wmv2_encode_picture_header	wmv2.c	/^int ff_wmv2_encode_picture_header(MpegEncContext * s, int picture_number)$/;"	f
ff_write_pass1_stats	ratecontrol.c	/^void ff_write_pass1_stats(MpegEncContext *s){$/;"	f
ff_write_quant_matrix	mpegvideo.c	/^void ff_write_quant_matrix(PutBitContext *pb, int16_t *matrix){$/;"	f
ff_xvid_encode_close	xvidff.c	/^int ff_xvid_encode_close(AVCodecContext *avctx) {$/;"	f
ff_xvid_encode_frame	xvidff.c	/^int ff_xvid_encode_frame(AVCodecContext *avctx,$/;"	f
ff_xvid_encode_init	xvidff.c	/^int ff_xvid_encode_init(AVCodecContext *avctx)  {$/;"	f
ff_yuv420p_list	mpegvideo.c	/^enum PixelFormat ff_yuv420p_list[2]= {PIX_FMT_YUV420P, -1};$/;"	v
ff_zigzag248_direct	dsputil.c	/^const uint8_t ff_zigzag248_direct[64] = {$/;"	v
ff_zigzag_direct	dsputil.c	/^const uint8_t ff_zigzag_direct[64] = {$/;"	v
ffmpeg_version	mpegvideo.h	/^    int ffmpeg_version;$/;"	m	struct:MpegEncContext
fft	ac3enc.c	/^static void fft(IComplex *z, int ln)$/;"	f	file:
fft	dsputil.h	/^    FFTContext fft;$/;"	m	struct:MDCTContext
fft_calc	dsputil.h	/^    void (*fft_calc)(struct FFTContext *s, FFTComplex *z);$/;"	m	struct:FFTContext
fft_init	ac3enc.c	/^static void fft_init(int ln)$/;"	f	file:
fft_ref	fft-test.c	/^void fft_ref(FFTComplex *tabr, FFTComplex *tab, int nbits)$/;"	f
fft_ref_init	fft-test.c	/^void fft_ref_init(int nbits, int inverse)$/;"	f
fft_rev	ac3tab.h	/^static int16_t fft_rev[512];$/;"	v
fftorder	liba52/imdct.c	/^static uint8_t fftorder[] = {$/;"	v	file:
ffv1_decoder	ffv1.c	/^AVCodec ffv1_decoder = {$/;"	v
ffv1_encoder	ffv1.c	/^AVCodec ffv1_encoder = {$/;"	v
ffvhuff_decoder	huffyuv.c	/^AVCodec ffvhuff_decoder = {$/;"	v
ffvhuff_encoder	huffyuv.c	/^AVCodec ffvhuff_encoder = {$/;"	v
fgaincod	ac3enc.c	/^    int fgaincod[AC3_MAX_CHANNELS];$/;"	m	struct:AC3EncodeContext	file:
fgaintab	ac3tab.h	/^static const uint16_t fgaintab[8]= {$/;"	v
field_poc	mpegvideo.h	/^    int field_poc[2];           \/\/\/< h264 top\/bottom POC$/;"	m	struct:Picture
field_ref_list	h264.c	/^    Picture field_ref_list[2][32]; \/\/FIXME size?$/;"	m	struct:H264Context	file:
field_scan	h264data.h	/^static const uint8_t field_scan[16]={$/;"	v
field_select	mpegvideo.h	/^    int field_select[2][2];$/;"	m	struct:MpegEncContext
fill_caches	h264.c	/^static inline void fill_caches(H264Context *h, int mb_type, int for_deblock){$/;"	f	file:
fill_default_ref_list	h264.c	/^static int fill_default_ref_list(H264Context *h){$/;"	f	file:
fill_random	motion_test.c	/^void fill_random(uint8_t *tab, int size)$/;"	f
fill_rectangle	h264.c	/^static inline void fill_rectangle(void *vp, int w, int h, int stride, uint32_t val, int size){ \/\/FIXME ensure this IS inlined$/;"	f	file:
filter	mpegaudio.c	/^static void filter(MpegAudioContext *s, int ch, short *samples, int incr)$/;"	f	file:
filter181	error_resilience.c	/^static void filter181(int16_t *data, int width, int height, int stride){$/;"	f	file:
filter_bank	mpegaudiotab.h	/^static int16_t filter_bank[512];$/;"	v
filter_bank	resample2.c	/^    FELEM *filter_bank;$/;"	m	struct:AVResampleContext	file:
filter_channels	resample.c	/^    int input_channels, output_channels, filter_channels;$/;"	m	struct:ReSampleContext	file:
filter_length	resample2.c	/^    int filter_length;$/;"	m	struct:AVResampleContext	file:
filter_mb	h264.c	/^static void filter_mb( H264Context *h, int mb_x, int mb_y, uint8_t *img_y, uint8_t *img_cb, uint8_t *img_cr) {$/;"	f	file:
filter_mb_edgech	h264.c	/^static void filter_mb_edgech( H264Context *h, uint8_t *pix, int stride, int bS[4], int qp ) {$/;"	f	file:
filter_mb_edgecv	h264.c	/^static void filter_mb_edgecv( H264Context *h, uint8_t *pix, int stride, int bS[4], int qp ) {$/;"	f	file:
filter_mb_edgeh	h264.c	/^static void filter_mb_edgeh( H264Context *h, uint8_t *pix, int stride, int bS[4], int qp ) {$/;"	f	file:
filter_mb_edgev	h264.c	/^static void filter_mb_edgev( H264Context *h, uint8_t *pix, int stride, int bS[4], int qp ) {$/;"	f	file:
filter_type	png.c	/^    int filter_type;$/;"	m	struct:PNGContext	file:
filters	libpostproc/postprocess.c	/^static struct PPFilter filters[]=$/;"	v	file:
final	ra144.c	/^static void final(Real144_internal *glob, short *i1, short *i2, void *out, int *statbuf, int len)$/;"	f	file:
findPixelFormat	raw.c	/^static int findPixelFormat(unsigned int fourcc)$/;"	f	file:
find_best_tables	msmpeg4.c	/^static void find_best_tables(MpegEncContext * s)$/;"	f	file:
find_frame_end	h264.c	/^static int find_frame_end(H264Context *h, const uint8_t *buf, int buf_size){$/;"	f	file:
find_frame_end	mjpeg.c	/^static int find_frame_end(ParseContext *pc, const uint8_t *buf, int buf_size){$/;"	f	file:
find_frame_rate_index	mpeg12.c	/^static int find_frame_rate_index(MpegEncContext *s){$/;"	f	file:
find_marker	mjpeg.c	/^static int find_marker(uint8_t **pbuf_ptr, uint8_t *buf_end)$/;"	f	file:
find_start_code	mpeg12.c	/^static int find_start_code(const uint8_t **pbuf_ptr, const uint8_t *buf_end)$/;"	f	file:
find_start_code	parser.c	/^static int find_start_code(const uint8_t **pbuf_ptr, const uint8_t *buf_end)$/;"	f	file:
finterpflag	vc9.c	/^    int finterpflag;      \/\/\/< INTERPFRM present$/;"	m	struct:VC9Context	file:
first_avcodec	utils.c	/^AVCodec *first_avcodec = NULL;$/;"	v
first_coded_c_fragment	vp3.c	/^    int first_coded_c_fragment;$/;"	m	struct:Vp3DecodeContext	file:
first_coded_y_fragment	vp3.c	/^    int first_coded_y_fragment;$/;"	m	struct:Vp3DecodeContext	file:
first_field	mpegvideo.h	/^    int first_field;         \/\/\/< is 1 for the first field of a field picture 0 otherwise$/;"	m	struct:MpegEncContext
first_frame	roqvideo.c	/^    int first_frame;$/;"	m	struct:RoqContext	file:
first_picture	mjpeg.c	/^    int first_picture;    \/* true if decoding first picture *\/$/;"	m	struct:MJpegDecodeContext	file:
first_picture	parser.c	/^    int first_picture;$/;"	m	struct:ParseContext1	file:
first_pixel	vp3.c	/^    int first_pixel;$/;"	m	struct:Vp3Fragment	file:
first_slice	mpegvideo.h	/^    int first_slice;$/;"	m	struct:MpegEncContext
first_slice_line	mpegvideo.h	/^    int first_slice_line;  \/\/\/< used in mpeg4 too to handle resync markers $/;"	m	struct:MpegEncContext
fix	lcl.c	/^static inline unsigned char fix (int pix14)$/;"	f	file:
fix15	ac3enc.c	/^static inline int16_t fix15(float a)$/;"	f	file:
fix_bitshift	shorten.c	/^static void fix_bitshift(ShortenContext *s, int32_t *buffer)$/;"	f	file:
fixed_frame_rate_flag	h264.c	/^    int fixed_frame_rate_flag;$/;"	m	struct:SPS	file:
fixed_qscale	mpegvideo.h	/^    int fixed_qscale; \/\/\/< fixed qscale if non zero $/;"	m	struct:MpegEncContext
fixed_smr	mpegaudiotab.h	/^static const float fixed_smr[SBLIMIT] =  {$/;"	v
flac_decode_close	flac.c	/^static int flac_decode_close(AVCodecContext *avctx)$/;"	f	file:
flac_decode_frame	flac.c	/^static int flac_decode_frame(AVCodecContext *avctx,$/;"	f	file:
flac_decode_init	flac.c	/^static int flac_decode_init(AVCodecContext * avctx)$/;"	f	file:
flac_decoder	flac.c	/^AVCodec flac_decoder = {$/;"	v
flac_flush	flac.c	/^static void flac_flush(AVCodecContext *avctx){$/;"	f	file:
flag3	wmv2.c	/^    int flag3;$/;"	m	struct:Wmv2Context	file:
flag63	wmv2.c	/^    int flag63;$/;"	m	struct:Wmv2Context	file:
flags	a52dec.c	/^    int flags;$/;"	m	struct:AC3DecodeState	file:
flags	ac3dec.c	/^    int flags;$/;"	m	struct:AC3DecodeState	file:
flags	avcodec.h	/^    int flags;$/;"	m	struct:AVCodecContext
flags	faad.c	/^    int flags;$/;"	m	file:
flags	ffv1.c	/^    int flags;$/;"	m	struct:FFV1Context	file:
flags	huffyuv.c	/^    int flags;$/;"	m	struct:HYuvContext	file:
flags	lcl.c	/^    int flags;$/;"	m	struct:LclContext	file:
flags	mpegvideo.h	/^    int flags;        \/\/\/< AVCodecContext.flags (HQ, MV4, ...) $/;"	m	struct:MpegEncContext
flags	mpegvideo.h	/^    int flags;$/;"	m	struct:MotionEstContext
flags	parser.c	/^    int flags;$/;"	m	struct:AC3ParseContext	file:
flags	truemotion1.c	/^    int flags;$/;"	m	struct:TrueMotion1Context	file:
flags	truemotion1.c	/^    uint8_t flags;$/;"	m	struct:frame_header	file:
flags2	avcodec.h	/^    int flags2;$/;"	m	struct:AVCodecContext
flags2	mpegvideo.h	/^    int flags2;       \/\/\/< AVCodecContext.flags2$/;"	m	struct:MpegEncContext
flatnessThreshold	libpostproc/postprocess_internal.h	/^	int flatnessThreshold;$/;"	m	struct:PPMode
fli_type	flicvideo.c	/^    int fli_type;  \/* either 0xAF11 or 0xAF12, affects palette resolution *\/$/;"	m	struct:FlicDecodeContext	file:
flic_decode_end	flicvideo.c	/^static int flic_decode_end(AVCodecContext *avctx)$/;"	f	file:
flic_decode_frame	flicvideo.c	/^static int flic_decode_frame(AVCodecContext *avctx,$/;"	f	file:
flic_decode_init	flicvideo.c	/^static int flic_decode_init(AVCodecContext *avctx)$/;"	f	file:
flic_decoder	flicvideo.c	/^AVCodec flic_decoder = {$/;"	v
flip	raw.c	/^static void flip(AVCodecContext *avctx, AVPicture * picture){$/;"	f	file:
flipflop_rounding	mpegvideo.h	/^    int flipflop_rounding;$/;"	m	struct:MpegEncContext
flipped_image	vp3.c	/^    int flipped_image;$/;"	m	struct:Vp3DecodeContext	file:
float_to_int	a52dec.c	/^static inline void float_to_int (float * _f, int16_t * s16, int nchannels)$/;"	f	file:
float_to_int	ac3dec.c	/^static inline void float_to_int (float * _f, int16_t * s16, int nchannels)$/;"	f	file:
floor	ac3.h	/^    int sgain, sdecay, fdecay, dbknee, floor;$/;"	m	struct:AC3BitAllocParameters
floorcod	ac3enc.c	/^    int sgaincod, sdecaycod, fdecaycod, dbkneecod, floorcod; $/;"	m	struct:AC3EncodeContext	file:
floorf	common.h	/^static inline float floorf(float f) { $/;"	f
floortab	ac3tab.h	/^static const uint16_t floortab[8]= { $/;"	v
flush	avcodec.h	/^    void (*flush)(AVCodecContext *);$/;"	m	struct:AVCodec
flush_put_bits	bitstream.h	/^static inline void flush_put_bits(PutBitContext *s)$/;"	f
flv_decoder	h263dec.c	/^AVCodec flv_decoder = {$/;"	v
flv_encoder	mpegvideo.c	/^AVCodec flv_encoder = {$/;"	v
flv_h263_decode_picture_header	h263.c	/^int flv_h263_decode_picture_header(MpegEncContext *s)$/;"	f
fold	ffv1.c	/^static always_inline int fold(int diff, int bits){$/;"	f	file:
forcedQPTable	libpostproc/postprocess_internal.h	/^	QP_STORE_T *forcedQPTable;$/;"	m	struct:PPContext
forcedQuant	libpostproc/postprocess_internal.h	/^	int forcedQuant; 		\/\/\/< quantizer if FORCE_QUANT is used$/;"	m	struct:PPMode
fourcc	raw.c	/^    unsigned int fourcc;$/;"	m	struct:PixleFormatTag	file:
fourxm_decoder	4xm.c	/^AVCodec fourxm_decoder = {$/;"	v
fp	alpha/regdef.h	23;"	d
fprintf	common.h	506;"	d
fprintf	utils.c	946;"	d	file:
fprintf	utils.c	950;"	d	file:
fps_dr	vc9.c	/^  fps_dr[2] = { 1000, 1001 };$/;"	v	file:
fps_nr	vc9.c	/^static const int fps_nr[5] = { 24, 25, 30, 50, 60 },$/;"	v	file:
fr0	sh4/idct_sh4.c	111;"	d	file:
fr1	sh4/idct_sh4.c	112;"	d	file:
fr2	sh4/idct_sh4.c	113;"	d	file:
fr3	sh4/idct_sh4.c	114;"	d	file:
frac	resample2.c	/^    int frac;$/;"	m	struct:AVResampleContext	file:
fragment_count	vp3.c	/^    int fragment_count;$/;"	m	struct:Vp3DecodeContext	file:
fragment_height	vp3.c	/^    int fragment_height;$/;"	m	struct:Vp3DecodeContext	file:
fragment_width	vp3.c	/^    int fragment_width;$/;"	m	struct:Vp3DecodeContext	file:
frame	cinepak.c	/^    AVFrame frame;$/;"	m	struct:CinepakContext	file:
frame	cyuv.c	/^    AVFrame frame;$/;"	m	struct:CyuvDecodeContext	file:
frame	flicvideo.c	/^    AVFrame frame;$/;"	m	struct:FlicDecodeContext	file:
frame	idcinvideo.c	/^    AVFrame frame;$/;"	m	struct:IdcinContext	file:
frame	indeo3.c	/^    AVFrame frame;$/;"	m	struct:Indeo3DecodeContext	file:
frame	msrle.c	/^    AVFrame frame;$/;"	m	struct:MsrleContext	file:
frame	msvideo1.c	/^    AVFrame frame;$/;"	m	struct:Msvideo1Context	file:
frame	qtrle.c	/^    AVFrame frame;$/;"	m	struct:QtrleContext	file:
frame	rpza.c	/^    AVFrame frame;$/;"	m	struct:RpzaContext	file:
frame	smc.c	/^    AVFrame frame;$/;"	m	struct:SmcContext	file:
frame	truemotion1.c	/^    AVFrame frame;$/;"	m	struct:TrueMotion1Context	file:
frame	ulti.c	/^    AVFrame frame;$/;"	m	struct:UltimotionDecodeContext	file:
frame	vmdav.c	/^    AVFrame frame;$/;"	m	struct:VmdVideoContext	file:
frame	vqavideo.c	/^    AVFrame frame;$/;"	m	struct:VqaContext	file:
frameCount	amr.c	/^    int frameCount;$/;"	m	struct:AMRContext	file:
frameCount	amr.c	/^    int frameCount;$/;"	m	struct:AMRWBContext	file:
frameNum	libpostproc/postprocess_internal.h	/^	int frameNum;$/;"	m	struct:PPContext
frame_bits	avcodec.h	/^    int frame_bits;$/;"	m	struct:AVCodecContext
frame_bits	mpegvideo.h	/^    int frame_bits;                \/\/\/< bits used for the current frame $/;"	m	struct:MpegEncContext
frame_count	mpegaudiodec.c	/^    int frame_count;$/;"	m	struct:MPADecodeContext	file:
frame_count	mpegvideo.h	/^    int frame_count[5];$/;"	m	struct:RateControlContext
frame_count	msmpeg4.c	/^int frame_count = 0;$/;"	v
frame_count	wmadec.c	/^    int frame_count;$/;"	m	struct:WMADecodeContext	file:
frame_frac	mpegaudio.c	/^    int frame_frac, frame_frac_incr, do_padding;$/;"	m	struct:MpegAudioContext	file:
frame_frac_incr	mpegaudio.c	/^    int frame_frac, frame_frac_incr, do_padding;$/;"	m	struct:MpegAudioContext	file:
frame_header	truemotion1.c	/^struct frame_header {$/;"	s	file:
frame_height	svq1.c	/^    int frame_height;$/;"	m	struct:SVQ1Context	file:
frame_len	wmadec.c	/^    int frame_len;       \/* frame length in samples *\/$/;"	m	struct:WMADecodeContext	file:
frame_len_bits	wmadec.c	/^    int frame_len_bits;  \/* frame_len = 1 << frame_len_bits *\/$/;"	m	struct:WMADecodeContext	file:
frame_mbs_only_flag	h264.c	/^    int frame_mbs_only_flag;$/;"	m	struct:SPS	file:
frame_num	h264.c	/^    int frame_num;$/;"	m	struct:H264Context	file:
frame_num	mpegvideo.h	/^    int frame_num;              \/\/\/< h264 frame_num$/;"	m	struct:Picture
frame_num_offset	h264.c	/^    int frame_num_offset;         \/\/\/< for POC type 2$/;"	m	struct:H264Context	file:
frame_number	avcodec.h	/^    int frame_number;   \/\/\/< audio or video frame number $/;"	m	struct:AVCodecContext
frame_offset	avcodec.h	/^    int64_t frame_offset; \/* offset of the current frame *\/$/;"	m	struct:AVCodecParserContext
frame_out	wmadec.c	/^    float frame_out[MAX_CHANNELS][BLOCK_MAX_SIZE * 2] __attribute__((aligned(16)));$/;"	m	struct:WMADecodeContext	file:
frame_pred_frame_dct	mpegvideo.h	/^    int frame_pred_frame_dct;$/;"	m	struct:MpegEncContext
frame_rate	avcodec.h	/^    int frame_rate;$/;"	m	struct:AVCodecContext
frame_rate	dvdata.h	/^    int              frame_rate;      $/;"	m	struct:DVprofile
frame_rate	parser.c	/^    int frame_rate;$/;"	m	struct:ParseContext1	file:
frame_rate_base	avcodec.h	/^    int frame_rate_base;$/;"	m	struct:AVCodecContext
frame_rate_base	dvdata.h	/^    int              frame_rate_base;$/;"	m	struct:DVprofile
frame_rate_ext	mpeg12.c	/^    AVRational frame_rate_ext;       \/\/\/< MPEG-2 specific framerate modificator$/;"	m	struct:Mpeg1Context	file:
frame_rate_index	mpegvideo.h	/^    int frame_rate_index;$/;"	m	struct:MpegEncContext
frame_rate_tab	mpeg12data.h	/^static const AVRational frame_rate_tab[] = {$/;"	v
frame_rate_tab	parser.c	/^static const int frame_rate_tab[16] = {$/;"	v	file:
frame_size	a52dec.c	/^    int frame_size;$/;"	m	struct:AC3DecodeState	file:
frame_size	ac3dec.c	/^    int frame_size;$/;"	m	struct:AC3DecodeState	file:
frame_size	ac3enc.c	/^    unsigned int frame_size; \/* current frame size in words *\/$/;"	m	struct:AC3EncodeContext	file:
frame_size	avcodec.h	/^    int frame_size;     \/\/\/< in samples, initialized when calling 'init' $/;"	m	struct:AVCodecContext
frame_size	dvdata.h	/^    int              frame_size;          \/* total size of one frame in bytes *\/$/;"	m	struct:DVprofile
frame_size	faad.c	/^    int frame_size;$/;"	m	file:
frame_size	mpegaudio.c	/^    int frame_size; \/* frame size, in bits, without padding *\/$/;"	m	struct:MpegAudioContext	file:
frame_size	mpegaudiodec.c	/^    int frame_size;$/;"	m	struct:MPADecodeContext	file:
frame_size	parser.c	/^    int frame_size;$/;"	m	struct:AC3ParseContext	file:
frame_size	parser.c	/^    int frame_size;$/;"	m	struct:MpegAudioParseContext	file:
frame_size	sonic.c	/^    int channels, samplerate, block_align, frame_size;$/;"	m	struct:SonicContext	file:
frame_size_min	ac3enc.c	/^    unsigned int frame_size_min; \/* minimum frame size in case rounding is necessary *\/$/;"	m	struct:AC3EncodeContext	file:
frame_skip_cmp	avcodec.h	/^    int frame_skip_cmp;$/;"	m	struct:AVCodecContext
frame_skip_cmp	dsputil.h	/^    me_cmp_func frame_skip_cmp[5]; \/\/only width 8 used$/;"	m	struct:DSPContext
frame_skip_exp	avcodec.h	/^    int frame_skip_exp;$/;"	m	struct:AVCodecContext
frame_skip_factor	avcodec.h	/^    int frame_skip_factor;$/;"	m	struct:AVCodecContext
frame_skip_threshold	avcodec.h	/^    int frame_skip_threshold;$/;"	m	struct:AVCodecContext
frame_start	h264.c	/^static void frame_start(H264Context *h){$/;"	f	file:
frame_start	snow.c	/^static int frame_start(SnowContext *s){$/;"	f	file:
frame_start_found	mpegvideo.h	/^    int frame_start_found;$/;"	m	struct:ParseContext
frame_width	svq1.c	/^    int frame_width;$/;"	m	struct:SVQ1Context	file:
frames	mpegaudiodec.c	/^    int frames;   \/\/\/< number of mp3 frames per block (number of mp3 decoder instances)$/;"	m	struct:MP3On4DecodeContext	file:
frandom	fft-test.c	/^float frandom(void)$/;"	f
free	common.h	497;"	d
free	liba52/a52.h	30;"	d
free	mem.c	29;"	d	file:
free	snow.c	3113;"	d	file:
free_bitplane	vc9.c	/^void free_bitplane(BitPlane *bp)$/;"	f
free_duplicate_context	mpegvideo.c	/^static void free_duplicate_context(MpegEncContext *s){$/;"	f	file:
free_format_frame_size	mpegaudiodec.c	/^    int free_format_frame_size; \/* frame size in case of free format$/;"	m	struct:MPADecodeContext	file:
free_format_frame_size	parser.c	/^    int free_format_frame_size;$/;"	m	struct:MpegAudioParseContext	file:
free_format_next_header	mpegaudiodec.c	/^    uint32_t free_format_next_header; $/;"	m	struct:MPADecodeContext	file:
free_format_next_header	parser.c	/^    int free_format_next_header;$/;"	m	struct:MpegAudioParseContext	file:
free_picture	mpegvideo.c	/^static void free_picture(MpegEncContext *s, Picture *pic){$/;"	f	file:
free_tables	h264.c	/^static void free_tables(H264Context *h){$/;"	f	file:
free_vlc	bitstream.c	/^void free_vlc(VLC *vlc)$/;"	f
freq	mpegaudio.c	/^    int freq, bit_rate;$/;"	m	struct:MpegAudioContext	file:
freq_index	mpegaudio.c	/^    int freq_index;$/;"	m	struct:MpegAudioContext	file:
frmrtq_postproc	vc9.c	/^    int frmrtq_postproc;  \/\/\/< 3bits, $/;"	m	struct:VC9Context	file:
frmsizecod	ac3enc.c	/^    unsigned int frmsizecod;$/;"	m	struct:AC3EncodeContext	file:
fscod	ac3.h	/^    int fscod; \/* frequency *\/$/;"	m	struct:AC3BitAllocParameters
fscod	ac3enc.c	/^    unsigned int fscod; \/* frequency *\/$/;"	m	struct:AC3EncodeContext	file:
fscod	liba52/a52_internal.h	/^    uint8_t fscod;		\/* sample rate *\/$/;"	m	struct:a52_state_s
fsnroffst	ac3enc.c	/^    int fsnroffst[AC3_MAX_CHANNELS];$/;"	m	struct:AC3EncodeContext	file:
ftable1	ra144.h	/^static const unsigned long ftable1[128]={$/;"	v
ftable2	ra144.h	/^static const unsigned long ftable2[128]={$/;"	v
ftrv	sh4/idct_sh4.c	105;"	d	file:
ftrv	sh4/idct_sh4.c	71;"	d	file:
ftrv_	sh4/idct_sh4.c	/^static void ftrv_(const float xf[],float fv[])$/;"	f	file:
full_pel	mpegvideo.h	/^    int full_pel[2];$/;"	m	struct:MpegEncContext
func	beosthread.c	/^    int (*func)(AVCodecContext *c, void *arg);$/;"	m	struct:ThreadContext	file:
func	pthread.c	/^    action_t *func;$/;"	m	struct:ThreadContext	file:
func	w32thread.c	/^    int (*func)(AVCodecContext *c, void *arg);$/;"	m	struct:ThreadContext	file:
func1	eval.c	/^    double (**func1)(void *, double a); \/\/ NULL terminated$/;"	m	struct:Parser	file:
func1_name	eval.c	/^    const char **func1_name;          \/\/ NULL terminated$/;"	m	struct:Parser	file:
func2	eval.c	/^    double (**func2)(void *, double a, double b); \/\/ NULL terminated$/;"	m	struct:Parser	file:
func2_name	eval.c	/^    char **func2_name;          \/\/ NULL terminated$/;"	m	struct:Parser	file:
funny_diamond_search	motion_est_template.c	/^static int funny_diamond_search(MpegEncContext * s, int *best, int dmin,$/;"	f	file:
g726_close	g726.c	/^static int g726_close(AVCodecContext *avctx)$/;"	f	file:
g726_decode	g726.c	/^static int16_t g726_decode(G726Context* c, int16_t i)$/;"	f	file:
g726_decode_frame	g726.c	/^static int g726_decode_frame(AVCodecContext *avctx,$/;"	f	file:
g726_encode	g726.c	/^static int16_t g726_encode(G726Context* c, int16_t sig)$/;"	f	file:
g726_encode_frame	g726.c	/^static int g726_encode_frame(AVCodecContext *avctx,$/;"	f	file:
g726_init	g726.c	/^static int g726_init(AVCodecContext * avctx)$/;"	f	file:
g726_iterate	g726.c	/^static inline int16_t g726_iterate(G726Context* c, int16_t I)$/;"	f	file:
g726_reset	g726.c	/^static int g726_reset(G726Context* c, int bit_rate)$/;"	f	file:
gaps_in_frame_num_allowed_flag	h264.c	/^    int gaps_in_frame_num_allowed_flag;$/;"	m	struct:SPS	file:
gb	4xm.c	/^    GetBitContext gb;$/;"	m	struct:FourXContext	file:
gb	alac.c	/^    GetBitContext gb;$/;"	m	file:
gb	asv1.c	/^    GetBitContext gb;$/;"	m	struct:ASV1Context	file:
gb	cljr.c	/^    GetBitContext gb;$/;"	m	struct:CLJRContext	file:
gb	ffv1.c	/^    GetBitContext gb;$/;"	m	struct:FFV1Context	file:
gb	flac.c	/^    GetBitContext gb;$/;"	m	struct:FLACContext	file:
gb	huffyuv.c	/^    GetBitContext gb;$/;"	m	struct:HYuvContext	file:
gb	loco.c	/^    GetBitContext gb;$/;"	m	struct:RICEContext	file:
gb	mdec.c	/^    GetBitContext gb;$/;"	m	struct:MDECContext	file:
gb	mjpeg.c	/^    GetBitContext gb;$/;"	m	struct:MJpegDecodeContext	file:
gb	mpegaudiodec.c	/^    GetBitContext gb;$/;"	m	struct:MPADecodeContext	file:
gb	mpegvideo.h	/^    GetBitContext gb;$/;"	m	struct:MpegEncContext
gb	shorten.c	/^    GetBitContext gb;$/;"	m	struct:ShortenContext	file:
gb	svq1.c	/^    GetBitContext gb;$/;"	m	struct:SVQ1Context	file:
gb	wmadec.c	/^    GetBitContext gb;$/;"	m	struct:WMADecodeContext	file:
gbuf1	ra144.c	/^	unsigned int	 gbuf1[8];$/;"	m	file:
gbuf2	ra144.c	/^	unsigned short	 gbuf2[120];$/;"	m	file:
gen_vector_table15	truemotion1.c	/^static void gen_vector_table15(TrueMotion1Context *s, uint8_t *sel_vector_table)$/;"	f	file:
gen_vector_table16	truemotion1.c	/^static void gen_vector_table16(TrueMotion1Context *s, uint8_t *sel_vector_table)$/;"	f	file:
gen_vector_table24	truemotion1.c	/^static void gen_vector_table24(TrueMotion1Context *s, uint8_t *sel_vector_table)$/;"	f	file:
generate_bits_table	huffyuv.c	/^static int generate_bits_table(uint32_t *dst, uint8_t *len_table){$/;"	f	file:
generate_len_table	huffyuv.c	/^static void generate_len_table(uint8_t *dst, uint64_t *stats, int size){$/;"	f	file:
get32	4xm.c	/^static int get32(void *p){$/;"	f	file:
get32	png.c	/^static unsigned int get32(uint8_t **b){$/;"	f	file:
getBitrateMode	amr.c	/^static enum Mode getBitrateMode(int bitrate)$/;"	f	file:
getWBBitrateMode	amr.c	/^static int getWBBitrateMode(int bitrate)$/;"	f	file:
get_alpha_info_pal8	imgconvert.c	/^static int get_alpha_info_pal8(const AVPicture *src, int width, int height)$/;"	f	file:
get_amv	h263.c	/^static inline int get_amv(MpegEncContext *s, int n){$/;"	f	file:
get_b	lcl.c	/^static inline unsigned char get_b (unsigned char yq, signed char bq)$/;"	f	file:
get_b_cbp	h263.c	/^static inline int get_b_cbp(MpegEncContext * s, DCTELEM block[6][64],$/;"	f	file:
get_bits	bitstream.h	/^static inline unsigned int get_bits(GetBitContext *s, int n){$/;"	f
get_bits	bitstream.h	829;"	d
get_bits1	bitstream.h	/^static inline unsigned int get_bits1(GetBitContext *s){$/;"	f
get_bits1	bitstream.h	830;"	d
get_bits_count	bitstream.h	/^static inline int get_bits_count(GetBitContext *s){$/;"	f
get_bits_diff	mpegvideo.h	/^static inline int get_bits_diff(MpegEncContext *s){$/;"	f
get_bits_left	dv.c	/^static inline int get_bits_left(GetBitContext *s)$/;"	f	file:
get_bits_long	bitstream.c	/^unsigned int get_bits_long(GetBitContext *s, int n){$/;"	f
get_bits_size	dv.c	/^static inline int get_bits_size(GetBitContext *s)$/;"	f	file:
get_bits_trace	bitstream.h	/^static inline int get_bits_trace(GetBitContext *s, int n, char *file, const char *func, int line){$/;"	f
get_bitsz	mpegaudiodec.c	/^static inline int get_bitsz(GetBitContext *s, int n)$/;"	f	file:
get_block_rate	h263.c	/^static inline int get_block_rate(MpegEncContext * s, DCTELEM block[64], int block_last_index, uint8_t scantable[64]){$/;"	f	file:
get_buffer	avcodec.h	/^    int (*get_buffer)(struct AVCodecContext *c, AVFrame *pic);$/;"	m	struct:AVCodecContext
get_byte	roqvideo.c	77;"	d	file:
get_cabac	cabac.h	/^static inline int get_cabac(CABACContext *c, uint8_t * const state){$/;"	f
get_cabac_bypass	cabac.h	/^static inline int get_cabac_bypass(CABACContext *c){$/;"	f
get_cabac_cbf_ctx	h264.c	/^static int inline get_cabac_cbf_ctx( H264Context *h, int cat, int idx ) {$/;"	f	file:
get_cabac_terminate	cabac.h	/^static inline int get_cabac_terminate(CABACContext *c){$/;"	f
get_cabac_u	cabac.h	/^static inline int get_cabac_u(CABACContext *c, uint8_t * state, int max, int max_index, int truncated){$/;"	f
get_cabac_ueg	cabac.h	/^static inline int get_cabac_ueg(CABACContext *c, uint8_t * state, int max, int is_signed, int k, int max_index){$/;"	f
get_cbp	h261.c	/^static inline int get_cbp(MpegEncContext * s,$/;"	f	file:
get_chroma_qp	h264.c	/^static inline int get_chroma_qp(H264Context *h, int qscale){$/;"	f	file:
get_consumed_bytes	h261.c	/^static int get_consumed_bytes(MpegEncContext *s, int buf_size){$/;"	f	file:
get_consumed_bytes	h263dec.c	/^static int get_consumed_bytes(MpegEncContext *s, int buf_size){$/;"	f	file:
get_consumed_bytes	h264.c	/^static int get_consumed_bytes(MpegEncContext *s, int pos, int buf_size){$/;"	f	file:
get_context	ffv1.c	/^static inline int get_context(FFV1Context *f, int_fast16_t *src, int_fast16_t *last, int_fast16_t *last2){$/;"	f	file:
get_crc8	flac.c	/^static int get_crc8(const uint8_t *buf, int count){$/;"	f	file:
get_dc	msmpeg4.c	/^static int get_dc(uint8_t *src, int stride, int scale)$/;"	f	file:
get_diff_limited_q	ratecontrol.c	/^static double get_diff_limited_q(MpegEncContext *s, RateControlEntry *rce, double q){$/;"	f	file:
get_dmv	mpeg12.c	/^static inline int get_dmv(MpegEncContext *s)$/;"	f	file:
get_flags	motion_est.c	/^static int get_flags(MotionEstContext *c, int direct, int chroma){$/;"	f	file:
get_format	avcodec.h	/^    enum PixelFormat (*get_format)(struct AVCodecContext *s, const enum PixelFormat * fmt);$/;"	m	struct:AVCodecContext
get_fragment_run_length	vp3.c	/^static int get_fragment_run_length(GetBitContext *gb)$/;"	f	file:
get_g	lcl.c	/^static inline unsigned char get_g (unsigned char yq, signed char bq, signed char rq)$/;"	f	file:
get_intra_count	mpegvideo.c	/^static int get_intra_count(MpegEncContext *s, uint8_t *src, uint8_t *ref, int stride){$/;"	f	file:
get_le16	shorten.c	/^static short inline get_le16(GetBitContext *gb)$/;"	f	file:
get_le32	shorten.c	/^static int inline get_le32(GetBitContext *gb)$/;"	f	file:
get_level_prefix	h264.c	/^static inline int get_level_prefix(GetBitContext *gb){$/;"	f	file:
get_limits	motion_est.c	/^static inline void get_limits(MpegEncContext *s, int x, int y)$/;"	f	file:
get_long	roqvideo.c	80;"	d	file:
get_mode_code	vp3.c	/^static int get_mode_code(GetBitContext *gb)$/;"	f	file:
get_motion_vector_fixed	vp3.c	/^static int get_motion_vector_fixed(GetBitContext *gb)$/;"	f	file:
get_motion_vector_vlc	vp3.c	/^static int get_motion_vector_vlc(GetBitContext *gb)$/;"	f	file:
get_p_cbp	h263.c	/^static inline int get_p_cbp(MpegEncContext * s,$/;"	f	file:
get_penalty_factor	dsputil.h	/^static inline int get_penalty_factor(int lambda, int lambda2, int type){$/;"	f
get_phase	imgresample.c	/^static inline int get_phase(int pos)$/;"	f	file:
get_pixels	dsputil.h	/^    void (*get_pixels)(DCTELEM *block\/*align 16*\/, const uint8_t *pixels\/*align 8*\/, int line_size);$/;"	m	struct:DSPContext
get_pixels	dv.c	/^    void (*get_pixels)(DCTELEM *block, const uint8_t *pixels, int line_size);$/;"	m	struct:DVVideoContext	file:
get_pixels_altivec	ppc/dsputil_altivec.c	/^void get_pixels_altivec(DCTELEM *restrict block, const uint8_t *pixels, int line_size)$/;"	f
get_pixels_c	dsputil.c	/^static void get_pixels_c(DCTELEM *restrict block, const uint8_t *pixels, int line_size)$/;"	f	file:
get_pixels_mlib	mlib/dsputil_mlib.c	/^static void get_pixels_mlib(DCTELEM *restrict block, const uint8_t *pixels, int line_size)$/;"	f	file:
get_pixels_mmi	ps2/dsputil_mmi.c	/^static void get_pixels_mmi(DCTELEM *block, const uint8_t *pixels, int line_size)$/;"	f	file:
get_pixels_mmx	i386/dsputil_mmx.c	/^static void get_pixels_mmx(DCTELEM *block, const uint8_t *pixels, int line_size)$/;"	f	file:
get_pixels_mvi	alpha/motion_est_alpha.c	/^void get_pixels_mvi(DCTELEM *restrict block,$/;"	f
get_prefix	vc9.c	/^static int get_prefix(GetBitContext *gb, int stop, int len)$/;"	f	file:
get_qminmax	ratecontrol.c	/^static void get_qminmax(int *qmin_ret, int *qmax_ret, MpegEncContext *s, int pict_type){$/;"	f	file:
get_qscale	mpeg12.c	/^static inline int get_qscale(MpegEncContext *s)$/;"	f	file:
get_qscale	ratecontrol.c	/^static double get_qscale(MpegEncContext *s, RateControlEntry *rce, double rate_factor, int frame_num){$/;"	f	file:
get_r	lcl.c	/^static inline unsigned char get_r (unsigned char yq, signed char rq)$/;"	f	file:
get_rac	rangecoder.h	/^static inline int get_rac(RangeCoder *c, uint8_t * const state){$/;"	f
get_rl_index	mpegvideo.h	/^static inline int get_rl_index(const RLTable *rl, int last, int run, int level)$/;"	f
get_sae	mpegvideo.c	/^static int get_sae(uint8_t *src, int ref, int stride){$/;"	f	file:
get_sbits	bitstream.h	/^static inline int get_sbits(GetBitContext *s, int n){$/;"	f
get_se	golomb.h	/^static inline int get_se(GetBitContext *s, char *file, const char *func, int line){$/;"	f
get_se_golomb	golomb.h	/^static inline int get_se_golomb(GetBitContext *gb){$/;"	f
get_se_golomb	golomb.h	353;"	d
get_size_of_code	msmpeg4.c	/^static int get_size_of_code(MpegEncContext * s, RLTable *rl, int last, int run, int level, int intra){$/;"	f	file:
get_sr_golomb	golomb.h	/^static inline int get_sr_golomb(GetBitContext *gb, int k, int limit, int esc_len){$/;"	f
get_sr_golomb_flac	golomb.h	/^static inline int get_sr_golomb_flac(GetBitContext *gb, int k, int limit, int esc_len){$/;"	f
get_sr_golomb_shorten	golomb.h	/^static inline int get_sr_golomb_shorten(GetBitContext* gb, int k)$/;"	f
get_superblock_run_length	vp3.c	/^static int get_superblock_run_length(GetBitContext *gb)$/;"	f	file:
get_symbol	ffv1.c	/^static inline int get_symbol(RangeCoder *c, uint8_t *state, int is_signed){$/;"	f	file:
get_symbol	snow.c	/^static inline int get_symbol(RangeCoder *c, uint8_t *state, int is_signed){$/;"	f	file:
get_symbol2	snow.c	/^static inline int get_symbol2(RangeCoder *c, uint8_t *state, int log2){$/;"	f	file:
get_te	golomb.h	/^static inline int get_te(GetBitContext *s, int r, char *file, const char *func, int line){$/;"	f
get_te0_golomb	golomb.h	/^static inline int get_te0_golomb(GetBitContext *gb, int range){$/;"	f
get_te0_golomb	golomb.h	355;"	d
get_te_golomb	golomb.h	/^static inline int get_te_golomb(GetBitContext *gb, int range){$/;"	f
get_te_golomb	golomb.h	354;"	d
get_ue	golomb.h	/^static inline int get_ue(GetBitContext *s, char *file, const char *func, int line){$/;"	f
get_ue_golomb	golomb.h	/^static inline int get_ue_golomb(GetBitContext *gb){$/;"	f
get_ue_golomb	golomb.h	352;"	d
get_uint	shorten.c	/^static inline unsigned int get_uint(ShortenContext *s, int k)$/;"	f	file:
get_ur_golomb	golomb.h	/^static inline int get_ur_golomb(GetBitContext *gb, int k, int limit, int esc_len){$/;"	f
get_ur_golomb_jpegls	golomb.h	/^static inline int get_ur_golomb_jpegls(GetBitContext *gb, int k, int limit, int esc_len){$/;"	f
get_ur_golomb_shorten	golomb.h	/^static inline unsigned int get_ur_golomb_shorten(GetBitContext *gb, int k){$/;"	f
get_utf8	flac.c	/^static int64_t get_utf8(GetBitContext *gb)$/;"	f	file:
get_vissual_weight	mpegvideo.c	/^static void get_vissual_weight(int16_t *weight, uint8_t *ptr, int stride){$/;"	f	file:
get_vlc	bitstream.h	/^static inline int get_vlc(GetBitContext *s, VLC *vlc)$/;"	f
get_vlc	bitstream.h	832;"	d
get_vlc2	bitstream.h	/^static always_inline int get_vlc2(GetBitContext *s, VLC_TYPE (*table)[2],$/;"	f
get_vlc2	bitstream.h	833;"	d
get_vlc_symbol	ffv1.c	/^static inline int get_vlc_symbol(GetBitContext *gb, VlcState * const state, int bits){$/;"	f	file:
get_vlc_trace	bitstream.h	/^static inline int get_vlc_trace(GetBitContext *s, VLC_TYPE (*table)[2], int bits, int max_depth, char *file, const char *func, int line){$/;"	f
get_word	roqvideo.c	78;"	d	file:
get_xbits	bitstream.h	/^static inline int get_xbits(GetBitContext *s, int n){$/;"	f
get_xbits	bitstream.h	831;"	d
get_xbits_trace	bitstream.h	/^static inline int get_xbits_trace(GetBitContext *s, int n, char *file, const char *func, int line){$/;"	f
gettime	dct-test.c	/^int64_t gettime(void)$/;"	f
gettime	fft-test.c	/^int64_t gettime(void)$/;"	f
gettime	motion_test.c	/^int64_t gettime(void)$/;"	f
gfp	mp3lameaudio.c	/^	lame_global_flags *gfp;$/;"	m	struct:Mp3AudioContext	file:
gif_clut_index	imgconvert.c	/^static inline unsigned char gif_clut_index(uint8_t r, uint8_t g, uint8_t b)$/;"	f	file:
global_gain	mpegaudiodec.c	/^    int global_gain;$/;"	m	struct:GranuleDef	file:
global_init	libpostproc/postprocess.c	/^static void global_init(void){$/;"	f	file:
global_quality	avcodec.h	/^    int global_quality;$/;"	m	struct:AVCodecContext
glue	imgconvert.c	43;"	d	file:
glue	imgconvert_template.h	/^static int glue(get_alpha_info_, RGB_NAME)(const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(RGB_NAME, _to_gray)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(RGB_NAME, _to_pal8)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(RGB_NAME, _to_rgb24)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(RGB_NAME, _to_rgba32)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(RGB_NAME, _to_yuv420p)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(gray_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(pal8_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(rgb24_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(rgba32_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(yuv420p_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
glue	imgconvert_template.h	/^static void glue(yuvj420p_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src,$/;"	f
gmc	dsputil.h	/^    void (*gmc )(uint8_t *dst\/*align 8*\/, uint8_t *src\/*align 1*\/, int stride, int h, int ox, int oy,$/;"	m	struct:DSPContext
gmc1	dsputil.h	/^    void (*gmc1)(uint8_t *dst\/*align 8*\/, uint8_t *src\/*align 1*\/, int srcStride, int h, int x16, int y16, int rounder);$/;"	m	struct:DSPContext
gmc1_altivec	ppc/gmc_altivec.c	/^void gmc1_altivec(uint8_t *dst \/* align 8 *\/, uint8_t *src \/* align1 *\/, int stride, int h, int x16, int y16, int rounder)$/;"	f
gmc1_c	dsputil.c	/^static void gmc1_c(uint8_t *dst, uint8_t *src, int stride, int h, int x16, int y16, int rounder)$/;"	f	file:
gmc1_c	sh4/qpel.c	/^static void gmc1_c(uint8_t *dst, uint8_t *src, int stride, int h, int x16, int y16, int rounder)$/;"	f	file:
gmc1_motion	mpegvideo.c	/^static inline void gmc1_motion(MpegEncContext *s,$/;"	f	file:
gmc_c	dsputil.c	/^static void gmc_c(uint8_t *dst, uint8_t *src, int stride, int h, int ox, int oy, $/;"	f	file:
gmc_c	sh4/qpel.c	/^static void gmc_c(uint8_t *dst, uint8_t *src, int stride, int h, int ox, int oy, $/;"	f	file:
gmc_motion	mpegvideo.c	/^static inline void gmc_motion(MpegEncContext *s,$/;"	f	file:
gob_index	mpegvideo.h	/^    int gob_index;$/;"	m	struct:MpegEncContext
gob_number	h261.c	/^    int gob_number;$/;"	m	struct:H261Context	file:
gob_start_code_skipped	h261.c	/^    int gob_start_code_skipped; \/\/ 1 if gob start code is already read before gob header is read$/;"	m	struct:H261Context	file:
golden_frame	vp3.c	/^    AVFrame golden_frame;$/;"	m	struct:Vp3DecodeContext	file:
golomb_to_inter_cbp	h264data.h	/^static const uint8_t golomb_to_inter_cbp[48]={$/;"	v
golomb_to_intra4x4_cbp	h264data.h	/^static const uint8_t golomb_to_intra4x4_cbp[48]={$/;"	v
golomb_to_pict_type	h264data.h	/^static const uint8_t golomb_to_pict_type[5]=$/;"	v
gop_picture_number	mpegvideo.h	/^    int gop_picture_number;  \/\/\/< index of the first picture of a GOP based on fake_pic_num & mpeg1 specific $/;"	m	struct:MpegEncContext
gop_size	avcodec.h	/^    int gop_size;$/;"	m	struct:AVCodecContext
gop_size	mpegvideo.h	/^    int gop_size;$/;"	m	struct:MpegEncContext
got_avcC	h264.c	/^    int got_avcC; \/\/\/< flag used to parse avcC data only once$/;"	m	struct:H264Context	file:
gp	alpha/regdef.h	41;"	d
gray_to_mono	imgconvert.c	/^static void gray_to_mono(AVPicture *dst, const AVPicture *src,$/;"	f	file:
gray_to_monoblack	imgconvert.c	/^static void gray_to_monoblack(AVPicture *dst, const AVPicture *src,$/;"	f	file:
gray_to_monowhite	imgconvert.c	/^static void gray_to_monowhite(AVPicture *dst, const AVPicture *src,$/;"	f	file:
grow21	imgconvert.c	/^static void grow21(uint8_t *dst, int dst_wrap,$/;"	f	file:
grow21_line	imgconvert.c	/^static void grow21_line(uint8_t *dst, const uint8_t *src,$/;"	f	file:
grow22	imgconvert.c	/^static void grow22(uint8_t *dst, int dst_wrap,$/;"	f	file:
grow41	imgconvert.c	/^static void grow41(uint8_t *dst, int dst_wrap,$/;"	f	file:
grow41_line	imgconvert.c	/^static void grow41_line(uint8_t *dst, const uint8_t *src,$/;"	f	file:
grow44	imgconvert.c	/^static void grow44(uint8_t *dst, int dst_wrap,$/;"	f	file:
gsp	ra144.c	/^	unsigned short	*gsp;$/;"	m	file:
guess_dc	error_resilience.c	/^static void guess_dc(MpegEncContext *s, int16_t *dc, int w, int h, int stride, int is_luma){$/;"	f	file:
guess_mv	error_resilience.c	/^static void guess_mv(MpegEncContext *s){$/;"	f	file:
gval	ra144.c	/^	unsigned int	 gval;$/;"	m	file:
h	truemotion1.c	/^    int x, y, w, h;$/;"	m	struct:TrueMotion1Context	file:
h261_cbp_tab	h261data.h	/^const uint8_t h261_cbp_tab[63][2] =$/;"	v
h261_cbp_vlc	h261.c	/^static VLC h261_cbp_vlc;$/;"	v	file:
h261_decode_block	h261.c	/^static int h261_decode_block(H261Context * h, DCTELEM * block,$/;"	f	file:
h261_decode_end	h261.c	/^static int h261_decode_end(AVCodecContext *avctx)$/;"	f	file:
h261_decode_frame	h261.c	/^static int h261_decode_frame(AVCodecContext *avctx,$/;"	f	file:
h261_decode_gob	h261.c	/^static int h261_decode_gob(H261Context *h){$/;"	f	file:
h261_decode_gob_header	h261.c	/^static int h261_decode_gob_header(H261Context *h){$/;"	f	file:
h261_decode_init	h261.c	/^static int h261_decode_init(AVCodecContext *avctx){$/;"	f	file:
h261_decode_init_vlc	h261.c	/^static void h261_decode_init_vlc(H261Context *h){$/;"	f	file:
h261_decode_mb	h261.c	/^static int h261_decode_mb(H261Context *h){$/;"	f	file:
h261_decode_mb_skipped	h261.c	/^static int h261_decode_mb_skipped(H261Context *h, int mba1, int mba2 )$/;"	f	file:
h261_decode_picture_header	h261.c	/^int h261_decode_picture_header(H261Context *h){$/;"	f
h261_decoder	h261.c	/^AVCodec h261_decoder = {$/;"	v
h261_encode_block	h261.c	/^static void h261_encode_block(H261Context * h, DCTELEM * block, int n){$/;"	f	file:
h261_encode_gob_header	h261.c	/^static void h261_encode_gob_header(MpegEncContext * s, int mb_line){$/;"	f	file:
h261_encode_motion	h261.c	/^static void h261_encode_motion(H261Context * h, int val){$/;"	f	file:
h261_encoder	h261.c	/^AVCodec h261_encoder = {$/;"	v
h261_find_frame_end	h261.c	/^static int h261_find_frame_end(ParseContext *pc, AVCodecContext* avctx, const uint8_t *buf, int buf_size){$/;"	f	file:
h261_loop_filter	dsputil.h	/^    void (*h261_loop_filter)(uint8_t *src, int stride);$/;"	m	struct:DSPContext
h261_loop_filter_c	dsputil.c	/^static void h261_loop_filter_c(uint8_t *src, int stride){$/;"	f	file:
h261_mba_bits	h261data.h	/^const uint8_t h261_mba_bits[35] = {$/;"	v
h261_mba_code	h261data.h	/^const uint8_t h261_mba_code[35] = {$/;"	v
h261_mba_vlc	h261.c	/^static VLC h261_mba_vlc;$/;"	v	file:
h261_mtype_bits	h261data.h	/^const uint8_t h261_mtype_bits[10] = {$/;"	v
h261_mtype_code	h261data.h	/^const uint8_t h261_mtype_code[10] = {$/;"	v
h261_mtype_map	h261data.h	/^static const int h261_mtype_map[10]= {$/;"	v
h261_mtype_vlc	h261.c	/^static VLC h261_mtype_vlc;$/;"	v	file:
h261_mv_tab	h261data.h	/^const uint8_t h261_mv_tab[17][2] = {$/;"	v
h261_mv_vlc	h261.c	/^static VLC h261_mv_vlc;$/;"	v	file:
h261_parse	h261.c	/^static int h261_parse(AVCodecParserContext *s,$/;"	f	file:
h261_parser	h261.c	/^AVCodecParser h261_parser = {$/;"	v
h261_rl_tcoeff	h261data.h	/^static RLTable h261_rl_tcoeff = {$/;"	v
h261_tcoeff_level	h261data.h	/^const int8_t h261_tcoeff_level[64] = {$/;"	v
h261_tcoeff_run	h261data.h	/^const int8_t h261_tcoeff_run[64] = {$/;"	v
h261_tcoeff_vlc	h261data.h	/^const uint16_t h261_tcoeff_vlc[65][2] = {$/;"	v
h263_aic	mpegvideo.h	/^    int h263_aic;                   \/\/\/< Advanded INTRA Coding (AIC) $/;"	m	struct:MpegEncContext
h263_aic_dir	mpegvideo.h	/^    int h263_aic_dir;               \/\/\/< AIC direction: 0 = left, 1 = top$/;"	m	struct:MpegEncContext
h263_chroma_roundtab	mpegvideo.c	/^static const uint8_t h263_chroma_roundtab[16] = {$/;"	v	file:
h263_decode_block	h263.c	/^static int h263_decode_block(MpegEncContext * s, DCTELEM * block,$/;"	f	file:
h263_decode_dquant	h263.c	/^static void h263_decode_dquant(MpegEncContext *s){$/;"	f	file:
h263_decode_gob_header	h263.c	/^static int h263_decode_gob_header(MpegEncContext *s)$/;"	f	file:
h263_decode_init_vlc	h263.c	/^void h263_decode_init_vlc(MpegEncContext *s)$/;"	f
h263_decode_motion	h263.c	/^static int h263_decode_motion(MpegEncContext * s, int pred, int f_code)$/;"	f	file:
h263_decode_picture_header	h263.c	/^int h263_decode_picture_header(MpegEncContext *s)$/;"	f
h263_decoder	h263dec.c	/^AVCodec h263_decoder = {$/;"	v
h263_encode_block	h263.c	/^static void h263_encode_block(MpegEncContext * s, DCTELEM * block, int n)$/;"	f	file:
h263_encode_gob_header	h263.c	/^void h263_encode_gob_header(MpegEncContext * s, int mb_line)$/;"	f
h263_encode_init	h263.c	/^void h263_encode_init(MpegEncContext *s)$/;"	f
h263_encode_mb	h263.c	/^void h263_encode_mb(MpegEncContext * s,$/;"	f
h263_encode_picture_header	h263.c	/^void h263_encode_picture_header(MpegEncContext * s, int picture_number)$/;"	f
h263_encoder	mpegvideo.c	/^AVCodec h263_encoder = {$/;"	v
h263_find_frame_end	h263dec.c	/^static int h263_find_frame_end(ParseContext *pc, const uint8_t *buf, int buf_size){$/;"	f	file:
h263_flv	mpegvideo.h	/^    int h263_flv;     \/\/\/< use flv h263 header $/;"	m	struct:MpegEncContext
h263_format	h263data.h	/^static const uint16_t h263_format[8][2] = {$/;"	v
h263_get_motion_length	h263.c	/^static inline int h263_get_motion_length(MpegEncContext * s, int val, int f_code){$/;"	f	file:
h263_get_picture_format	h263.c	/^int h263_get_picture_format(int width, int height)$/;"	f
h263_h_loop_filter	dsputil.h	/^    void (*h263_h_loop_filter)(uint8_t *src, int stride, int qscale);$/;"	m	struct:DSPContext
h263_h_loop_filter_c	dsputil.c	/^static void h263_h_loop_filter_c(uint8_t *src, int stride, int qscale){$/;"	f	file:
h263_h_loop_filter_mmx	i386/dsputil_mmx.c	/^static void h263_h_loop_filter_mmx(uint8_t *src, int stride, int qscale){$/;"	f	file:
h263_long_vectors	mpegvideo.h	/^    int h263_long_vectors;      \/\/\/< use horrible h263v1 long vector mode $/;"	m	struct:MpegEncContext
h263_mb_type_b_map	h263data.h	/^static const int h263_mb_type_b_map[15]= {$/;"	v
h263_mbtype_b_tab	h263data.h	/^static const uint8_t h263_mbtype_b_tab[15][2] = {$/;"	v
h263_mbtype_b_vlc	h263.c	/^static VLC h263_mbtype_b_vlc;$/;"	v	file:
h263_msmpeg4	mpegvideo.h	/^    int h263_msmpeg4; \/\/\/< generate MSMPEG4 compatible stream (deprecated, use msmpeg4_version instead)$/;"	m	struct:MpegEncContext
h263_mv4_search	motion_est.c	/^static inline int h263_mv4_search(MpegEncContext *s, int mx, int my, int shift)$/;"	f	file:
h263_parse	h263dec.c	/^static int h263_parse(AVCodecParserContext *s,$/;"	f	file:
h263_parser	h263dec.c	/^AVCodecParser h263_parser = {$/;"	v
h263_plus	mpegvideo.h	/^    int h263_plus;    \/\/\/< h263 plus headers $/;"	m	struct:MpegEncContext
h263_pred	mpegvideo.h	/^    int h263_pred;    \/\/\/< use mpeg4\/h263 ac\/dc predictions $/;"	m	struct:MpegEncContext
h263_pred_acdc	h263.c	/^static void h263_pred_acdc(MpegEncContext * s, DCTELEM *block, int n)$/;"	f	file:
h263_pred_dc	h263.c	/^static int h263_pred_dc(MpegEncContext * s, int n, uint16_t **dc_val_ptr)$/;"	f	file:
h263_pred_motion	h263.c	/^int16_t *h263_pred_motion(MpegEncContext * s, int block, int dir,$/;"	f
h263_slice_structured	mpegvideo.h	/^    int h263_slice_structured;$/;"	m	struct:MpegEncContext
h263_v_loop_filter	dsputil.h	/^    void (*h263_v_loop_filter)(uint8_t *src, int stride, int qscale);$/;"	m	struct:DSPContext
h263_v_loop_filter_c	dsputil.c	/^static void h263_v_loop_filter_c(uint8_t *src, int stride, int qscale){$/;"	f	file:
h263_v_loop_filter_mmx	i386/dsputil_mmx.c	/^static void h263_v_loop_filter_mmx(uint8_t *src, int stride, int qscale){$/;"	f	file:
h263i_decoder	h263dec.c	/^AVCodec h263i_decoder = {$/;"	v
h263p_decode_umotion	h263.c	/^static int h263p_decode_umotion(MpegEncContext * s, int pred)$/;"	f	file:
h263p_encode_umotion	h263.c	/^static void h263p_encode_umotion(MpegEncContext * s, int val)$/;"	f	file:
h263p_encoder	mpegvideo.c	/^AVCodec h263p_encoder = {$/;"	v
h264_biweight_func	dsputil.h	/^typedef void (*h264_biweight_func)(uint8_t *dst, uint8_t *src, int stride, int log2_denom, int weightd, int weights, int offsetd, int offsets);$/;"	t
h264_chroma_mc_func	dsputil.h	/^typedef void (*h264_chroma_mc_func)(uint8_t *dst\/*align 8*\/, uint8_t *src\/*align 1*\/, int srcStride, int h, int x, int y);$/;"	t
h264_decoder	h264.c	/^AVCodec h264_decoder = {$/;"	v
h264_idct_add	dsputil.h	/^    void (*h264_idct_add)(uint8_t *dst, DCTELEM *block, int stride);$/;"	m	struct:DSPContext
h264_luma_dc_dequant_idct_c	h264.c	/^static void h264_luma_dc_dequant_idct_c(DCTELEM *block, int qp){$/;"	f	file:
h264_parse	h264.c	/^static int h264_parse(AVCodecParserContext *s,$/;"	f	file:
h264_parser	h264.c	/^AVCodecParser h264_parser = {$/;"	v
h264_weight_func	dsputil.h	/^typedef void (*h264_weight_func)(uint8_t *block, int stride, int log2_denom, int weight, int offset);$/;"	t
hChromaSubSample	libpostproc/postprocess_internal.h	/^	int hChromaSubSample;$/;"	m	struct:PPContext
h_block_filter	error_resilience.c	/^static void h_block_filter(MpegEncContext *s, uint8_t *dst, int w, int h, int stride, int is_luma){$/;"	f	file:
h_count	mjpeg.c	/^    int h_count[MAX_COMPONENTS]; \/* horizontal and vertical count for each component *\/$/;"	m	struct:MJpegDecodeContext	file:
h_edge_pos	mpegvideo.h	/^    int h_edge_pos, v_edge_pos;\/\/\/< horizontal \/ vertical position of the right\/bottom edge (pixel replicateion)$/;"	m	struct:MpegEncContext
h_incr	imgresample.c	/^    int h_incr, v_incr;$/;"	m	struct:ImgReSampleContext	file:
h_max	mjpeg.c	/^    int h_max, v_max; \/* maximum h and v counts *\/$/;"	m	struct:MJpegDecodeContext	file:
h_resample	imgresample.c	/^static void h_resample(uint8_t *dst, int dst_width, const uint8_t *src,$/;"	f	file:
h_resample_fast	imgresample.c	/^static void h_resample_fast(uint8_t *dst, int dst_width, const uint8_t *src,$/;"	f	file:
h_resample_fast4_mmx	imgresample.c	/^static void h_resample_fast4_mmx(uint8_t *dst, int dst_width,$/;"	f	file:
h_resample_slow	imgresample.c	/^static void h_resample_slow(uint8_t *dst, int dst_width,$/;"	f	file:
h_scount	mjpeg.c	/^    int h_scount[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
hadamard8_diff	dsputil.h	/^    me_cmp_func hadamard8_diff[5];$/;"	m	struct:DSPContext
hadamard8_diff16_altivec	ppc/dsputil_altivec.c	/^int hadamard8_diff16_altivec(\/*MpegEncContext*\/ void *s, uint8_t *dst, uint8_t *src, int stride, int h){$/;"	f
hadamard8_diff16x8_altivec	ppc/dsputil_altivec.c	/^static int hadamard8_diff16x8_altivec(\/*MpegEncContext*\/ void *s, uint8_t *dst, uint8_t *src, int stride, int h) {$/;"	f	file:
hadamard8_diff8x8_altivec	ppc/dsputil_altivec.c	/^int hadamard8_diff8x8_altivec(\/*MpegEncContext*\/ void *s, uint8_t *dst, uint8_t *src, int stride, int h){$/;"	f
hadamard8_diff8x8_c	dsputil.c	/^static int hadamard8_diff8x8_c(\/*MpegEncContext*\/ void *s, uint8_t *dst, uint8_t *src, int stride, int h){$/;"	f	file:
hadamard8_diff_mmx	i386/dsputil_mmx.c	/^static int hadamard8_diff_mmx(void *s, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
hadamard8_diff_mmx2	i386/dsputil_mmx.c	/^static int hadamard8_diff_mmx2(void *s, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
hadamard8_intra8x8_c	dsputil.c	/^static int hadamard8_intra8x8_c(\/*MpegEncContext*\/ void *s, uint8_t *src, uint8_t *dummy, int stride, int h){$/;"	f	file:
halfpel_flag	h264.c	/^    int halfpel_flag;$/;"	m	struct:H264Context	file:
halfpq	vc9.c	/^    uint8_t halfpq;       \/\/\/< Uniform quant over image and qp+.5$/;"	m	struct:VC9Context	file:
halfrate	liba52/a52_internal.h	/^    uint8_t halfrate;		\/* halfrate factor *\/$/;"	m	struct:a52_state_s
halfrate	liba52/parse.c	/^static uint8_t halfrate[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3};$/;"	v	file:
halfratecod	ac3.h	/^    int halfratecod;$/;"	m	struct:AC3BitAllocParameters
halfratecod	ac3enc.c	/^    int halfratecod;$/;"	m	struct:AC3EncodeContext	file:
handle	a52dec.c	/^    void* handle;$/;"	m	struct:AC3DecodeState	file:
handle	faad.c	/^    void* handle;		\/* dlopen handle *\/$/;"	m	file:
handle_slices	msmpeg4.c	/^static inline void handle_slices(MpegEncContext *s){$/;"	f	file:
has_altivec	ppc/dsputil_altivec.c	/^int has_altivec(void)$/;"	f
has_b_frames	avcodec.h	/^    int has_b_frames;$/;"	m	struct:AVCodecContext
header	parser.c	/^    uint32_t header;$/;"	m	struct:MpegAudioParseContext	file:
header	shorten.c	/^    uint8_t header[OUT_BUFFER_SIZE];$/;"	m	struct:ShortenContext	file:
header_bits	avcodec.h	/^    int header_bits;$/;"	m	struct:AVCodecContext
header_bits	mpegvideo.h	/^    int header_bits;$/;"	m	struct:MpegEncContext
header_count	parser.c	/^    int header_count;$/;"	m	struct:MpegAudioParseContext	file:
header_parsed	adx.c	/^    int header_parsed;$/;"	m	file:
header_size	shorten.c	/^    int header_size;$/;"	m	struct:ShortenContext	file:
header_size	truemotion1.c	/^    uint8_t header_size;$/;"	m	struct:frame_header	file:
header_state	snow.c	/^    uint8_t header_state[32];$/;"	m	struct:SnowContext	file:
header_type	truemotion1.c	/^    uint8_t header_type;$/;"	m	struct:frame_header	file:
height	avcodec.h	/^    int height;$/;"	m	struct:AVPanScan
height	avcodec.h	/^    int width, height;$/;"	m	struct:AVCodecContext
height	cinepak.c	/^    int width, height;$/;"	m	struct:CinepakContext	file:
height	cyuv.c	/^    int width, height;$/;"	m	struct:CyuvDecodeContext	file:
height	dvdata.h	/^    int              height;              \/* picture height in pixels *\/$/;"	m	struct:DVprofile
height	ffv1.c	/^    int width, height;$/;"	m	struct:FFV1Context	file:
height	huffyuv.c	/^    int width, height;$/;"	m	struct:HYuvContext	file:
height	indeo3.c	/^    int width, height;$/;"	m	struct:Indeo3DecodeContext	file:
height	indeo3.c	/^  long height;$/;"	m	file:
height	mjpeg.c	/^    int width, height;$/;"	m	struct:MJpegDecodeContext	file:
height	motion_est.c	/^    int height;$/;"	m	struct:Minima	file:
height	mpegvideo.h	/^    int width, height;\/\/\/< picture size. must be a multiple of 16 $/;"	m	struct:MpegEncContext
height	parser.c	/^    int width, height;$/;"	m	struct:ParseContext1	file:
height	png.c	/^    int width, height;$/;"	m	struct:PNGContext	file:
height	snow.c	/^    int height;$/;"	m	struct:Plane	file:
height	snow.c	/^    int height;$/;"	m	struct:SubBand	file:
height	svq1.c	/^static struct { int width; int height; } svq1_frame_size_table[8] = {$/;"	m	file:
height	truemotion1.c	/^    uint16_t height;$/;"	m	struct:frame_header	file:
height	tscc.c	/^    int height;$/;"	m	struct:TsccContext	file:
height	ulti.c	/^    int width, height, blocks;$/;"	m	struct:UltimotionDecodeContext	file:
height	vc9.c	/^    int height;         \/\/\/< Plane height$/;"	m	struct:BitPlane	file:
height	vp3.c	/^    int width, height;$/;"	m	struct:Vp3DecodeContext	file:
height	vqavideo.c	/^    int height;   \/* height of a frame *\/$/;"	m	struct:VqaContext	file:
help	avcodec.h	/^    const char *help; \/\/	const struct AVOption* sub;$/;"	m	struct:AVOption
help	dct-test.c	/^void help(void)$/;"	f
help	fft-test.c	/^void help(void)$/;"	f
help	motion_test.c	/^void help(void)$/;"	f
hf_noise16_mmx	i386/dsputil_mmx.c	/^static int hf_noise16_mmx(uint8_t * pix1, int line_size, int h) {$/;"	f	file:
hf_noise8_mmx	i386/dsputil_mmx.c	/^static int hf_noise8_mmx(uint8_t * pix1, int line_size, int h) {$/;"	f	file:
hgain_huffbits	wmadata.h	/^static const uint8_t hgain_huffbits[37] = {$/;"	v
hgain_huffcodes	wmadata.h	/^static const uint16_t hgain_huffcodes[37] = {$/;"	v
hgain_vlc	wmadec.c	/^    VLC hgain_vlc;$/;"	m	struct:WMADecodeContext	file:
hierachy_type	mpegvideo.h	/^    int hierachy_type;$/;"	m	struct:MpegEncContext
high_band_coded	wmadec.c	/^    int high_band_coded[MAX_CHANNELS][HIGH_BAND_MAX_SIZE];$/;"	m	struct:WMADecodeContext	file:
high_band_start	wmadec.c	/^    int high_band_start[BLOCK_NB_SIZES]; \/* index of first coef in high band *\/$/;"	m	struct:WMADecodeContext	file:
high_band_values	wmadec.c	/^    int high_band_values[MAX_CHANNELS][HIGH_BAND_MAX_SIZE];$/;"	m	struct:WMADecodeContext	file:
history	ra288.c	/^	float	history[8];$/;"	m	file:
hl_decode_mb	h264.c	/^static void hl_decode_mb(H264Context *h){$/;"	f	file:
hl_motion	h264.c	/^static void hl_motion(H264Context *h, uint8_t *dest_y, uint8_t *dest_cb, uint8_t *dest_cr,$/;"	f	file:
hnode_t	idcinvideo.c	/^} hnode_t;$/;"	t	file:
horizClassify_C	libpostproc/postprocess.c	/^static inline int horizClassify_C(uint8_t src[], int stride, PPContext *c){$/;"	f	file:
horizX1Filter	libpostproc/postprocess.c	/^static inline void horizX1Filter(uint8_t *src, int stride, int QP)$/;"	f	file:
horizontal_compose53i	snow.c	/^static void horizontal_compose53i(DWTELEM *b, int width){$/;"	f	file:
horizontal_compose97i	snow.c	/^static void horizontal_compose97i(DWTELEM *b, int width){$/;"	f	file:
horizontal_composeX	snow.c	/^static void horizontal_composeX(DWTELEM *b, int width){$/;"	f	file:
horizontal_decompose53i	snow.c	/^static void horizontal_decompose53i(DWTELEM *b, int width){$/;"	f	file:
horizontal_decompose97i	snow.c	/^static void horizontal_decompose97i(DWTELEM *b, int width){$/;"	f	file:
horizontal_decomposeX	snow.c	/^static void horizontal_decomposeX(DWTELEM *b, int width){$/;"	f	file:
horizontal_filter	vp3.c	/^static void horizontal_filter(unsigned char *first_pixel, int stride,$/;"	f	file:
hpel_avg	mpegvideo.h	/^    op_pixels_func (*hpel_avg)[4];$/;"	m	struct:MotionEstContext
hpel_motion	mpegvideo.c	/^static inline int hpel_motion(MpegEncContext *s, $/;"	f	file:
hpel_motion_lowres	mpegvideo.c	/^static inline int hpel_motion_lowres(MpegEncContext *s, $/;"	f	file:
hpel_motion_search	motion_est_template.c	/^static int hpel_motion_search(MpegEncContext * s,$/;"	f	file:
hpel_put	mpegvideo.h	/^    op_pixels_func (*hpel_put)[4];$/;"	m	struct:MotionEstContext
hrd_buffer	vc9.c	/^    uint16_t *hrd_rate, *hrd_buffer;$/;"	m	struct:VC9Context	file:
hrd_num_leaky_buckets	vc9.c	/^    int hrd_num_leaky_buckets;$/;"	m	struct:VC9Context	file:
hrd_param_flag	vc9.c	/^    int hrd_param_flag;   \/\/\/< Presence of Hypothetical Reference$/;"	m	struct:VC9Context	file:
hrd_rate	vc9.c	/^    uint16_t *hrd_rate, *hrd_buffer;$/;"	m	struct:VC9Context	file:
hshift	wmv2.c	/^    int hshift;$/;"	m	struct:Wmv2Context	file:
hth	ac3tab.h	/^static const uint16_t hth[50][3]= {$/;"	v
hthtab	liba52/bit_allocate.c	/^static int hthtab[3][50] = {$/;"	v	file:
huff_build_tree	idcinvideo.c	/^static void huff_build_tree(IdcinContext *s, int prev) {$/;"	f	file:
huff_code_ac_chrominance	mjpeg.c	/^    uint16_t huff_code_ac_chrominance[256];$/;"	m	struct:MJpegContext	file:
huff_code_ac_luminance	mjpeg.c	/^    uint16_t huff_code_ac_luminance[256];$/;"	m	struct:MJpegContext	file:
huff_code_dc_chrominance	mjpeg.c	/^    uint16_t huff_code_dc_chrominance[12];$/;"	m	struct:MJpegContext	file:
huff_code_dc_luminance	mjpeg.c	/^    uint16_t huff_code_dc_luminance[12];$/;"	m	struct:MJpegContext	file:
huff_code_table	mpegaudiodec.c	/^static uint8_t *huff_code_table[16];$/;"	v	file:
huff_nodes	idcinvideo.c	/^    hnode_t huff_nodes[256][HUF_TOKENS*2];$/;"	m	struct:IdcinContext	file:
huff_quad_vlc	mpegaudiodec.c	/^static VLC huff_quad_vlc[2];$/;"	v	file:
huff_size_ac_chrominance	mjpeg.c	/^    uint8_t huff_size_ac_chrominance[256];$/;"	m	struct:MJpegContext	file:
huff_size_ac_luminance	mjpeg.c	/^    uint8_t huff_size_ac_luminance[256];$/;"	m	struct:MJpegContext	file:
huff_size_dc_chrominance	mjpeg.c	/^    uint8_t huff_size_dc_chrominance[12];$/;"	m	struct:MJpegContext	file:
huff_size_dc_luminance	mjpeg.c	/^    uint8_t huff_size_dc_luminance[12]; \/\/FIXME use array [3] instead of lumi \/ chrom, for easier addressing $/;"	m	struct:MJpegContext	file:
huff_smallest_node	idcinvideo.c	/^static int huff_smallest_node(hnode_t *hnodes, int num_hnodes) {$/;"	f	file:
huff_vlc	mpegaudiodec.c	/^static VLC huff_vlc[16]; $/;"	v	file:
huffbits	wmadec.c	/^    const uint8_t *huffbits;   \/* VLC bit size *\/$/;"	m	struct:CoefVLCTable	file:
huffcodes	wmadec.c	/^    const uint32_t *huffcodes; \/* VLC bit values *\/$/;"	m	struct:CoefVLCTable	file:
huffman_decode	mpegaudiodec.c	/^static int huffman_decode(MPADecodeContext *s, GranuleDef *g,$/;"	f	file:
huffyuv_decoder	huffyuv.c	/^AVCodec huffyuv_decoder = {$/;"	v
huffyuv_encoder	huffyuv.c	/^AVCodec huffyuv_encoder = {$/;"	v
hurry_up	avcodec.h	/^    int hurry_up;$/;"	m	struct:AVCodecContext
hurry_up	mpegvideo.h	/^    int hurry_up;     \/**< when set to 1 during decoding, b frames will be skiped$/;"	m	struct:MpegEncContext
i2f	g726.c	/^static inline Float11* i2f(int16_t i, Float11* f)$/;"	f	file:
i_count	avcodec.h	/^    int i_count;$/;"	m	struct:AVCodecContext
i_count	mpegvideo.h	/^    int i_count;$/;"	m	struct:MpegEncContext
i_count	mpegvideo.h	/^    int i_count;$/;"	m	struct:RateControlEntry
i_cplx_sum	mpegvideo.h	/^    uint64_t i_cplx_sum[5];$/;"	m	struct:RateControlContext
i_mb_type_info	h264data.h	/^static const IMbInfo i_mb_type_info[26]={$/;"	v
i_quant_factor	avcodec.h	/^    float i_quant_factor;$/;"	m	struct:AVCodecContext
i_quant_offset	avcodec.h	/^    float i_quant_offset;$/;"	m	struct:AVCodecContext
i_tex_bits	avcodec.h	/^    int i_tex_bits;$/;"	m	struct:AVCodecContext
i_tex_bits	mpegvideo.h	/^    int i_tex_bits;$/;"	m	struct:MpegEncContext
i_tex_bits	mpegvideo.h	/^    int i_tex_bits;$/;"	m	struct:RateControlEntry
iabs	vp3.c	/^static inline int iabs (int x) { return ((x < 0) ? -x : x); }$/;"	f	file:
icos36	mpegaudiodec.c	/^static const int icos36[9] = {$/;"	v	file:
id	4xm.c	/^    int id;$/;"	m	struct:CFrameBuffer	file:
id	avcodec.h	/^    enum CodecID id;$/;"	m	struct:AVCodec
id	avcodec.h	/^    int id;$/;"	m	struct:AVPanScan
id	cinepak.c	/^    uint16_t          id;$/;"	m	file:
idcin_decode_end	idcinvideo.c	/^static int idcin_decode_end(AVCodecContext *avctx)$/;"	f	file:
idcin_decode_frame	idcinvideo.c	/^static int idcin_decode_frame(AVCodecContext *avctx,$/;"	f	file:
idcin_decode_init	idcinvideo.c	/^static int idcin_decode_init(AVCodecContext *avctx)$/;"	f	file:
idcin_decode_vlcs	idcinvideo.c	/^static void idcin_decode_vlcs(IdcinContext *s)$/;"	f	file:
idcin_decoder	idcinvideo.c	/^AVCodec idcin_decoder = {$/;"	v
idct	4xm.c	/^static void idct(DCTELEM block[64]){$/;"	f	file:
idct	dsputil.h	/^    void (*idct)(DCTELEM *block\/* align 16*\/);$/;"	m	struct:DSPContext
idct	fdctref.c	/^void idct(block)$/;"	f
idct	i386/simple_idct_mmx.c	/^static inline void idct(int16_t *block)$/;"	f	file:
idct248_error	dct-test.c	/^void idct248_error(const char *name, $/;"	f
idct248_ref	dct-test.c	/^void idct248_ref(uint8_t *dest, int linesize, int16_t *block)$/;"	f
idct32	mpegaudio.c	/^static void idct32(int *out, int *tab)$/;"	f	file:
idct4col	simple_idct.c	/^static inline void idct4col(uint8_t *dest, int line_size, const DCTELEM *col)$/;"	f	file:
idct4col_add	simple_idct.c	/^static inline void idct4col_add(uint8_t *dest, int line_size, const DCTELEM *col)$/;"	f	file:
idct4row	simple_idct.c	/^static inline void idct4row(DCTELEM *row)$/;"	f	file:
idctCol	i386/simple_idct_mmx.c	/^static void inline idctCol (int16_t * col, int16_t *input)$/;"	f	file:
idctRow	i386/simple_idct_mmx.c	/^static void inline idctRow (int16_t * output, int16_t * input)$/;"	f	file:
idctRowCondDC	simple_idct.c	/^static inline void idctRowCondDC (DCTELEM * row)$/;"	f	file:
idctSparseCol	simple_idct.c	/^static inline void idctSparseCol (DCTELEM * col)$/;"	f	file:
idctSparseColAdd	simple_idct.c	/^static inline void idctSparseColAdd (uint8_t *dest, int line_size, $/;"	f	file:
idctSparseColPut	simple_idct.c	/^static inline void idctSparseColPut (uint8_t *dest, int line_size, $/;"	f	file:
idct_add	dsputil.h	/^    void (*idct_add)(uint8_t *dest\/*align 8*\/, int line_size, DCTELEM *block\/*align 16*\/);$/;"	m	struct:DSPContext
idct_add	sh4/dsputil_sh4.c	/^static void idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
idct_add_altivec	ppc/idct_altivec.c	/^void idct_add_altivec(uint8_t* dest, int stride, vector_s16_t* block)$/;"	f
idct_algo	avcodec.h	/^    int idct_algo;$/;"	m	struct:AVCodecContext
idct_col	alpha/simple_idct_alpha.c	/^static inline void idct_col(DCTELEM *col)$/;"	f	file:
idct_col	i386/idct_mmx.c	/^static inline void idct_col (int16_t * col, int offset)$/;"	f	file:
idct_col2	alpha/simple_idct_alpha.c	/^static inline void idct_col2(DCTELEM *col)$/;"	f	file:
idct_constants	i386/vp3dsp_mmx.c	/^static uint16_t idct_constants[(4 + 7 + 1) * 4];$/;"	v	file:
idct_cosine_table	i386/vp3dsp_mmx.c	/^static uint16_t idct_cosine_table[7] = {$/;"	v	file:
idct_internal	h264idct.c	/^static always_inline void idct_internal(uint8_t *dst, DCTELEM *block, int stride, int block_stride, int shift, int add){$/;"	f	file:
idct_mmx_init	dct-test.c	/^void idct_mmx_init(void)$/;"	f
idct_mmx_perm	dct-test.c	/^static short idct_mmx_perm[64];$/;"	v	file:
idct_permutation	dsputil.h	/^    uint8_t idct_permutation[64];$/;"	m	struct:DSPContext
idct_permutation_type	dsputil.h	/^    int idct_permutation_type;$/;"	m	struct:DSPContext
idct_put	4xm.c	/^static inline void idct_put(FourXContext *f, int x, int y){$/;"	f	file:
idct_put	asv1.c	/^static inline void idct_put(ASV1Context *a, int mb_x, int mb_y){$/;"	f	file:
idct_put	dsputil.h	/^    void (*idct_put)(uint8_t *dest\/*align 8*\/, int line_size, DCTELEM *block\/*align 16*\/);$/;"	m	struct:DSPContext
idct_put	dv.c	/^    void (*idct_put[2])(uint8_t *dest, int line_size, DCTELEM *block);$/;"	m	struct:DVVideoContext	file:
idct_put	mdec.c	/^static inline void idct_put(MDECContext *a, int mb_x, int mb_y){$/;"	f	file:
idct_put	mjpeg.c	/^    void (*idct_put)(uint8_t *dest\/*align 8*\/, int line_size, DCTELEM *block\/*align 16*\/);$/;"	m	struct:MJpegDecodeContext	file:
idct_put	sh4/dsputil_sh4.c	/^static void idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
idct_put_altivec	ppc/idct_altivec.c	/^void idct_put_altivec(uint8_t* dest, int stride, vector_s16_t* block)$/;"	f
idct_row	alpha/simple_idct_alpha.c	/^static inline int idct_row(DCTELEM *row)$/;"	f	file:
idct_sh4	sh4/idct_sh4.c	/^void idct_sh4(DCTELEM *block)$/;"	f
idct_simple_mmx_perm	dct-test.c	/^static short idct_simple_mmx_perm[64]={$/;"	v	file:
ideal_dst_incr	resample2.c	/^    int ideal_dst_incr;$/;"	m	struct:AVResampleContext	file:
idelta	adpcm.c	/^    int idelta;$/;"	m	struct:ADPCMChannelStatus	file:
idr	h264.c	/^static void idr(H264Context *h){$/;"	f	file:
idx	roqvideo.c	/^  int idx[4];$/;"	m	file:
ifft128	liba52/imdct.c	/^static void (* ifft128) (complex_t * buf);$/;"	v	file:
ifft128_c	liba52/imdct.c	/^static void ifft128_c (complex_t * buf)$/;"	f	file:
ifft16	liba52/imdct.c	/^static void ifft16 (complex_t * buf)$/;"	f	file:
ifft2	liba52/imdct.c	/^static inline void ifft2 (complex_t * buf)$/;"	f	file:
ifft32	liba52/imdct.c	/^static void ifft32 (complex_t * buf)$/;"	f	file:
ifft4	liba52/imdct.c	/^static inline void ifft4 (complex_t * buf)$/;"	f	file:
ifft64	liba52/imdct.c	/^static void (* ifft64) (complex_t * buf);$/;"	v	file:
ifft64_c	liba52/imdct.c	/^static void ifft64_c (complex_t * buf)$/;"	f	file:
ifft8	liba52/imdct.c	/^static inline void ifft8 (complex_t * buf)$/;"	f	file:
ifft_pass	liba52/imdct.c	/^static void ifft_pass (complex_t * buf, sample_t * weight, int n)$/;"	f	file:
iheight	imgresample.c	/^    int iwidth, iheight, owidth, oheight;$/;"	m	struct:ImgReSampleContext	file:
ildct_cmp	avcodec.h	/^    int ildct_cmp;$/;"	m	struct:AVCodecContext
ildct_cmp	dsputil.h	/^    me_cmp_func ildct_cmp[5]; \/\/only width 16 used$/;"	m	struct:DSPContext
im	ac3enc.c	/^    short re,im;$/;"	m	struct:IComplex	file:
im	dsputil.h	/^    FFTSample re, im;$/;"	m	struct:FFTComplex
imag	liba52/imdct.c	/^    sample_t imag;$/;"	m	struct:complex_s	file:
image_buf	png.c	/^    uint8_t *image_buf;$/;"	m	struct:PNGContext	file:
image_linesize	png.c	/^    int image_linesize;$/;"	m	struct:PNGContext	file:
imdct12	mpegaudiodec.c	/^static void imdct12(int *out, int *in)$/;"	f	file:
imdct36	mpegaudiodec.c	/^static void imdct36(int *out, int *buf, int *in, int *win)$/;"	f	file:
imdct_ref	fft-test.c	/^void imdct_ref(float *out, float *in, int n)$/;"	f
img	imgresample.c	/^uint8_t img[XSIZE * YSIZE];$/;"	v
img1	imgresample.c	/^uint8_t img1[XSIZE1 * YSIZE1];$/;"	v
img1	motion_test.c	/^uint8_t img1[WIDTH * HEIGHT];$/;"	v
img2	imgresample.c	/^uint8_t img2[XSIZE1 * YSIZE1];$/;"	v
img2	motion_test.c	/^uint8_t img2[WIDTH * HEIGHT];$/;"	v
img_apply_table	imgconvert.c	/^static void img_apply_table(uint8_t *dst, int dst_wrap, $/;"	f	file:
img_convert	imgconvert.c	/^int img_convert(AVPicture *dst, int dst_pix_fmt,$/;"	f
img_convert_init	imgconvert.c	/^static void img_convert_init(void)$/;"	f	file:
img_copy	imgconvert.c	/^void img_copy(AVPicture *dst, const AVPicture *src,$/;"	f
img_copy_plane	imgconvert.c	/^static void img_copy_plane(uint8_t *dst, int dst_wrap, $/;"	f	file:
img_dest	dct-test.c	/^static uint8_t img_dest[64] __attribute__ ((aligned (8)));$/;"	v	file:
img_dest1	dct-test.c	/^static uint8_t img_dest1[64] __attribute__ ((aligned (8)));$/;"	v	file:
img_get_alpha_info	imgconvert.c	/^int img_get_alpha_info(const AVPicture *src,$/;"	f
img_resample	imgresample.c	/^void img_resample(ImgReSampleContext *s, $/;"	f
img_resample_close	imgresample.c	/^void img_resample_close(ImgReSampleContext *s)$/;"	f
img_resample_full_init	imgresample.c	/^ImgReSampleContext *img_resample_full_init(int owidth, int oheight,$/;"	f
img_resample_init	imgresample.c	/^ImgReSampleContext *img_resample_init(int owidth, int oheight,$/;"	f
imgtype	lcl.c	/^    int imgtype;$/;"	m	struct:LclContext	file:
implicit_weight	h264.c	/^    int implicit_weight[16][16];$/;"	m	struct:H264Context	file:
implicit_weight_table	h264.c	/^static void implicit_weight_table(H264Context *h){$/;"	f	file:
implver	alpha/asm.h	144;"	d
implver	alpha/asm.h	83;"	d
implver	alpha/asm.h	97;"	d
in_temp	adx.c	/^    int in_temp;$/;"	m	file:
inbuf	a52dec.c	/^    uint8_t inbuf[4096]; \/* input buffer *\/$/;"	m	struct:AC3DecodeState	file:
inbuf	ac3dec.c	/^    uint8_t inbuf[4096]; \/* input buffer *\/$/;"	m	struct:AC3DecodeState	file:
inbuf	mpegaudiodec.c	/^    uint8_t *inbuf_ptr, *inbuf;$/;"	m	struct:MPADecodeContext	file:
inbuf	parser.c	/^    uint8_t inbuf[4096]; \/* input buffer *\/$/;"	m	struct:AC3ParseContext	file:
inbuf	parser.c	/^    uint8_t inbuf[MPA_MAX_CODED_FRAME_SIZE];	\/* input buffer *\/$/;"	m	struct:MpegAudioParseContext	file:
inbuf1	mpegaudiodec.c	/^    uint8_t inbuf1[2][MPA_MAX_CODED_FRAME_SIZE + BACKSTEP_SIZE];	\/* input buffer *\/$/;"	m	struct:MPADecodeContext	file:
inbuf_index	mpegaudiodec.c	/^    int inbuf_index;$/;"	m	struct:MPADecodeContext	file:
inbuf_ptr	a52dec.c	/^    uint8_t *inbuf_ptr;$/;"	m	struct:AC3DecodeState	file:
inbuf_ptr	ac3dec.c	/^    uint8_t *inbuf_ptr;$/;"	m	struct:AC3DecodeState	file:
inbuf_ptr	mpegaudiodec.c	/^    uint8_t *inbuf_ptr, *inbuf;$/;"	m	struct:MPADecodeContext	file:
inbuf_ptr	parser.c	/^    uint8_t *inbuf_ptr;$/;"	m	struct:AC3ParseContext	file:
inbuf_ptr	parser.c	/^    uint8_t *inbuf_ptr;$/;"	m	struct:MpegAudioParseContext	file:
indeo3_decode_end	indeo3.c	/^static int indeo3_decode_end(AVCodecContext *avctx)$/;"	f	file:
indeo3_decode_frame	indeo3.c	/^static int indeo3_decode_frame(AVCodecContext *avctx,$/;"	f	file:
indeo3_decode_init	indeo3.c	/^static int indeo3_decode_init(AVCodecContext *avctx)$/;"	f	file:
indeo3_decoder	indeo3.c	/^AVCodec indeo3_decoder = {$/;"	v
index	bitstream.h	/^    int index;$/;"	m	struct:GetBitContext
index	bitstream.h	/^    int index;$/;"	m	struct:PutBitContext
index	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
index	mpegvideo.h	/^    int index;$/;"	m	struct:ParseContext
index	resample2.c	/^    int index;$/;"	m	struct:AVResampleContext	file:
index_run	mpegvideo.h	/^    uint8_t *index_run[2];         \/\/\/< encoding only $/;"	m	struct:RLTable
index_stream	truemotion1.c	/^    uint8_t *index_stream;$/;"	m	struct:TrueMotion1Context	file:
index_stream_size	truemotion1.c	/^    int index_stream_size;$/;"	m	struct:TrueMotion1Context	file:
index_table	adpcm.c	/^static const int index_table[16] = {$/;"	v	file:
init	avcodec.h	/^    int (*init)(AVCodecContext *);$/;"	m	struct:AVCodec
init_2d_vlc_rl	mpeg12.c	/^static void init_2d_vlc_rl(RLTable *rl, int use_static)$/;"	f	file:
init_block_mapping	vp3.c	/^static int init_block_mapping(Vp3DecodeContext *s) $/;"	f	file:
init_coef_vlc	wmadec.c	/^static void init_coef_vlc(VLC *vlc, $/;"	f	file:
init_dequantizer	vp3.c	/^static void init_dequantizer(Vp3DecodeContext *s)$/;"	f	file:
init_duplicate_context	mpegvideo.c	/^static int init_duplicate_context(MpegEncContext *s, MpegEncContext *base){$/;"	f	file:
init_fdct	fdctref.c	/^void init_fdct()$/;"	f
init_frame	vp3.c	/^static void init_frame(Vp3DecodeContext *s, GetBitContext *gb)$/;"	f	file:
init_get_bits	bitstream.h	/^static inline void init_get_bits(GetBitContext *s,$/;"	f
init_h263_dc_for_msmpeg4	msmpeg4.c	/^static void init_h263_dc_for_msmpeg4(void)$/;"	f	file:
init_interlaced_ref	motion_est.c	/^static inline void init_interlaced_ref(MpegEncContext *s, int ref_index){$/;"	f	file:
init_mv	4xm.c	/^static void init_mv(FourXContext *f){$/;"	f	file:
init_mv4_ref	motion_est.c	/^static inline void init_mv4_ref(MotionEstContext *c){$/;"	f	file:
init_mv_penalty_and_fcode	h263.c	/^static void init_mv_penalty_and_fcode(MpegEncContext *s)$/;"	f	file:
init_mv_table	msmpeg4.c	/^static void init_mv_table(MVTable *tab)$/;"	f	file:
init_offset	shorten.c	/^static void init_offset(ShortenContext *s)$/;"	f	file:
init_pass2	ratecontrol.c	/^static int init_pass2(MpegEncContext *s)$/;"	f	file:
init_poc	h264.c	/^static int init_poc(H264Context *h){$/;"	f	file:
init_pred_ptrs	h264.c	/^static void init_pred_ptrs(H264Context *h){$/;"	f	file:
init_put_bits	bitstream.h	/^static inline void init_put_bits(PutBitContext *s, uint8_t *buffer, int buffer_size)$/;"	f
init_qp	h264.c	/^    int init_qp;                \/\/\/< pic_init_qp_minus26 + 26$/;"	m	struct:PPS	file:
init_qs	h264.c	/^    int init_qs;                \/\/\/< pic_init_qs_minus26 + 26$/;"	m	struct:PPS	file:
init_ref	motion_est.c	/^static inline void init_ref(MotionEstContext *c, uint8_t *src[3], uint8_t *ref[3], uint8_t *ref2[3], int x, int y, int ref_index){$/;"	f	file:
init_ref	snow.c	/^static inline void init_ref(MotionEstContext *c, uint8_t *src[3], uint8_t *ref[3], uint8_t *ref2[3], int x, int y, int ref_index){$/;"	f	file:
init_rl	mpegvideo.c	/^void init_rl(RLTable *rl, int use_static)$/;"	f
init_uni_ac_vlc	mpeg12.c	/^static void init_uni_ac_vlc(RLTable *rl, uint32_t *uni_ac_vlc_bits, uint8_t *uni_ac_vlc_len){$/;"	f	file:
init_uni_dc_tab	h263.c	/^static void init_uni_dc_tab(void)$/;"	f	file:
init_uni_h263_rl_tab	h263.c	/^static void init_uni_h263_rl_tab(RLTable *rl, uint32_t *bits_tab, uint8_t *len_tab){$/;"	f	file:
init_uni_mpeg4_rl_tab	h263.c	/^static void init_uni_mpeg4_rl_tab(RLTable *rl, uint32_t *bits_tab, uint8_t *len_tab){$/;"	f	file:
init_vlc	bitstream.c	/^int init_vlc(VLC *vlc, int nb_bits, int nb_codes,$/;"	f
init_vlc_rl	h263.c	/^void init_vlc_rl(RLTable *rl, int use_static)$/;"	f
init_vlcs	4xm.c	/^static void init_vlcs(FourXContext *f){$/;"	f	file:
init_vlcs	asv1.c	/^static void init_vlcs(ASV1Context *a){$/;"	f	file:
init_vlcs	mpeg12.c	/^static void init_vlcs(void)$/;"	f	file:
initialize_after	beosthread.c	/^void initialize_after(void)$/;"	f
inline	common.h	160;"	d
inplace_lift	snow.c	/^static void inplace_lift(DWTELEM *dst, int width, int *coeffs, int n, int shift, int start, int inverse){$/;"	f	file:
inplace_liftV	snow.c	/^static void inplace_liftV(DWTELEM *dst, int width, int height, int stride, int *coeffs, int n, int shift, int start, int inverse){$/;"	f	file:
input_channels	resample.c	/^    int input_channels, output_channels, filter_channels;$/;"	m	struct:ReSampleContext	file:
input_picture	mpegvideo.h	/^    Picture **input_picture;   \/\/\/< next pictures on display order for encoding$/;"	m	struct:MpegEncContext
input_picture	snow.c	/^    AVFrame input_picture;$/;"	m	struct:SnowContext	file:
input_picture_number	mpegvideo.h	/^    int input_picture_number;  \/\/\/< used to set pic->display_picture_number, shouldnt be used for\/by anything else$/;"	m	struct:MpegEncContext
int16_t	common.h	/^    typedef signed short int16_t;$/;"	t
int32_t	common.h	/^    typedef signed int   int32_t;$/;"	t
int64_t	common.h	/^        typedef signed __int64   int64_t;$/;"	t
int64_t	common.h	/^        typedef signed long long   int64_t;$/;"	t
int64_t_C	common.h	156;"	d
int64_t_C	common.h	164;"	d
int64_t_C	common.h	182;"	d
int64_t_C	common.h	202;"	d
int8_t	common.h	/^    typedef signed char  int8_t;$/;"	t
int_fast16_t	common.h	/^typedef signed int  int_fast16_t;$/;"	t
int_fast32_t	common.h	/^typedef signed int  int_fast32_t;$/;"	t
int_fast8_t	common.h	/^typedef signed char int_fast8_t;$/;"	t
int_pow_init	mpegaudiodec.c	/^static void int_pow_init(void)$/;"	f	file:
int_samples	sonic.c	/^    int *int_samples;$/;"	m	struct:SonicContext	file:
intel_h263_decode_picture_header	h263.c	/^int intel_h263_decode_picture_header(MpegEncContext *s)$/;"	f
inter_MCBPC_bits	h263data.h	/^const uint8_t inter_MCBPC_bits[28] = { $/;"	v
inter_MCBPC_code	h263data.h	/^const uint8_t inter_MCBPC_code[28] = { $/;"	v
inter_MCBPC_vlc	h263.c	/^static VLC inter_MCBPC_vlc;$/;"	v	file:
inter_ac_vlc_last_length	mpegvideo.h	/^    uint8_t *inter_ac_vlc_last_length;$/;"	m	struct:MpegEncContext
inter_ac_vlc_length	mpegvideo.h	/^    uint8_t *inter_ac_vlc_length;$/;"	m	struct:MpegEncContext
inter_cbp_to_golomb	h264data.h	/^static const uint8_t inter_cbp_to_golomb[48]={$/;"	v
inter_dequant	vp3.c	/^    int16_t __align16 inter_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
inter_gb	h264.c	/^    GetBitContext inter_gb;$/;"	m	struct:H264Context	file:
inter_gb_ptr	h264.c	/^    GetBitContext *inter_gb_ptr;$/;"	m	struct:H264Context	file:
inter_intra_pred	mpegvideo.h	/^    int inter_intra_pred;$/;"	m	struct:MpegEncContext
inter_intra_vlc	msmpeg4.c	/^static VLC inter_intra_vlc;$/;"	v	file:
inter_level	h263data.h	/^const int8_t inter_level[102] = {$/;"	v
inter_matrix	avcodec.h	/^    uint16_t *inter_matrix;$/;"	m	struct:AVCodecContext
inter_matrix	mpegvideo.h	/^    uint16_t inter_matrix[64];$/;"	m	struct:MpegEncContext
inter_matrix	xvidff.c	/^    unsigned char *inter_matrix;   \/** I-Frame Quant Matrix *\/$/;"	m	struct:xvid_context	file:
inter_quant_bias	avcodec.h	/^    int inter_quant_bias;$/;"	m	struct:AVCodecContext
inter_quant_bias	mpegvideo.h	/^    int inter_quant_bias;    \/\/\/< bias for the quantizer $/;"	m	struct:MpegEncContext
inter_run	h263data.h	/^const int8_t inter_run[102] = {$/;"	v
inter_rvlc	mpeg4data.h	/^static const uint16_t inter_rvlc[170][2]={ \/\/note this is identical to the intra rvlc except that its reordered$/;"	v
inter_rvlc_level	mpeg4data.h	/^static const uint8_t inter_rvlc_level[169]={$/;"	v
inter_rvlc_run	mpeg4data.h	/^static const uint8_t inter_rvlc_run[169]={$/;"	v
inter_scantable	mpegvideo.h	/^    ScanTable inter_scantable; \/\/\/< if inter == intra then intra should be used to reduce tha cache usage$/;"	m	struct:MpegEncContext
inter_threshold	avcodec.h	/^    int inter_threshold;$/;"	m	struct:AVCodecContext
inter_vlc	h263data.h	/^const uint16_t inter_vlc[103][2] = {$/;"	v
interlace	vc9.c	/^    int interlace;        \/\/\/< Progressive\/interlaced (RPTFTM syntax element)$/;"	m	struct:VC9Context	file:
interlace_bit_state	ffv1.c	/^    uint8_t interlace_bit_state[2];$/;"	m	struct:PlaneContext	file:
interlace_polarity	mjpeg.c	/^    int interlace_polarity;$/;"	m	struct:MJpegDecodeContext	file:
interlace_type	png.c	/^    int interlace_type;$/;"	m	struct:PNGContext	file:
interlaced	huffyuv.c	/^    int interlaced;$/;"	m	struct:HYuvContext	file:
interlaced	mjpeg.c	/^    int interlaced;     \/* true if interlaced *\/$/;"	m	struct:MJpegDecodeContext	file:
interlaced_dct	h264.c	39;"	d	file:
interlaced_dct	mpegvideo.h	/^    int interlaced_dct;$/;"	m	struct:MpegEncContext
interlaced_search	motion_est.c	/^static int interlaced_search(MpegEncContext *s, int ref_index, $/;"	f	file:
interleave_buffer	shorten.c	/^static int16_t * interleave_buffer(int16_t *samples, int nchan, int blocksize, int32_t **buffer) {$/;"	f	file:
internal_buffer	avcodec.h	/^    void *internal_buffer;$/;"	m	struct:AVCodecContext
internal_buffer_count	avcodec.h	/^    int internal_buffer_count;$/;"	m	struct:AVCodecContext
internal_ftype	shorten.c	/^    int internal_ftype;$/;"	m	struct:ShortenContext	file:
interpfrm	vc9.c	/^    uint8_t interpfrm;$/;"	m	struct:VC9Context	file:
interplay_delta_table	dpcm.c	/^static int interplay_delta_table[] = {$/;"	v	file:
interplay_dpcm_decoder	dpcm.c	/^AVCodec interplay_dpcm_decoder = {$/;"	v
interplay_video_decoder	interplayvideo.c	/^AVCodec interplay_video_decoder = {$/;"	v
interpolate_array	wmadec.c	/^static void interpolate_array(float *scale, int old_size, int new_size)$/;"	f	file:
interpolated	mpegvideo.h	/^    uint8_t *interpolated[3];$/;"	m	struct:Picture
intlist_read	sonic.c	/^static inline int intlist_read(GetBitContext *gb, int *buf, int entries, int base_2_part)$/;"	f	file:
intlist_read	sonic.c	/^static int intlist_read(GetBitContext *gb, int *buf, int entries, int base_2_part)$/;"	f	file:
intlist_write	sonic.c	/^static inline int intlist_write(PutBitContext *pb, int *buf, int entries, int base_2_part)$/;"	f	file:
intlist_write	sonic.c	/^static int intlist_write(PutBitContext *pb, int *buf, int entries, int base_2_part)$/;"	f	file:
intra16x16_pred_mode	h264.c	/^    int intra16x16_pred_mode;$/;"	m	struct:H264Context	file:
intra4x4_cbp_to_golomb	h264data.h	/^static const uint8_t intra4x4_cbp_to_golomb[48]={$/;"	v
intra4x4_pred_mode	h264.c	/^    int8_t (*intra4x4_pred_mode)[8];$/;"	m	struct:H264Context	file:
intra4x4_pred_mode_cache	h264.c	/^    int8_t intra4x4_pred_mode_cache[5*8];$/;"	m	struct:H264Context	file:
intra_MCBPC_bits	h263data.h	/^const uint8_t intra_MCBPC_bits[9] = { 1, 3, 3, 3, 4, 6, 6, 6, 9 };$/;"	v
intra_MCBPC_code	h263data.h	/^const uint8_t intra_MCBPC_code[9] = { 1, 1, 2, 3, 1, 1, 2, 3, 1 };$/;"	v
intra_MCBPC_vlc	h263.c	/^static VLC intra_MCBPC_vlc;$/;"	v	file:
intra_ac_vlc_last_length	mpegvideo.h	/^    uint8_t *intra_ac_vlc_last_length;$/;"	m	struct:MpegEncContext
intra_ac_vlc_length	mpegvideo.h	/^    uint8_t *intra_ac_vlc_length;$/;"	m	struct:MpegEncContext
intra_c_dequant	vp3.c	/^    int16_t __align16 intra_c_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
intra_count	msmpeg4.c	/^int intra_count = 0;$/;"	v
intra_dc_precision	avcodec.h	/^     int intra_dc_precision;$/;"	m	struct:AVCodecContext
intra_dc_precision	mpegvideo.h	/^    int intra_dc_precision;$/;"	m	struct:MpegEncContext
intra_dc_threshold	mpegvideo.h	/^    int intra_dc_threshold;          \/\/\/< QP above whch the ac VLC should be used for intra dc $/;"	m	struct:MpegEncContext
intra_gb	h264.c	/^    GetBitContext intra_gb;$/;"	m	struct:H264Context	file:
intra_gb_ptr	h264.c	/^    GetBitContext *intra_gb_ptr;$/;"	m	struct:H264Context	file:
intra_h_scantable	mpegvideo.h	/^    ScanTable intra_h_scantable;$/;"	m	struct:MpegEncContext
intra_level	mpeg4data.h	/^const int8_t intra_level[102] = {$/;"	v
intra_level_aic	h263data.h	/^const int8_t intra_level_aic[102] = {$/;"	v
intra_matrix	asv1.c	/^    uint16_t __align8 intra_matrix[64];$/;"	m	struct:ASV1Context	file:
intra_matrix	avcodec.h	/^    uint16_t *intra_matrix;$/;"	m	struct:AVCodecContext
intra_matrix	mdec.c	/^    uint16_t __align8 intra_matrix[64];$/;"	m	struct:MDECContext	file:
intra_matrix	mpegvideo.h	/^    uint16_t intra_matrix[64];$/;"	m	struct:MpegEncContext
intra_matrix	xvidff.c	/^    unsigned char *intra_matrix;   \/** P-Frame Quant Matrix *\/$/;"	m	struct:xvid_context	file:
intra_only	mpegvideo.h	/^    int intra_only;   \/\/\/< if true, only intra pictures are generated $/;"	m	struct:MpegEncContext
intra_quant_bias	avcodec.h	/^    int intra_quant_bias;$/;"	m	struct:AVCodecContext
intra_quant_bias	mpegvideo.h	/^    int intra_quant_bias;    \/\/\/< bias for the quantizer $/;"	m	struct:MpegEncContext
intra_run	mpeg4data.h	/^const int8_t intra_run[102] = {$/;"	v
intra_run_aic	h263data.h	/^const int8_t intra_run_aic[102] = {$/;"	v
intra_rvlc	mpeg4data.h	/^static const uint16_t intra_rvlc[170][2]={$/;"	v
intra_rvlc_level	mpeg4data.h	/^static const uint8_t intra_rvlc_level[169]={$/;"	v
intra_rvlc_run	mpeg4data.h	/^static const uint8_t intra_rvlc_run[169]={$/;"	v
intra_scantable	mpegvideo.h	/^    ScanTable __align8 intra_scantable;$/;"	m	struct:MpegEncContext
intra_v_scantable	mpegvideo.h	/^    ScanTable intra_v_scantable;$/;"	m	struct:MpegEncContext
intra_vlc	mpeg4data.h	/^const uint16_t intra_vlc[103][2] = {$/;"	v
intra_vlc_aic	h263data.h	/^const uint16_t intra_vlc_aic[103][2] = {$/;"	v
intra_vlc_format	mpegvideo.h	/^    int intra_vlc_format;$/;"	m	struct:MpegEncContext
intra_y_dequant	vp3.c	/^    int16_t __align16 intra_y_dequant[64];$/;"	m	struct:Vp3DecodeContext	file:
inv_qscale	asv1.c	/^    int inv_qscale;$/;"	m	struct:ASV1Context	file:
inv_zigzag_direct16	dsputil.c	/^uint16_t __align8 inv_zigzag_direct16[64] = {0, };$/;"	v
inverse	dsputil.c	/^const uint32_t inverse[256]={$/;"	v
inverse	dsputil.h	/^    int inverse;$/;"	m	struct:FFTContext
inverse	mpegvideo.h	/^    uint8_t __align8 inverse[64];$/;"	m	struct:ScanTable
inverse_quant	g726.c	/^static inline int16_t inverse_quant(G726Context* c, int i)$/;"	f	file:
iptr	ra144.c	/^	unsigned int	*iptr;				\/* pointer to current input (from unpacked) *\/$/;"	m	file:
ipvideo_decode_block	interplayvideo.c	/^static int (*ipvideo_decode_block[16])(IpvideoContext *s);$/;"	v	file:
ipvideo_decode_block_opcode_0x0	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x0(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x1	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x1(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x2	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x2(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x3	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x3(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x4	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x4(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x5	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x5(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x6	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x6(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x7	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x7(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x8	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x8(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0x9	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0x9(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xA	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xA(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xB	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xB(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xC	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xC(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xD	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xD(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xE	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xE(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_block_opcode_0xF	interplayvideo.c	/^static int ipvideo_decode_block_opcode_0xF(IpvideoContext *s)$/;"	f	file:
ipvideo_decode_end	interplayvideo.c	/^static int ipvideo_decode_end(AVCodecContext *avctx)$/;"	f	file:
ipvideo_decode_frame	interplayvideo.c	/^static int ipvideo_decode_frame(AVCodecContext *avctx,$/;"	f	file:
ipvideo_decode_init	interplayvideo.c	/^static int ipvideo_decode_init(AVCodecContext *avctx)$/;"	f	file:
ipvideo_decode_opcodes	interplayvideo.c	/^static void ipvideo_decode_opcodes(IpvideoContext *s)$/;"	f	file:
iquant	g726.c	/^	int* iquant;          \/**< inverse quantization table *\/$/;"	m	struct:G726Tables	file:
iquant_tbl16	g726.c	/^static int iquant_tbl16[] =$/;"	v	file:
iquant_tbl24	g726.c	/^static int iquant_tbl24[] =$/;"	v	file:
iquant_tbl32	g726.c	/^static int iquant_tbl32[] =$/;"	v	file:
iquant_tbl40	g726.c	/^static int iquant_tbl40[] =$/;"	v	file:
irms	ra144.c	/^static int irms(short *data, int factor)$/;"	f	file:
isHorizDC_C	libpostproc/postprocess.c	/^static inline int isHorizDC_C(uint8_t src[], int stride, PPContext *c)$/;"	f	file:
isHorizMinMaxOk_C	libpostproc/postprocess.c	/^static inline int isHorizMinMaxOk_C(uint8_t src[], int stride, int QP)$/;"	f	file:
isVertDC_C	libpostproc/postprocess.c	/^static inline int isVertDC_C(uint8_t src[], int stride, PPContext *c){$/;"	f	file:
isVertMinMaxOk_C	libpostproc/postprocess.c	/^static inline int isVertMinMaxOk_C(uint8_t src[], int stride, int QP)$/;"	f	file:
is_adx	adx.c	/^int is_adx(const unsigned char *buf,size_t bufsize)$/;"	f
is_alpha	imgconvert.c	/^    uint8_t is_alpha : 1;    \/* true if alpha can be specified *\/$/;"	m	struct:PixFmtInfo	file:
is_avc	h264.c	/^    int is_avc; \/\/\/< this flag is != 0 if codec is avc1$/;"	m	struct:H264Context	file:
is_intra_more_likely	error_resilience.c	/^static int is_intra_more_likely(MpegEncContext *s){$/;"	f	file:
is_raw	vc9.c	/^    uint8_t is_raw;     \/\/\/< Bit values must be read at MB level$/;"	m	struct:BitPlane	file:
is_table	mpegaudiodec.c	/^static int32_t is_table[2][16];$/;"	v	file:
is_table_lsf	mpegaudiodec.c	/^static int32_t is_table_lsf[2][2][16];$/;"	v	file:
is_yuv_planar	imgconvert.c	/^static inline int is_yuv_planar(PixFmtInfo *ps)$/;"	f	file:
item_name	avcodec.h	/^    const char* (*item_name)(void*); \/* actually passing a pointer to an AVCodecContext$/;"	m	struct:AVCLASS
iv_Decode_Chunk	indeo3.c	/^static void iv_Decode_Chunk(Indeo3DecodeContext *s,$/;"	f	file:
iv_alloc_frames	indeo3.c	/^static void iv_alloc_frames(Indeo3DecodeContext *s) $/;"	f	file:
iv_decode_frame	indeo3.c	/^static unsigned long iv_decode_frame(Indeo3DecodeContext *s, $/;"	f	file:
iv_frame	indeo3.c	/^    YUVBufs iv_frame[2];$/;"	m	struct:Indeo3DecodeContext	file:
iv_free_func	indeo3.c	/^static void iv_free_func(Indeo3DecodeContext *s) $/;"	f	file:
iwidth	imgresample.c	/^    int iwidth, iheight, owidth, oheight;$/;"	m	struct:ImgReSampleContext	file:
j_rev_dct	jrevdct.c	/^void j_rev_dct(DCTBLOCK data)$/;"	f
j_rev_dct1	jrevdct.c	/^void j_rev_dct1(DCTBLOCK data){$/;"	f
j_rev_dct2	jrevdct.c	/^void j_rev_dct2(DCTBLOCK data){$/;"	f
j_rev_dct4	jrevdct.c	/^void j_rev_dct4(DCTBLOCK data)$/;"	f
j_rev_dct_ARM	armv4l/jrevdct_arm.S	/^j_rev_dct_ARM:$/;"	l
j_rev_dct_ARM_add	armv4l/dsputil_arm.c	/^static void j_rev_dct_ARM_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
j_rev_dct_ARM_put	armv4l/dsputil_arm.c	/^static void j_rev_dct_ARM_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
j_type	wmv2.c	/^    int j_type;$/;"	m	struct:Wmv2Context	file:
j_type_bit	wmv2.c	/^    int j_type_bit;$/;"	m	struct:Wmv2Context	file:
jmpbuf	ppc/dsputil_altivec.c	/^static sigjmp_buf jmpbuf;$/;"	v	file:
jmpbuf	sparc/dsputil_vis.c	/^static sigjmp_buf jmpbuf;$/;"	v	file:
job_count	pthread.c	/^    int job_count;$/;"	m	struct:ThreadContext	file:
jpeg_parse	mjpeg.c	/^static int jpeg_parse(AVCodecParserContext *s,$/;"	f	file:
jpeg_put_comments	mjpeg.c	/^static void jpeg_put_comments(MpegEncContext *s)$/;"	f	file:
jpeg_table_header	mjpeg.c	/^static void jpeg_table_header(MpegEncContext *s)$/;"	f	file:
k_x	vc9.c	/^    int k_x;              \/\/\/< Number of bits for MVs (depends on MV range)$/;"	m	struct:VC9Context	file:
k_y	vc9.c	/^    int k_y;              \/\/\/< Number of bits for MVs (depends on MV range)$/;"	m	struct:VC9Context	file:
keyframe	snow.c	/^    int keyframe;$/;"	m	struct:SnowContext	file:
keyframe	vp3.c	/^    int keyframe;$/;"	m	struct:Vp3DecodeContext	file:
l	alpha/asm.h	/^struct unaligned_long { uint64_t l; } __attribute__((packed));$/;"	m	struct:unaligned_long
l	dsputil.h	/^struct unaligned_16 { uint16_t l; } __attribute__((packed));$/;"	m	struct:unaligned_16
l	dsputil.h	/^struct unaligned_32 { uint32_t l; } __attribute__((packed));$/;"	m	struct:unaligned_32
l	dsputil.h	/^struct unaligned_64 { uint64_t l; } __attribute__((packed));$/;"	m	struct:unaligned_64
l1_unscale	mpegaudiodec.c	/^static inline int l1_unscale(int n, int mant, int scale_factor)$/;"	f	file:
l2_select_table	mpegaudiodec.c	/^int l2_select_table(int bitrate, int nb_channels, int freq, int lsf)$/;"	f
l2_unscale_group	mpegaudiodec.c	/^static inline int l2_unscale_group(int steps, int mant, int scale_factor)$/;"	f	file:
l3_unscale	mpegaudiodec.c	/^static inline int l3_unscale(int value, int exponent)$/;"	f	file:
lambda	mpegvideo.h	/^    int lambda;                 \/\/\/< lagrange multipler used in rate distortion$/;"	m	struct:MpegEncContext
lambda	snow.c	/^    int lambda;$/;"	m	struct:SnowContext	file:
lambda2	mpegvideo.h	/^    int lambda2;                \/\/\/< (lambda*lambda) >> FF_LAMBDA_SHIFT $/;"	m	struct:MpegEncContext
lambda2	snow.c	/^    int lambda2;$/;"	m	struct:SnowContext	file:
lambda_table	mpegvideo.h	/^    int *lambda_table;$/;"	m	struct:MpegEncContext
last	mpegvideo.h	/^    int last;                      \/\/\/< number of values for last = 0 $/;"	m	struct:RLTable
last_bitoffset	wmadec.c	/^    int last_bitoffset;$/;"	m	struct:WMADecodeContext	file:
last_bits	mpegvideo.h	/^    int last_bits; \/\/\/< temp var used for calculating the above vars$/;"	m	struct:MpegEncContext
last_coded_c_fragment	vp3.c	/^    int last_coded_c_fragment;$/;"	m	struct:Vp3DecodeContext	file:
last_coded_y_fragment	vp3.c	/^    int last_coded_y_fragment;$/;"	m	struct:Vp3DecodeContext	file:
last_coeff	vp3.c	/^    int last_coeff;$/;"	m	struct:Vp3Fragment	file:
last_dc	4xm.c	/^    int last_dc;$/;"	m	struct:FourXContext	file:
last_dc	mdec.c	/^    int last_dc[3];$/;"	m	struct:MDECContext	file:
last_dc	mjpeg.c	/^    int last_dc[MAX_COMPONENTS]; \/* last DEQUANTIZED dc (XXX: am I right to do that ?) *\/$/;"	m	struct:MJpegDecodeContext	file:
last_dc	mpegvideo.h	/^    int last_dc[3];                \/\/\/< last DC values for MPEG1 $/;"	m	struct:MpegEncContext
last_deltaset	truemotion1.c	/^    int last_deltaset, last_vectable;$/;"	m	struct:TrueMotion1Context	file:
last_dts	avcodec.h	/^    int64_t last_dts;$/;"	m	struct:AVCodecParserContext
last_frame	interplayvideo.c	/^    AVFrame last_frame;$/;"	m	struct:IpvideoContext	file:
last_frame	roqvideo.c	/^    AVFrame last_frame;$/;"	m	struct:RoqContext	file:
last_frame	vp3.c	/^    AVFrame last_frame;$/;"	m	struct:Vp3DecodeContext	file:
last_frame	xan.c	/^    AVFrame last_frame;$/;"	m	struct:XanContext	file:
last_frame_offset	avcodec.h	/^    int64_t last_frame_offset; \/* offset of the last frame *\/$/;"	m	struct:AVCodecParserContext
last_index	mpegvideo.h	/^    int last_index;$/;"	m	struct:ParseContext
last_job_cond	pthread.c	/^    pthread_cond_t last_job_cond;$/;"	m	struct:ThreadContext	file:
last_mb_var_sum	mpegvideo.h	/^    int last_mb_var_sum;$/;"	m	struct:RateControlContext
last_mc_mb_var_sum	mpegvideo.h	/^    int last_mc_mb_var_sum;$/;"	m	struct:RateControlContext
last_mv	mpegvideo.h	/^    int last_mv[2][2][2];             \/\/\/< last MV, used for MV prediction in MPEG1 & B-frame MPEG4 $/;"	m	struct:MpegEncContext
last_mv_dir	mpegvideo.h	/^    int last_mv_dir;         \/\/\/< last mv_dir, used for b frame encoding $/;"	m	struct:MpegEncContext
last_non_b_pict_type	mpegvideo.h	/^    int last_non_b_pict_type;   \/\/\/< used for mpeg4 gmc b-frames & ratecontrol $/;"	m	struct:MpegEncContext
last_non_b_pict_type	mpegvideo.h	/^    int last_non_b_pict_type;$/;"	m	struct:RateControlContext
last_non_b_time	mpegvideo.h	/^    int64_t last_non_b_time;$/;"	m	struct:MpegEncContext
last_pic_num	utils.c	/^    int last_pic_num;$/;"	m	struct:InternalBuffer	file:
last_pict_type	mpegvideo.h	/^    int last_pict_type; \/\/FIXME removes$/;"	m	struct:MpegEncContext
last_picture	4xm.c	/^    AVFrame current_picture, last_picture;$/;"	m	struct:FourXContext	file:
last_picture	mpegvideo.h	/^    Picture last_picture;       $/;"	m	struct:MpegEncContext
last_picture	snow.c	/^    AVFrame last_picture;$/;"	m	struct:SnowContext	file:
last_picture	svq1.c	/^    AVFrame last_picture;$/;"	m	struct:SVQ1Context	file:
last_picture_ptr	mpegvideo.h	/^    Picture *last_picture_ptr;     \/\/\/< pointer to the previous picture.$/;"	m	struct:MpegEncContext
last_predictor_count	avcodec.h	/^    int last_predictor_count;$/;"	m	struct:AVCodecContext
last_pts	avcodec.h	/^    int64_t last_pts;$/;"	m	struct:AVCodecParserContext
last_qscale	mpegvideo.h	/^    double last_qscale;$/;"	m	struct:RateControlContext
last_qscale_diff	h264.c	/^    int         last_qscale_diff;$/;"	m	struct:H264Context	file:
last_qscale_for	mpegvideo.h	/^    double last_qscale_for[5];    \/\/\/< last qscale for a specific pict type, used for max_diff & ipb factor stuff $/;"	m	struct:RateControlContext
last_quality_index	vp3.c	/^    int last_quality_index;$/;"	m	struct:Vp3DecodeContext	file:
last_resync_gb	mpegvideo.h	/^    GetBitContext last_resync_gb;    \/\/\/< used to search for the next resync marker $/;"	m	struct:MpegEncContext
last_row	png.c	/^    uint8_t *last_row;$/;"	m	struct:PNGContext	file:
last_samples	ac3enc.c	/^    short last_samples[AC3_MAX_CHANNELS][256];$/;"	m	struct:AC3EncodeContext	file:
last_slice_end	huffyuv.c	/^    int last_slice_end;$/;"	m	struct:HYuvContext	file:
last_static	utils.c	/^static unsigned int last_static = 0;$/;"	v	file:
last_superframe	wmadec.c	/^    uint8_t last_superframe[MAX_CODED_SUPERFRAME_SIZE + 4]; \/* padding added *\/$/;"	m	struct:WMADecodeContext	file:
last_superframe_len	wmadec.c	/^    int last_superframe_len;$/;"	m	struct:WMADecodeContext	file:
last_time_base	mpegvideo.h	/^    int last_time_base;$/;"	m	struct:MpegEncContext
last_vectable	truemotion1.c	/^    int last_deltaset, last_vectable;$/;"	m	struct:TrueMotion1Context	file:
latab	ac3tab.h	/^static const uint8_t latab[260]= {$/;"	v
latab	liba52/bit_allocate.c	/^static int8_t latab[256] = {$/;"	v	file:
lavc_build	mpegvideo.h	/^    int lavc_build;$/;"	m	struct:MpegEncContext
layer	mpegaudiodec.c	/^    int layer;$/;"	m	struct:MPADecodeContext	file:
ld3	ps2/mmi.h	56;"	d
ldl	alpha/asm.h	60;"	d
ldl3	ps2/mmi.h	62;"	d
ldq	alpha/asm.h	59;"	d
ldq_u	alpha/asm.h	135;"	d
ldq_u	alpha/asm.h	67;"	d
ldr3	ps2/mmi.h	59;"	d
le2me_16	bswap.h	130;"	d
le2me_16	bswap.h	137;"	d
le2me_32	bswap.h	131;"	d
le2me_32	bswap.h	138;"	d
le2me_64	bswap.h	132;"	d
le2me_64	bswap.h	139;"	d
leftBand	imgresample.c	/^    int topBand, bottomBand, leftBand, rightBand;$/;"	m	struct:ImgReSampleContext	file:
left_border	h264.c	/^    uint8_t left_border[17+2*9];$/;"	m	struct:H264Context	file:
left_cbp	h264.c	/^    int left_cbp;$/;"	m	struct:H264Context	file:
left_samples_available	h264.c	/^    unsigned int left_samples_available;$/;"	m	struct:H264Context	file:
len	bitstream.h	/^    int8_t len;$/;"	m	struct:RL_VLC_ELEM
len	huffyuv.c	/^    uint8_t len[3][256];$/;"	m	struct:HYuvContext	file:
length	raw.c	/^    int             length;  \/* number of bytes in buffer *\/$/;"	m	struct:RawVideoContext	file:
lev	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
level	avcodec.h	/^     int level;$/;"	m	struct:AVCodecContext
level	bitstream.h	/^    int16_t level;$/;"	m	struct:RL_VLC_ELEM
level	liba52/a52_internal.h	/^    level_t level;		\/* output level *\/$/;"	m	struct:a52_state_s
level	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
level	snow.c	/^    int level;$/;"	m	struct:SubBand	file:
level	snow.c	/^    uint8_t level; \/\/FIXME merge into type?$/;"	m	struct:BlockNode	file:
level	svq3.c	/^static const struct { uint8_t run; uint8_t level; } svq3_dct_tables[2][16] = {$/;"	m	file:
level	vc9.c	/^    int level;            \/\/\/< 3bits, for Advanced\/Simple Profile, provided by TS layer$/;"	m	struct:VC9Context	file:
level_idc	h264.c	/^    int level_idc;$/;"	m	struct:SPS	file:
level_t	liba52/a52.h	/^typedef double level_t;$/;"	t
level_t	liba52/a52.h	/^typedef float level_t;$/;"	t
level_t	liba52/a52.h	/^typedef int32_t level_t;$/;"	t
level_tab	asv1.c	/^static const uint8_t level_tab[7][2]={$/;"	v	file:
level_table	wmadec.c	/^    uint16_t *level_table[2];$/;"	m	struct:WMADecodeContext	file:
level_vlc	asv1.c	/^static VLC level_vlc;$/;"	v	file:
levels	wmadec.c	/^    const uint16_t *levels; \/* table to build run\/level tables *\/$/;"	m	struct:CoefVLCTable	file:
levels0	wmadata.h	/^static const uint16_t levels0[60] = {$/;"	v
levels1	wmadata.h	/^static const uint16_t levels1[40] = {$/;"	v
levels2	wmadata.h	/^static const uint16_t levels2[340] = {$/;"	v
levels3	wmadata.h	/^static const uint16_t levels3[180] = {$/;"	v
levels4	wmadata.h	/^static const uint16_t levels4[70] = {$/;"	v
levels5	wmadata.h	/^static const uint16_t levels5[40] = {$/;"	v
lfe	ac3enc.c	/^    int lfe;$/;"	m	struct:AC3EncodeContext	file:
lfe_channel	ac3enc.c	/^    int lfe_channel;$/;"	m	struct:AC3EncodeContext	file:
lfe_expbap	liba52/a52_internal.h	/^    expbap_t lfe_expbap;$/;"	m	struct:a52_state_s
lfeba	liba52/a52_internal.h	/^    ba_t lfeba;			\/* lfe bit allocation parameters *\/$/;"	m	struct:a52_state_s
lfeon	liba52/a52_internal.h	/^    uint8_t lfeon;		\/* coded lfe channel *\/$/;"	m	struct:a52_state_s
lfsr_state	liba52/a52_internal.h	/^    uint16_t lfsr_state;	\/* dither state *\/$/;"	m	struct:a52_state_s
lhist	ra288.c	/^	float lhist[10];$/;"	m	file:
liba52name	a52dec.c	/^static const char* liba52name = "liba52.so.0";$/;"	v	file:
libfaadname	faad.c	/^static const char* libfaadname = "libfaad.so.0";$/;"	v	file:
lift	snow.c	/^static always_inline void lift(DWTELEM *dst, DWTELEM *src, DWTELEM *ref, int dst_step, int src_step, int ref_step, int width, int mul, int add, int shift, int highpass, int inverse){$/;"	f	file:
lift5	snow.c	/^static always_inline void lift5(DWTELEM *dst, DWTELEM *src, DWTELEM *ref, int dst_step, int src_step, int ref_step, int width, int mul, int add, int shift, int highpass, int inverse){$/;"	f	file:
lift5	snow.c	949;"	d	file:
lift5	snow.c	959;"	d	file:
likely	alpha/asm.h	33;"	d
likely	alpha/asm.h	36;"	d
line_buf	imgresample.c	/^    uint8_t *line_buf;$/;"	m	struct:ImgReSampleContext	file:
line_inc	interplayvideo.c	/^    int line_inc;$/;"	m	struct:IpvideoContext	file:
linear	resample2.c	/^    int linear;$/;"	m	struct:AVResampleContext	file:
linear_to_alaw	pcm.c	/^static uint8_t *linear_to_alaw = NULL;$/;"	v	file:
linear_to_alaw_ref	pcm.c	/^static int linear_to_alaw_ref = 0;$/;"	v	file:
linear_to_ulaw	pcm.c	/^static uint8_t *linear_to_ulaw = NULL;$/;"	v	file:
linear_to_ulaw_ref	pcm.c	/^static int linear_to_ulaw_ref = 0;$/;"	v	file:
linecpy	libpostproc/postprocess_internal.h	/^static inline void linecpy(void *dest, void *src, int lines, int stride)$/;"	f
linesize	avcodec.h	/^    int linesize[4];       \/\/\/< number of bytes per line$/;"	m	struct:AVPicture
linesize	mjpeg.c	/^    int linesize[MAX_COMPONENTS];                   \/\/\/< linesize << interlaced$/;"	m	struct:MJpegDecodeContext	file:
linesize	mpegvideo.h	/^    int linesize;              \/\/\/< line size, in bytes, may be different from width $/;"	m	struct:MpegEncContext
linesize	utils.c	/^    int linesize[4];$/;"	m	struct:InternalBuffer	file:
ljpeg_decode_rgb_scan	mjpeg.c	/^static int ljpeg_decode_rgb_scan(MJpegDecodeContext *s, int predictor, int point_transform){$/;"	f	file:
ljpeg_decode_yuv_scan	mjpeg.c	/^static int ljpeg_decode_yuv_scan(MJpegDecodeContext *s, int predictor, int point_transform){$/;"	f	file:
ljpeg_encoder	mjpeg.c	/^AVCodec ljpeg_encoder = { \/\/FIXME avoid MPV_* lossless jpeg shouldnt need them$/;"	v
lmax	avcodec.h	/^    int lmax;$/;"	m	struct:AVCodecContext
lmin	avcodec.h	/^    int lmin;$/;"	m	struct:AVCodecContext
load_input_picture	mpegvideo.c	/^static int load_input_picture(MpegEncContext *s, AVFrame *pic_arg){$/;"	f	file:
load_matrix	sh4/idct_sh4.c	106;"	d	file:
load_matrix	sh4/idct_sh4.c	54;"	d	file:
load_matrix_	sh4/idct_sh4.c	/^static void load_matrix_(float xf[],const float table[])$/;"	f	file:
lock_ben	beosthread.c	/^static inline int lock_ben(struct benaphore *ben)$/;"	f	file:
loco_decode_plane	loco.c	/^static int loco_decode_plane(LOCOContext *l, uint8_t *data, int width, int height,$/;"	f	file:
loco_decoder	loco.c	/^AVCodec loco_decoder = {$/;"	v
loco_get_rice	loco.c	/^static inline int loco_get_rice(RICEContext *r)$/;"	f	file:
loco_get_rice_param	loco.c	/^static int loco_get_rice_param(RICEContext *r)$/;"	f	file:
loco_predict	loco.c	/^static inline int loco_predict(uint8_t* data, int stride, int step)$/;"	f	file:
loco_update_rice_param	loco.c	/^static inline void loco_update_rice_param(RICEContext *r, int val)$/;"	f	file:
log2_max_frame_num	h264.c	/^    int log2_max_frame_num;            \/\/\/< log2_max_frame_num_minus4 + 4$/;"	m	struct:SPS	file:
log2_max_poc_lsb	h264.c	/^    int log2_max_poc_lsb;              \/\/\/< log2_max_pic_order_cnt_lsb_minus4$/;"	m	struct:SPS	file:
log2_run	ffv1.c	/^static const uint8_t log2_run[32]={$/;"	v	file:
log2_tab	ac3enc.c	/^static int log2_tab(int16_t *tab, int n)$/;"	f	file:
longName	libpostproc/postprocess_internal.h	/^	char *longName;$/;"	m	struct:PPFilter
long_end	mpegaudiodec.c	/^    int short_start, long_end; \/* long\/short band indexes *\/$/;"	m	struct:GranuleDef	file:
long_index	h264.c	/^    int long_index;$/;"	m	struct:MMCO	file:
long_ref	h264.c	/^    Picture *long_ref[16];$/;"	m	struct:H264Context	file:
long_ref	mpegvideo.h	/^    int long_ref;               \/\/\/< 1->long term reference 0->short term reference$/;"	m	struct:Picture
long_ref_count	h264.c	/^    int long_ref_count;  \/\/\/< number of actual long term references$/;"	m	struct:H264Context	file:
loop_filter	mpegvideo.h	/^    int loop_filter;    $/;"	m	struct:MpegEncContext
lossless	mjpeg.c	/^    int lossless;$/;"	m	struct:MJpegDecodeContext	file:
lossless	sonic.c	/^    int lossless, decorrelation;$/;"	m	struct:SonicContext	file:
lossy	loco.c	/^    int lossy;$/;"	m	struct:LOCOContext	file:
lossy	loco.c	/^    int lossy;$/;"	m	struct:RICEContext	file:
low	cabac.h	/^    int low;$/;"	m	struct:CABACContext
low	rangecoder.h	/^    int low;$/;"	m	struct:RangeCoder
low_delay	mpegvideo.h	/^    int low_delay;                   \/\/\/< no reordering needed \/ has no b-frames $/;"	m	struct:MpegEncContext
low_latency_sprite	mpegvideo.h	/^    int low_latency_sprite;$/;"	m	struct:MpegEncContext
lowres	avcodec.h	/^     int lowres;$/;"	m	struct:AVCodecContext
lpcqoffset	shorten.c	/^    int32_t lpcqoffset;$/;"	m	struct:ShortenContext	file:
lps_range	cabac.h	/^    uint8_t lps_range[2*65][4];   \/\/\/< rangeTabLPS$/;"	m	struct:CABACContext
lps_state	cabac.h	/^    uint8_t lps_state[2*64];      \/\/\/< transIdxLPS$/;"	m	struct:CABACContext
lq	ps2/mmi.h	42;"	d
lq2	ps2/mmi.h	45;"	d
lrintf	dsputil.h	/^static always_inline long int lrintf(float x)$/;"	f
lsf	mpegaudio.c	/^    int lsf;           \/* 1 if mpeg2 low bitrate selected *\/$/;"	m	struct:MpegAudioContext	file:
lsf	mpegaudiodec.c	/^    int lsf;$/;"	m	struct:MPADecodeContext	file:
lsf_nsf_table	mpegaudiodectab.h	/^static const uint8_t lsf_nsf_table[6][3][4] = {$/;"	v
lsf_sf_expand	mpegaudiodec.c	/^static inline void lsf_sf_expand(int *slen,$/;"	f	file:
lshift_tab	ac3enc.c	/^static void lshift_tab(int16_t *tab, int n, int lshift)$/;"	f	file:
lsp_codebook	wmadata.h	/^static const float lsp_codebook[NB_LSP_COEFS][16] = {$/;"	v
lsp_cos_table	wmadec.c	/^    float lsp_cos_table[BLOCK_MAX_SIZE];$/;"	m	struct:WMADecodeContext	file:
lsp_pow_e_table	wmadec.c	/^    float lsp_pow_e_table[256];$/;"	m	struct:WMADecodeContext	file:
lsp_pow_m_table1	wmadec.c	/^    float lsp_pow_m_table1[(1 << LSP_POW_BITS)];$/;"	m	struct:WMADecodeContext	file:
lsp_pow_m_table2	wmadec.c	/^    float lsp_pow_m_table2[(1 << LSP_POW_BITS)];$/;"	m	struct:WMADecodeContext	file:
ltc_divisor	dvdata.h	/^    int              ltc_divisor;         \/* FPS from the LTS standpoint *\/$/;"	m	struct:DVprofile
lumMode	libpostproc/postprocess_internal.h	/^	int lumMode; 			\/\/\/< acivates filters for luminance$/;"	m	struct:PPMode
luma_dc_field_scan	h264data.h	/^static const uint8_t luma_dc_field_scan[16]={$/;"	v
luma_dc_vlc_length	mpegvideo.h	/^    uint8_t *luma_dc_vlc_length;$/;"	m	struct:MpegEncContext
luma_dc_zigzag_scan	h264data.h	/^static const uint8_t luma_dc_zigzag_scan[16]={$/;"	v
luma_elim_threshold	avcodec.h	/^    int luma_elim_threshold;$/;"	m	struct:AVCodecContext
luma_elim_threshold	mpegvideo.h	/^    int luma_elim_threshold;$/;"	m	struct:MpegEncContext
luma_log2_weight_denom	h264.c	/^    int luma_log2_weight_denom;$/;"	m	struct:H264Context	file:
luma_offset	h264.c	/^    int luma_offset[2][16];$/;"	m	struct:H264Context	file:
luma_weight	h264.c	/^    int luma_weight[2][16];$/;"	m	struct:H264Context	file:
lumi_masking	avcodec.h	/^    float lumi_masking;$/;"	m	struct:AVCodecContext
lumscale	vc9.c	/^    uint8_t lumscale;$/;"	m	struct:VC9Context	file:
lumshift	vc9.c	/^    uint8_t lumshift;$/;"	m	struct:VC9Context	file:
lz_unpack	vmdav.c	/^static void lz_unpack(unsigned char *src, unsigned char *dest)$/;"	f	file:
m	snow.c	/^    MpegEncContext m; \/\/ needed for motion estimation, should not be used for anything else, the idea is to make the motion estimation eventually independant of MpegEncContext, so this will be removed then (FIXME\/XXX)$/;"	m	struct:SnowContext	file:
m	svq1.c	/^    MpegEncContext m; \/\/ needed for motion estimation, should not be used for anything else, the idea is to make the motion estimation eventually independant of MpegEncContext, so this will be removed then (FIXME\/XXX)$/;"	m	struct:SVQ1Context	file:
mace3_decoder	mace.c	/^AVCodec mace3_decoder = {$/;"	v
mace6_decoder	mace.c	/^AVCodec mace6_decoder = {$/;"	v
mace_decode_frame	mace.c	/^static int mace_decode_frame(AVCodecContext *avctx,$/;"	f	file:
mace_decode_init	mace.c	/^static int mace_decode_init(AVCodecContext * avctx)$/;"	f	file:
macroblock	vp3.c	/^    int macroblock;$/;"	m	struct:Vp3Fragment	file:
macroblock_coding	vp3.c	/^    unsigned char *macroblock_coding;$/;"	m	struct:Vp3DecodeContext	file:
macroblock_count	vp3.c	/^    int macroblock_count;$/;"	m	struct:Vp3DecodeContext	file:
macroblock_fragments	vp3.c	/^    int *macroblock_fragments;$/;"	m	struct:Vp3DecodeContext	file:
macroblock_height	vp3.c	/^    int macroblock_height;$/;"	m	struct:Vp3DecodeContext	file:
macroblock_width	vp3.c	/^    int macroblock_width;$/;"	m	struct:Vp3DecodeContext	file:
magicF2W	liba52/resample_mmx.c	/^static uint64_t __attribute__((aligned(8))) attribute_used magicF2W= 0x43c0000043c00000LL;$/;"	v	file:
main	apiexample.c	/^int main(int argc, char **argv)$/;"	f
main	cabac.c	/^int main(){$/;"	f
main	dct-test.c	/^int main(int argc, char **argv)$/;"	f
main	eval.c	/^main(){$/;"	f
main	fft-test.c	/^int main(int argc, char **argv)$/;"	f
main	i386/cputest.c	/^int main ( void )$/;"	f
main	imgresample.c	/^int main(int argc, char **argv)$/;"	f
main	motion_test.c	/^int main(int argc, char **argv)$/;"	f
main	snow.c	/^int main(){$/;"	f
make_cdt15_entry	truemotion1.c	/^static int make_cdt15_entry(int p2, int p1, int16_t *cdt)$/;"	f	file:
make_cdt16_entry	truemotion1.c	/^static int make_cdt16_entry(int p2, int p1, int16_t *cdt)$/;"	f	file:
make_cdt24_entry	truemotion1.c	/^static int make_cdt24_entry(int p2, int p1, int16_t *cdt)$/;"	f	file:
make_ydt15_entry	truemotion1.c	/^static int make_ydt15_entry(int p2, int p1, int16_t *ydt)$/;"	f	file:
make_ydt16_entry	truemotion1.c	/^static int make_ydt16_entry(int p2, int p1, int16_t *ydt)$/;"	f	file:
make_ydt24_entry	truemotion1.c	/^static int make_ydt24_entry(int p2, int p1, int16_t *ydt)$/;"	f	file:
malloc	common.h	496;"	d
malloc	liba52/a52.h	29;"	d
malloc	mem.c	28;"	d	file:
malloc	snow.c	3112;"	d	file:
mant	g726.c	/^	int mant;   \/**< 6bit mantissa *\/$/;"	m	struct:Float11	file:
mant1_cnt	ac3enc.c	/^    int mant1_cnt, mant2_cnt, mant4_cnt;$/;"	m	struct:AC3EncodeContext	file:
mant2_cnt	ac3enc.c	/^    int mant1_cnt, mant2_cnt, mant4_cnt;$/;"	m	struct:AC3EncodeContext	file:
mant4_cnt	ac3enc.c	/^    int mant1_cnt, mant2_cnt, mant4_cnt;$/;"	m	struct:AC3EncodeContext	file:
map	mpegvideo.h	/^    uint32_t *map;                     \/\/\/< map to avoid duplicate evaluations $/;"	m	struct:MotionEstContext
map_col_to_list0	h264.c	/^    int map_col_to_list0[2][16];$/;"	m	struct:H264Context	file:
map_generation	mpegvideo.h	/^    int map_generation;  $/;"	m	struct:MotionEstContext
mask	libpostproc/postprocess_internal.h	/^	int mask; 		\/\/\/< Bitmask to turn this filter on$/;"	m	struct:PPFilter
maskmovq	i386/mmx.h	205;"	d
masktab	ac3tab.h	/^static uint8_t masktab[253];$/;"	v
matrix_coef	vc9.c	/^    int matrix_coef;      \/\/\/< 8bits, Color primaries->YCbCr transform matrix$/;"	m	struct:VC9Context	file:
max	avcodec.h	/^    double max;$/;"	m	struct:AVOption
maxAllowedY	libpostproc/postprocess_internal.h	/^	int maxAllowedY; 		\/\/\/< for brihtness correction$/;"	m	struct:PPMode
maxClippedThreshold	libpostproc/postprocess_internal.h	/^	float maxClippedThreshold;	\/\/\/< amount of "black" u r willing to loose to get a brightness corrected picture$/;"	m	struct:PPMode
maxTmpNoise	libpostproc/postprocess_internal.h	/^	int maxTmpNoise[3]; 		\/\/\/< for Temporal Noise Reducing filter (Maximal sum of abs differences)$/;"	m	struct:PPMode
max_b_frames	avcodec.h	/^    int max_b_frames;$/;"	m	struct:AVCodecContext
max_b_frames	mpegvideo.h	/^    int max_b_frames; \/\/\/< max number of b-frames for encoding $/;"	m	struct:MpegEncContext
max_blocksize	flac.c	/^    int min_blocksize, max_blocksize;$/;"	m	struct:FLACContext	file:
max_comp_size	lcl.c	/^    unsigned int max_comp_size;$/;"	m	struct:LclContext	file:
max_exponent	wmadec.c	/^    float max_exponent[MAX_CHANNELS];$/;"	m	struct:WMADecodeContext	file:
max_framesize	flac.c	/^    int min_framesize, max_framesize;$/;"	m	struct:FLACContext	file:
max_framesize	shorten.c	/^    int min_framesize, max_framesize;$/;"	m	struct:ShortenContext	file:
max_level	mpegvideo.h	/^    int8_t *max_level[2];          \/\/\/< encoding & decoding $/;"	m	struct:RLTable
max_pic_num	h264.c	/^    int max_pic_num;$/;"	m	struct:H264Context	file:
max_qcoeff	mpegvideo.h	/^    int max_qcoeff;          \/\/\/< maximum encodable coefficient $/;"	m	struct:MpegEncContext
max_qdiff	avcodec.h	/^    int max_qdiff;$/;"	m	struct:AVCodecContext
max_run	mpegvideo.h	/^    int8_t *max_run[2];            \/\/\/< encoding & decoding $/;"	m	struct:RLTable
maxsb8	alpha/asm.h	108;"	d
maxsb8	alpha/asm.h	122;"	d
maxsb8	alpha/asm.h	151;"	d
maxsw4	alpha/asm.h	110;"	d
maxsw4	alpha/asm.h	124;"	d
maxsw4	alpha/asm.h	153;"	d
maxub8	alpha/asm.h	107;"	d
maxub8	alpha/asm.h	121;"	d
maxub8	alpha/asm.h	150;"	d
maxuw4	alpha/asm.h	109;"	d
maxuw4	alpha/asm.h	123;"	d
maxuw4	alpha/asm.h	152;"	d
mb	dv.c	/^    DCTELEM *mb;$/;"	m	struct:EncBlockInfo	file:
mb2b8_xy	h264.c	/^    uint16_t *mb2b8_xy;$/;"	m	struct:H264Context	file:
mb2b_xy	h264.c	/^    uint16_t *mb2b_xy; \/\/FIXME are these 4 a good idea?$/;"	m	struct:H264Context	file:
mbAddrIncrTable	mpeg12data.h	/^static const uint8_t mbAddrIncrTable[36][2] = {$/;"	v
mbMotionVectorTable	mpeg12data.h	/^static const uint8_t mbMotionVectorTable[17][2] = {$/;"	v
mbPatTable	mpeg12data.h	/^static const uint8_t mbPatTable[64][2] = {$/;"	v
mb_aff	h264.c	/^    int mb_aff;                        \/\/\/<mb_adaptive_frame_field_flag$/;"	m	struct:SPS	file:
mb_area_start	dv.c	/^static const int mb_area_start[5] = { 1, 6, 21, 43, 64 }; $/;"	v	file:
mb_btype_vlc	mpeg12.c	/^static VLC mb_btype_vlc;$/;"	v	file:
mb_change_bits	truemotion1.c	/^    uint8_t *mb_change_bits;$/;"	m	struct:TrueMotion1Context	file:
mb_change_bits_row_size	truemotion1.c	/^    int mb_change_bits_row_size;$/;"	m	struct:TrueMotion1Context	file:
mb_cmp	avcodec.h	/^    int mb_cmp;$/;"	m	struct:AVCodecContext
mb_cmp	dsputil.h	/^    me_cmp_func mb_cmp[5];$/;"	m	struct:DSPContext
mb_cmp_score	mpegvideo.h	/^    int32_t *mb_cmp_score;	\/\/\/< Table for MB cmp scores, for mb decission FIXME remove$/;"	m	struct:Picture
mb_decision	avcodec.h	/^    int mb_decision;$/;"	m	struct:AVCodecContext
mb_field_decoding_flag	h264.c	/^    int mb_field_decoding_flag;$/;"	m	struct:H264Context	file:
mb_flags	mpegvideo.h	/^    int mb_flags;$/;"	m	struct:MotionEstContext
mb_height	asv1.c	/^    int mb_height;$/;"	m	struct:ASV1Context	file:
mb_height	h264.c	/^    int mb_height;                     \/\/\/< frame_height_in_mbs_minus1 + 1$/;"	m	struct:SPS	file:
mb_height	mdec.c	/^    int mb_height;$/;"	m	struct:MDECContext	file:
mb_height	mjpeg.c	/^    int mb_width, mb_height;$/;"	m	struct:MJpegDecodeContext	file:
mb_height	mpegvideo.h	/^    int mb_width, mb_height;   \/\/\/< number of MBs horizontally & vertically $/;"	m	struct:MpegEncContext
mb_height2	asv1.c	/^    int mb_height2;$/;"	m	struct:ASV1Context	file:
mb_index2xy	mpegvideo.h	/^    int *mb_index2xy;        \/\/\/< mb_index -> mb_x + mb_y*mb_stride$/;"	m	struct:MpegEncContext
mb_intra	h264.c	40;"	d	file:
mb_intra	mpegvideo.h	/^    int mb_intra;$/;"	m	struct:MpegEncContext
mb_lmax	avcodec.h	/^    int mb_lmax;$/;"	m	struct:AVCodecContext
mb_lmin	avcodec.h	/^    int mb_lmin;$/;"	m	struct:AVCodecContext
mb_mean	mpegvideo.h	/^    uint8_t *mb_mean;           \/\/\/< Table for MB luminance $/;"	m	struct:Picture
mb_non_intra_vlc	msmpeg4.c	/^static VLC mb_non_intra_vlc[4];$/;"	v	file:
mb_num	mpegvideo.h	/^    int mb_num;                \/\/\/< number of MBs of a picture $/;"	m	struct:MpegEncContext
mb_num_left	mpegvideo.h	/^    int mb_num_left;                 \/\/\/< number of MBs left in this video packet (for partitioned Slices only)$/;"	m	struct:MpegEncContext
mb_pat_vlc	mpeg12.c	/^static VLC mb_pat_vlc;$/;"	v	file:
mb_penalty_factor	mpegvideo.h	/^    int mb_penalty_factor;$/;"	m	struct:MotionEstContext
mb_ptype_vlc	mpeg12.c	/^static VLC mb_ptype_vlc;$/;"	v	file:
mb_qmax	avcodec.h	/^    int mb_qmax;$/;"	m	struct:AVCodecContext
mb_qmin	avcodec.h	/^    int mb_qmin;$/;"	m	struct:AVCodecContext
mb_skip_run	mpegvideo.h	/^    int mb_skip_run;$/;"	m	struct:MpegEncContext
mb_skiped	mpegvideo.h	/^    int mb_skiped;                \/\/\/< MUST BE SET only during DECODING $/;"	m	struct:MpegEncContext
mb_slice_group_map_type	h264.c	/^    int mb_slice_group_map_type;$/;"	m	struct:PPS	file:
mb_stride	mpegvideo.h	/^    int mb_stride;             \/\/\/< mb_width+1 used for some arrays to allow simple addressng of left & top MBs withoutt sig11$/;"	m	struct:MpegEncContext
mb_threshold	avcodec.h	/^     int mb_threshold;$/;"	m	struct:AVCodecContext
mb_type	mpegvideo.h	/^    uint16_t *mb_type;           \/\/\/< Table for candidate MB types for encoding$/;"	m	struct:MpegEncContext
mb_type	svq1.c	/^    uint16_t *mb_type;$/;"	m	struct:SVQ1Context	file:
mb_type_b_map	mpeg4data.h	/^static const int mb_type_b_map[4]= {$/;"	v
mb_type_b_tab	mpeg4data.h	/^static const uint8_t mb_type_b_tab[4][2] = {$/;"	v
mb_type_b_vlc	h263.c	/^static VLC mb_type_b_vlc;$/;"	v	file:
mb_type_base	mpegvideo.h	/^    uint32_t *mb_type_base;$/;"	m	struct:Picture
mb_var	mpegvideo.h	/^    uint16_t *mb_var;           \/\/\/< Table for MB variances $/;"	m	struct:Picture
mb_var_sum	mpegvideo.h	/^    int mb_var_sum;             \/\/\/< sum of MB variance for current frame $/;"	m	struct:Picture
mb_var_sum	mpegvideo.h	/^    int mb_var_sum;$/;"	m	struct:RateControlEntry
mb_var_sum_temp	mpegvideo.h	/^    int mb_var_sum_temp;$/;"	m	struct:MotionEstContext
mb_var_thread	mpegvideo.c	/^static int mb_var_thread(AVCodecContext *c, void *arg){$/;"	f	file:
mb_width	asv1.c	/^    int mb_width;$/;"	m	struct:ASV1Context	file:
mb_width	h264.c	/^    int mb_width;                      \/\/\/< frame_width_in_mbs_minus1 + 1$/;"	m	struct:SPS	file:
mb_width	mdec.c	/^    int mb_width;$/;"	m	struct:MDECContext	file:
mb_width	mjpeg.c	/^    int mb_width, mb_height;$/;"	m	struct:MJpegDecodeContext	file:
mb_width	mpegvideo.h	/^    int mb_width, mb_height;   \/\/\/< number of MBs horizontally & vertically $/;"	m	struct:MpegEncContext
mb_width2	asv1.c	/^    int mb_width2;$/;"	m	struct:ASV1Context	file:
mb_x	mdec.c	/^    int mb_x, mb_y;$/;"	m	struct:MDECContext	file:
mb_x	mpegvideo.h	/^    int mb_x, mb_y;$/;"	m	struct:MpegEncContext
mb_y	mdec.c	/^    int mb_x, mb_y;$/;"	m	struct:MDECContext	file:
mb_y	mpegvideo.h	/^    int mb_x, mb_y;$/;"	m	struct:MpegEncContext
mba_diff	h261.c	/^    int mba_diff;$/;"	m	struct:H261Context	file:
mbincr_vlc	mpeg12.c	/^static VLC mbincr_vlc;$/;"	v	file:
mbintra_table	mpegvideo.h	/^    uint8_t *mbintra_table;       \/\/\/< used to avoid setting {ac, dc, cbp}-pred stuff to zero on inter MB decoding $/;"	m	struct:MpegEncContext
mbskip_table	mpegvideo.h	/^    uint8_t *mbskip_table;        \/**< used to avoid copy if macroblock skipped (for black regions for example) $/;"	m	struct:MpegEncContext
mc_block	snow.c	/^static void mc_block(uint8_t *dst, uint8_t *src, uint8_t *tmp, int stride, int b_w, int b_h, int dx, int dy){$/;"	f	file:
mc_dir_part	h264.c	/^static inline void mc_dir_part(H264Context *h, Picture *pic, int n, int square, int chroma_height, int delta, int list,$/;"	f	file:
mc_mb_var	mpegvideo.h	/^    uint16_t *mc_mb_var;        \/\/\/< Table for motion compensated MB variances $/;"	m	struct:Picture
mc_mb_var_sum	mpegvideo.h	/^    int mc_mb_var_sum;          \/\/\/< motion compensated MB variance for current frame $/;"	m	struct:Picture
mc_mb_var_sum	mpegvideo.h	/^    int mc_mb_var_sum;$/;"	m	struct:RateControlEntry
mc_mb_var_sum_temp	mpegvideo.h	/^    int mc_mb_var_sum_temp;$/;"	m	struct:MotionEstContext
mc_part	h264.c	/^static inline void mc_part(H264Context *h, int n, int square, int chroma_height, int delta,$/;"	f	file:
mc_part_std	h264.c	/^static inline void mc_part_std(H264Context *h, int n, int square, int chroma_height, int delta,$/;"	f	file:
mc_part_weighted	h264.c	/^static inline void mc_part_weighted(H264Context *h, int n, int square, int chroma_height, int delta,$/;"	f	file:
mca	snow.c	2073;"	d	file:
mcdc	4xm.c	/^static inline void mcdc(uint16_t *dst, uint16_t *src, int log2w, int h, int stride, int scale, int dc){$/;"	f	file:
mcf	snow.c	2568;"	d	file:
mcfh	snow.c	2593;"	d	file:
mconly_picture	snow.c	/^    AVFrame mconly_picture;$/;"	m	struct:SnowContext	file:
mcsel	mpegvideo.h	/^    int mcsel;$/;"	m	struct:MpegEncContext
mdct512	ac3enc.c	/^static void mdct512(int32_t *out, int16_t *in)$/;"	f	file:
mdct_buf	mpegaudiodec.c	/^    int32_t mdct_buf[MPA_MAX_CHANNELS][SBLIMIT * 18]; \/* previous samples, for layer 3 MDCT *\/$/;"	m	struct:MPADecodeContext	file:
mdct_ctx	wmadec.c	/^    MDCTContext mdct_ctx[BLOCK_NB_SIZES];$/;"	m	struct:WMADecodeContext	file:
mdct_ref	fft-test.c	/^void mdct_ref(float *output, float *input, int n)$/;"	f
mdct_tmp	wmadec.c	/^    FFTSample mdct_tmp[BLOCK_MAX_SIZE] __attribute__((aligned(16))); \/* temporary storage for imdct *\/$/;"	m	struct:WMADecodeContext	file:
mdct_win	mpegaudiodec.c	/^static int32_t mdct_win[8][36];$/;"	v	file:
mdec_common_init	mdec.c	/^static void mdec_common_init(AVCodecContext *avctx){$/;"	f	file:
mdec_decode_block_intra	mdec.c	/^static inline int mdec_decode_block_intra(MDECContext *a, DCTELEM *block, int n)$/;"	f	file:
mdec_decoder	mdec.c	/^AVCodec mdec_decoder = {$/;"	v
me	mpegvideo.h	/^    MotionEstContext me;$/;"	m	struct:MpegEncContext
me_cmp	avcodec.h	/^    int me_cmp;$/;"	m	struct:AVCodecContext
me_cmp	dsputil.h	/^    me_cmp_func me_cmp[5];$/;"	m	struct:DSPContext
me_cmp_func	dsputil.h	/^typedef int (*me_cmp_func)(void \/*MpegEncContext*\/ *s, uint8_t *blk1\/*align width (8 or 16)*\/, uint8_t *blk2\/*align 1*\/, int line_size, int h)\/* __attribute__ ((const))*\/;$/;"	t
me_flags	xvidff.c	/^    int me_flags;                  \/** Motion Estimation flags *\/$/;"	m	struct:xvid_context	file:
me_method	avcodec.h	/^    int me_method;$/;"	m	struct:AVCodecContext
me_method	mpegvideo.h	/^    int me_method;                       \/\/\/< ME algorithm $/;"	m	struct:MpegEncContext
me_pre_cmp	avcodec.h	/^    int me_pre_cmp;$/;"	m	struct:AVCodecContext
me_pre_cmp	dsputil.h	/^    me_cmp_func me_pre_cmp[5];$/;"	m	struct:DSPContext
me_range	avcodec.h	/^    int me_range;$/;"	m	struct:AVCodecContext
me_sub_cmp	avcodec.h	/^    int me_sub_cmp;$/;"	m	struct:AVCodecContext
me_sub_cmp	dsputil.h	/^    me_cmp_func me_sub_cmp[5];$/;"	m	struct:DSPContext
me_subpel_quality	avcodec.h	/^    int me_subpel_quality;$/;"	m	struct:AVCodecContext
me_threshold	avcodec.h	/^     int me_threshold;$/;"	m	struct:AVCodecContext
memalign	liba52/parse.c	33;"	d	file:
memalign	libpostproc/postprocess.c	100;"	d	file:
memsetw	h263.c	/^static inline void memsetw(short *tab, int val, int n)$/;"	f	file:
memzero_align8	sh4/dsputil_sh4.c	/^static void memzero_align8(void *dst,size_t size)$/;"	f	file:
merge_context_after_encode	mpegvideo.c	/^static void merge_context_after_encode(MpegEncContext *dst, MpegEncContext *src){$/;"	f	file:
merge_context_after_me	mpegvideo.c	/^static void merge_context_after_me(MpegEncContext *dst, MpegEncContext *src){$/;"	f	file:
metadata_streaminfo	flac.c	/^static void metadata_streaminfo(FLACContext *s)$/;"	f	file:
mid_pred	common.h	/^static inline int mid_pred(int a, int b, int c)$/;"	f
min	avcodec.h	/^    double min;$/;"	m	struct:AVOption
min	indeo3.c	99;"	d	file:
minAllowedY	libpostproc/postprocess_internal.h	/^	int minAllowedY; 		\/\/\/< for brigtness correction$/;"	m	struct:PPMode
minChromQuality	libpostproc/postprocess_internal.h	/^	int minChromQuality;	\/\/\/< minimum quality to turn chrominance filtering on$/;"	m	struct:PPFilter
minLumQuality	libpostproc/postprocess_internal.h	/^	int minLumQuality; 	\/\/\/< minimum quality to turn luminance filtering on$/;"	m	struct:PPFilter
min_blocksize	flac.c	/^    int min_blocksize, max_blocksize;$/;"	m	struct:FLACContext	file:
min_framesize	flac.c	/^    int min_framesize, max_framesize;$/;"	m	struct:FLACContext	file:
min_framesize	shorten.c	/^    int min_framesize, max_framesize;$/;"	m	struct:ShortenContext	file:
min_qcoeff	mpegvideo.h	/^    int min_qcoeff;          \/\/\/< minimum encodable coefficient $/;"	m	struct:MpegEncContext
minima_cmp	motion_est.c	/^static int minima_cmp(const void *a, const void *b){$/;"	f	file:
minsb8	alpha/asm.h	104;"	d
minsb8	alpha/asm.h	118;"	d
minsb8	alpha/asm.h	147;"	d
minsw4	alpha/asm.h	106;"	d
minsw4	alpha/asm.h	120;"	d
minsw4	alpha/asm.h	149;"	d
minub8	alpha/asm.h	103;"	d
minub8	alpha/asm.h	117;"	d
minub8	alpha/asm.h	146;"	d
minuw4	alpha/asm.h	105;"	d
minuw4	alpha/asm.h	119;"	d
minuw4	alpha/asm.h	148;"	d
mirror	snow.c	/^static inline int mirror(int v, int m){$/;"	f	file:
misc_bits	avcodec.h	/^    int misc_bits;$/;"	m	struct:AVCodecContext
misc_bits	mpegvideo.h	/^    int misc_bits; \/\/\/< cbp, mb_type$/;"	m	struct:MpegEncContext
misc_bits	mpegvideo.h	/^    int misc_bits;$/;"	m	struct:RateControlEntry
mix21to2	liba52/downmix.c	/^static void mix21to2 (sample_t * left, sample_t * right, sample_t bias)$/;"	f	file:
mix21toS	liba52/downmix.c	/^static void mix21toS (sample_t * samples, sample_t bias)$/;"	f	file:
mix22toS	liba52/downmix.c	/^static void mix22toS (sample_t * samples, sample_t bias)$/;"	f	file:
mix2to1	liba52/downmix.c	/^static void mix2to1 (sample_t * dest, sample_t * src, sample_t bias)$/;"	f	file:
mix31to2	liba52/downmix.c	/^static void mix31to2 (sample_t * samples, sample_t bias)$/;"	f	file:
mix31toS	liba52/downmix.c	/^static void mix31toS (sample_t * samples, sample_t bias)$/;"	f	file:
mix32to2	liba52/downmix.c	/^static void mix32to2 (sample_t * samples, sample_t bias)$/;"	f	file:
mix32toS	liba52/downmix.c	/^static void mix32toS (sample_t * samples, sample_t bias)$/;"	f	file:
mix3to1	liba52/downmix.c	/^static void mix3to1 (sample_t * samples, sample_t bias)$/;"	f	file:
mix3to2	liba52/downmix.c	/^static void mix3to2 (sample_t * samples, sample_t bias)$/;"	f	file:
mix4to1	liba52/downmix.c	/^static void mix4to1 (sample_t * samples, sample_t bias)$/;"	f	file:
mix5to1	liba52/downmix.c	/^static void mix5to1 (sample_t * samples, sample_t bias)$/;"	f	file:
mjpb_skiptosod	mjpeg.c	/^    int mjpb_skiptosod;$/;"	m	struct:MJpegDecodeContext	file:
mjpeg_close	mjpeg.c	/^void mjpeg_close(MpegEncContext *s)$/;"	f
mjpeg_ctx	mpegvideo.h	/^    struct MJpegContext *mjpeg_ctx;$/;"	m	struct:MpegEncContext
mjpeg_data_only_frames	mpegvideo.h	/^    int mjpeg_data_only_frames; \/\/\/< frames only with SOI, SOS and EOI markers $/;"	m	struct:MpegEncContext
mjpeg_decode_app	mjpeg.c	/^static int mjpeg_decode_app(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_com	mjpeg.c	/^static int mjpeg_decode_com(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_dc	mjpeg.c	/^static inline int mjpeg_decode_dc(MJpegDecodeContext *s, int dc_index)$/;"	f	file:
mjpeg_decode_dht	mjpeg.c	/^static int mjpeg_decode_dht(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_dqt	mjpeg.c	/^static int mjpeg_decode_dqt(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_dri	mjpeg.c	/^static int mjpeg_decode_dri(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_end	mjpeg.c	/^static int mjpeg_decode_end(AVCodecContext *avctx)$/;"	f	file:
mjpeg_decode_frame	mjpeg.c	/^static int mjpeg_decode_frame(AVCodecContext *avctx, $/;"	f	file:
mjpeg_decode_init	mjpeg.c	/^static int mjpeg_decode_init(AVCodecContext *avctx)$/;"	f	file:
mjpeg_decode_scan	mjpeg.c	/^static int mjpeg_decode_scan(MJpegDecodeContext *s){$/;"	f	file:
mjpeg_decode_sof	mjpeg.c	/^static int mjpeg_decode_sof(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decode_sos	mjpeg.c	/^static int mjpeg_decode_sos(MJpegDecodeContext *s)$/;"	f	file:
mjpeg_decoder	mjpeg.c	/^AVCodec mjpeg_decoder = {$/;"	v
mjpeg_encode_dc	mjpeg.c	/^static inline void mjpeg_encode_dc(MpegEncContext *s, int val,$/;"	f	file:
mjpeg_encode_mb	mjpeg.c	/^void mjpeg_encode_mb(MpegEncContext *s, $/;"	f
mjpeg_encoder	mpegvideo.c	/^AVCodec mjpeg_encoder = {$/;"	v
mjpeg_hsample	mpegvideo.h	/^    int mjpeg_hsample[3];       \/\/\/< horizontal sampling factors, default = {2, 1, 1} $/;"	m	struct:MpegEncContext
mjpeg_init	mjpeg.c	/^int mjpeg_init(MpegEncContext *s)$/;"	f
mjpeg_parser	mjpeg.c	/^AVCodecParser mjpeg_parser = {$/;"	v
mjpeg_picture_header	mjpeg.c	/^void mjpeg_picture_header(MpegEncContext *s)$/;"	f
mjpeg_picture_trailer	mjpeg.c	/^void mjpeg_picture_trailer(MpegEncContext *s)$/;"	f
mjpeg_vsample	mpegvideo.h	/^    int mjpeg_vsample[3];       \/\/\/< vertical sampling factors, default = {2, 1, 1} $/;"	m	struct:MpegEncContext
mjpeg_write_tables	mpegvideo.h	/^    int mjpeg_write_tables;     \/\/\/< do we want to have quantisation- and huffmantables in the jpeg file ? $/;"	m	struct:MpegEncContext
mjpegb_decode_frame	mjpeg.c	/^static int mjpegb_decode_frame(AVCodecContext *avctx, $/;"	f	file:
mjpegb_decoder	mjpeg.c	/^AVCodec mjpegb_decoder = {$/;"	v
mm_flags	fft-test.c	/^int mm_flags;$/;"	v
mm_flags	i386/dsputil_mmx.c	/^int mm_flags; \/* multimedia extension flags *\/$/;"	v
mm_flags	imgresample.c	/^int mm_flags;$/;"	v
mm_flags	ppc/dsputil_ppc.c	/^int mm_flags = 0;$/;"	v
mm_support	i386/cputest.c	/^int mm_support(void)$/;"	f
mm_support	ppc/dsputil_ppc.c	/^int mm_support(void)$/;"	f
mm_wabs	i386/mpegvideo_mmx.c	/^static const unsigned long long int mm_wabs __attribute__ ((aligned(8))) = 0xffffffffffffffffULL;$/;"	v	file:
mm_wone	i386/mpegvideo_mmx.c	/^static const unsigned long long int mm_wone __attribute__ ((aligned(8))) = 0x0001000100010001ULL;$/;"	v	file:
mmco	h264.c	/^    MMCO mmco[MAX_MMCO_COUNT];$/;"	m	struct:H264Context	file:
mmco_index	h264.c	/^    int mmco_index;$/;"	m	struct:H264Context	file:
mmxDcOffset	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) mmxDcOffset[64];$/;"	m	struct:PPContext
mmxDcThreshold	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) mmxDcThreshold[64];$/;"	m	struct:PPContext
mmx_fetch	i386/mmx.h	199;"	d
mmx_i2r	i386/mmx.h	33;"	d
mmx_m2r	i386/mmx.h	38;"	d
mmx_m2ri	i386/mmx.h	190;"	d
mmx_r2m	i386/mmx.h	43;"	d
mmx_r2r	i386/mmx.h	48;"	d
mmx_r2ri	i386/mmx.h	194;"	d
mmx_row	i386/idct_mmx.c	/^static inline void mmx_row (int16_t * table, int32_t * rounder)$/;"	f	file:
mmx_row_head	i386/idct_mmx.c	/^static inline void mmx_row_head (int16_t * row, int offset, int16_t * table)$/;"	f	file:
mmx_row_mid	i386/idct_mmx.c	/^static inline void mmx_row_mid (int16_t * row, int store,$/;"	f	file:
mmx_row_tail	i386/idct_mmx.c	/^static inline void mmx_row_tail (int16_t * row, int store)$/;"	f	file:
mmx_t	i386/mmx.h	/^} mmx_t;	\/* On an 8-byte (64-bit) boundary *\/$/;"	t
mmx_table	i386/idct_mmx.c	192;"	d	file:
mmxext_row	i386/idct_mmx.c	/^static inline void mmxext_row (int16_t * table, int32_t * rounder)$/;"	f	file:
mmxext_row_head	i386/idct_mmx.c	/^static inline void mmxext_row_head (int16_t * row, int offset, int16_t * table)$/;"	f	file:
mmxext_row_mid	i386/idct_mmx.c	/^static inline void mmxext_row_mid (int16_t * row, int store,$/;"	f	file:
mmxext_row_tail	i386/idct_mmx.c	/^static inline void mmxext_row_tail (int16_t * row, int store)$/;"	f	file:
mmxext_table	i386/idct_mmx.c	80;"	d	file:
mode	amr.c	/^    enum Mode mode;$/;"	m	struct:AMRContext	file:
mode	amr.c	/^    enum Mode mode;$/;"	m	struct:AMR_bitrates	file:
mode	amr.c	/^    int mode;$/;"	m	struct:AMRWBContext	file:
mode	amr.c	/^    int mode;$/;"	m	struct:AMRWB_bitrates	file:
mode	loco.c	/^    int mode;$/;"	m	struct:LOCOContext	file:
mode	mpegaudiodec.c	/^    int mode;$/;"	m	struct:MPADecodeContext	file:
mode_8bit	msvideo1.c	/^    int mode_8bit;  \/* if it's not 8-bit, it's 16-bit *\/$/;"	m	struct:Msvideo1Context	file:
mode_ext	mpegaudiodec.c	/^    int mode_ext;$/;"	m	struct:MPADecodeContext	file:
modified_levinson_durbin	sonic.c	/^static void modified_levinson_durbin(int *window, int window_entries,$/;"	f	file:
modified_quant	mpegvideo.h	/^    int modified_quant;$/;"	m	struct:MpegEncContext
modified_quant_tab	h263data.h	/^static const uint8_t modified_quant_tab[2][32]={$/;"	v
modify_qscale	ratecontrol.c	/^static double modify_qscale(MpegEncContext *s, RateControlEntry *rce, double q, int frame_num){$/;"	f	file:
mono_to_gray	imgconvert.c	/^static void mono_to_gray(AVPicture *dst, const AVPicture *src,$/;"	f	file:
mono_to_stereo	resample.c	/^static void mono_to_stereo(short *output, short *input, int n1)$/;"	f	file:
monoblack_to_gray	imgconvert.c	/^static void monoblack_to_gray(AVPicture *dst, const AVPicture *src,$/;"	f	file:
monowhite_to_gray	imgconvert.c	/^static void monowhite_to_gray(AVPicture *dst, const AVPicture *src,$/;"	f	file:
motion_func	motion_test.c	/^typedef int motion_func(uint8_t *blk1, uint8_t *blk2, int lx);$/;"	t	file:
motion_val16	svq1.c	/^    int16_t (*motion_val16[3])[2];$/;"	m	struct:SVQ1Context	file:
motion_val8	svq1.c	/^    int16_t (*motion_val8[3])[2];$/;"	m	struct:SVQ1Context	file:
motion_val_base	mpegvideo.h	/^    int16_t (*motion_val_base[2])[2];$/;"	m	struct:Picture
motion_x	vp3.c	/^    int motion_x;$/;"	m	struct:Vp3Fragment	file:
motion_y	vp3.c	/^    int motion_y;$/;"	m	struct:Vp3Fragment	file:
movd_m2r	i386/mmx.h	54;"	d
movd_r2m	i386/mmx.h	55;"	d
movd_r2r	i386/mmx.h	56;"	d
movdqa_m2r	i386/mmx.h	257;"	d
movdqa_r2m	i386/mmx.h	258;"	d
movdqa_r2r	i386/mmx.h	259;"	d
movdqu_m2r	i386/mmx.h	260;"	d
movdqu_r2m	i386/mmx.h	261;"	d
movdqu_r2r	i386/mmx.h	262;"	d
move2to1	liba52/downmix.c	/^static void move2to1 (sample_t * src, sample_t * dest, sample_t bias)$/;"	f	file:
movntq_r2m	i386/mmx.h	207;"	d
movq_m2r	i386/mmx.h	58;"	d
movq_r2m	i386/mmx.h	59;"	d
movq_r2r	i386/mmx.h	60;"	d
mp2_decoder	mpegaudiodec.c	/^AVCodec mp2_decoder =$/;"	v
mp2_encoder	mpegaudio.c	/^AVCodec mp2_encoder = {$/;"	v
mp3Channels	mpegaudiodec.c	/^static int mp3Channels[16] = {0,1,2,3,4,5,6,8,4}; \/* total output channels *\/$/;"	v	file:
mp3Frames	mpegaudiodec.c	/^static int mp3Frames[16] = {0,1,1,2,3,3,4,5,2};   \/* number of mp3 decoder instances *\/$/;"	v	file:
mp3_decoder	mpegaudiodec.c	/^AVCodec mp3_decoder =$/;"	v
mp3adu_decoder	mpegaudiodec.c	/^AVCodec mp3adu_decoder =$/;"	v
mp3decctx	mpegaudiodec.c	/^    MPADecodeContext *mp3decctx[5]; \/\/\/< MPADecodeContext for every decoder instance$/;"	m	struct:MP3On4DecodeContext	file:
mp3lame_encoder	mp3lameaudio.c	/^AVCodec mp3lame_encoder = {$/;"	v
mp3len	mp3lameaudio.c	/^static int mp3len(void *data, int *samplesPerFrame, int *sampleRate)$/;"	f	file:
mp3on4_decoder	mpegaudiodec.c	/^AVCodec mp3on4_decoder =$/;"	v
mp_decode_frame	mpegaudiodec.c	/^static int mp_decode_frame(MPADecodeContext *s, $/;"	f	file:
mp_decode_layer1	mpegaudiodec.c	/^static int mp_decode_layer1(MPADecodeContext *s)$/;"	f	file:
mp_decode_layer2	mpegaudiodec.c	/^static int mp_decode_layer2(MPADecodeContext *s)$/;"	f	file:
mp_decode_layer3	mpegaudiodec.c	/^static int mp_decode_layer3(MPADecodeContext *s)$/;"	f	file:
mpa_bitrate_tab	mpegaudiodectab.h	/^const uint16_t mpa_bitrate_tab[2][3][15] = {$/;"	v
mpa_decode_header	mpegaudiodec.c	/^int mpa_decode_header(AVCodecContext *avctx, uint32_t head)$/;"	f
mpa_enwindow	mpegaudiodectab.h	/^const int32_t mpa_enwindow[257] = {$/;"	v
mpa_freq_tab	mpegaudiodectab.h	/^const uint16_t mpa_freq_tab[3] = { 44100, 48000, 32000 };$/;"	v
mpa_huff_data	mpegaudiodectab.h	/^const uint8_t mpa_huff_data[32][2] = {$/;"	v
mpa_huff_tables	mpegaudiodectab.h	/^const HuffTable mpa_huff_tables[16] = {$/;"	v
mpa_huffbits_1	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_1[4] = {$/;"	v
mpa_huffbits_10	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_10[64] = {$/;"	v
mpa_huffbits_11	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_11[64] = {$/;"	v
mpa_huffbits_12	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_12[64] = {$/;"	v
mpa_huffbits_13	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_13[256] = {$/;"	v
mpa_huffbits_15	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_15[256] = {$/;"	v
mpa_huffbits_16	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_16[256] = {$/;"	v
mpa_huffbits_2	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_2[9] = {$/;"	v
mpa_huffbits_24	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_24[256] = {$/;"	v
mpa_huffbits_3	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_3[9] = {$/;"	v
mpa_huffbits_5	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_5[16] = {$/;"	v
mpa_huffbits_6	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_6[16] = {$/;"	v
mpa_huffbits_7	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_7[36] = {$/;"	v
mpa_huffbits_8	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_8[36] = {$/;"	v
mpa_huffbits_9	mpegaudiodectab.h	/^const uint8_t mpa_huffbits_9[36] = {$/;"	v
mpa_huffcodes_1	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_1[4] = {$/;"	v
mpa_huffcodes_10	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_10[64] = {$/;"	v
mpa_huffcodes_11	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_11[64] = {$/;"	v
mpa_huffcodes_12	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_12[64] = {$/;"	v
mpa_huffcodes_13	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_13[256] = {$/;"	v
mpa_huffcodes_15	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_15[256] = {$/;"	v
mpa_huffcodes_16	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_16[256] = {$/;"	v
mpa_huffcodes_2	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_2[9] = {$/;"	v
mpa_huffcodes_24	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_24[256] = {$/;"	v
mpa_huffcodes_3	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_3[9] = {$/;"	v
mpa_huffcodes_5	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_5[16] = {$/;"	v
mpa_huffcodes_6	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_6[16] = {$/;"	v
mpa_huffcodes_7	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_7[36] = {$/;"	v
mpa_huffcodes_8	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_8[36] = {$/;"	v
mpa_huffcodes_9	mpegaudiodectab.h	/^const uint16_t mpa_huffcodes_9[36] = {$/;"	v
mpa_pretab	mpegaudiodectab.h	/^const uint8_t mpa_pretab[2][22] = {$/;"	v
mpa_quad_bits	mpegaudiodectab.h	/^static uint8_t mpa_quad_bits[2][16] = {$/;"	v
mpa_quad_codes	mpegaudiodectab.h	/^static uint8_t mpa_quad_codes[2][16] = {$/;"	v
mpeg1_aspect	mpeg12data.h	/^static const float mpeg1_aspect[16]={$/;"	v
mpeg1_chr_dc_uni	mpeg12.c	/^static uint32_t mpeg1_chr_dc_uni[512];$/;"	v	file:
mpeg1_decode_block_inter	mpeg12.c	/^static inline int mpeg1_decode_block_inter(MpegEncContext *s, $/;"	f	file:
mpeg1_decode_block_intra	mpeg12.c	/^static inline int mpeg1_decode_block_intra(MpegEncContext *s, $/;"	f	file:
mpeg1_decode_picture	mpeg12.c	/^static int mpeg1_decode_picture(AVCodecContext *avctx, $/;"	f	file:
mpeg1_decode_sequence	mpeg12.c	/^static int mpeg1_decode_sequence(AVCodecContext *avctx, $/;"	f	file:
mpeg1_encode_block	mpeg12.c	/^static void mpeg1_encode_block(MpegEncContext *s, $/;"	f	file:
mpeg1_encode_mb	mpeg12.c	/^void mpeg1_encode_mb(MpegEncContext *s,$/;"	f
mpeg1_encode_motion	mpeg12.c	/^static void mpeg1_encode_motion(MpegEncContext *s, int val, int f_or_b_code)$/;"	f	file:
mpeg1_encode_picture_header	mpeg12.c	/^void mpeg1_encode_picture_header(MpegEncContext *s, int picture_number)$/;"	f
mpeg1_encode_sequence_header	mpeg12.c	/^static void mpeg1_encode_sequence_header(MpegEncContext *s)$/;"	f	file:
mpeg1_fast_decode_block_inter	mpeg12.c	/^static inline int mpeg1_fast_decode_block_inter(MpegEncContext *s, DCTELEM *block, int n)$/;"	f	file:
mpeg1_index_run	mpeg12.c	/^static uint8_t mpeg1_index_run[2][64];$/;"	v	file:
mpeg1_level	mpeg12data.h	/^static const int8_t mpeg1_level[111] = {$/;"	v
mpeg1_lum_dc_uni	mpeg12.c	/^static uint32_t mpeg1_lum_dc_uni[512];$/;"	v	file:
mpeg1_max_level	mpeg12.c	/^static int8_t mpeg1_max_level[2][64];$/;"	v	file:
mpeg1_run	mpeg12data.h	/^static const int8_t mpeg1_run[111] = {$/;"	v
mpeg1_vlc	mpeg12data.h	/^static const uint16_t mpeg1_vlc[113][2] = {$/;"	v
mpeg1video_decoder	mpeg12.c	/^AVCodec mpeg1video_decoder = {$/;"	v
mpeg1video_encoder	mpeg12.c	/^AVCodec mpeg1video_encoder = {$/;"	v
mpeg2_aspect	mpeg12data.h	/^static const AVRational mpeg2_aspect[16]={$/;"	v
mpeg2_dc_scale_table	mpeg12data.h	/^static uint8_t *mpeg2_dc_scale_table[4]={$/;"	v
mpeg2_dc_scale_table1	mpeg12data.h	/^static uint8_t mpeg2_dc_scale_table1[128]={$/;"	v
mpeg2_dc_scale_table2	mpeg12data.h	/^static uint8_t mpeg2_dc_scale_table2[128]={ $/;"	v
mpeg2_dc_scale_table3	mpeg12data.h	/^static uint8_t mpeg2_dc_scale_table3[128]={ $/;"	v
mpeg2_decode_block_intra	mpeg12.c	/^static inline int mpeg2_decode_block_intra(MpegEncContext *s, $/;"	f	file:
mpeg2_decode_block_non_intra	mpeg12.c	/^static inline int mpeg2_decode_block_non_intra(MpegEncContext *s, $/;"	f	file:
mpeg2_fast_decode_block_non_intra	mpeg12.c	/^static inline int mpeg2_fast_decode_block_non_intra(MpegEncContext *s, $/;"	f	file:
mpeg2_vlc	mpeg12data.h	/^static const uint16_t mpeg2_vlc[113][2] = {$/;"	v
mpeg2video_decoder	mpeg12.c	/^AVCodec mpeg2video_decoder = {$/;"	v
mpeg2video_encoder	mpeg12.c	/^AVCodec mpeg2video_encoder = {$/;"	v
mpeg4_dc_threshold	mpeg4data.h	/^static const uint8_t mpeg4_dc_threshold[8]={$/;"	v
mpeg4_decode_block	h263.c	/^static inline int mpeg4_decode_block(MpegEncContext * s, DCTELEM * block,$/;"	f	file:
mpeg4_decode_dc	h263.c	/^static inline int mpeg4_decode_dc(MpegEncContext * s, int n, int *dir_ptr)$/;"	f	file:
mpeg4_decode_gop_header	h263.c	/^static int mpeg4_decode_gop_header(MpegEncContext * s, GetBitContext *gb){$/;"	f	file:
mpeg4_decode_partition_a	h263.c	/^static int mpeg4_decode_partition_a(MpegEncContext *s){$/;"	f	file:
mpeg4_decode_partition_b	h263.c	/^static int mpeg4_decode_partition_b(MpegEncContext *s, int mb_count){$/;"	f	file:
mpeg4_decode_partitioned_mb	h263.c	/^static int mpeg4_decode_partitioned_mb(MpegEncContext *s, DCTELEM block[6][64])$/;"	f	file:
mpeg4_decode_sprite_trajectory	h263.c	/^static void mpeg4_decode_sprite_trajectory(MpegEncContext * s, GetBitContext *gb)$/;"	f	file:
mpeg4_decode_video_packet_header	h263.c	/^static int mpeg4_decode_video_packet_header(MpegEncContext *s)$/;"	f	file:
mpeg4_decoder	h263dec.c	/^AVCodec mpeg4_decoder = {$/;"	v
mpeg4_encode_block	h263.c	/^static inline void mpeg4_encode_block(MpegEncContext * s, DCTELEM * block, int n, int intra_dc, $/;"	f	file:
mpeg4_encode_blocks	h263.c	/^static inline void mpeg4_encode_blocks(MpegEncContext * s, DCTELEM block[6][64], int intra_dc[6], $/;"	f	file:
mpeg4_encode_dc	h263.c	/^static inline void mpeg4_encode_dc(PutBitContext * s, int level, int n)$/;"	f	file:
mpeg4_encode_gop_header	h263.c	/^static void mpeg4_encode_gop_header(MpegEncContext * s){$/;"	f	file:
mpeg4_encode_mb	h263.c	/^void mpeg4_encode_mb(MpegEncContext * s,$/;"	f
mpeg4_encode_picture_header	h263.c	/^void mpeg4_encode_picture_header(MpegEncContext * s, int picture_number)$/;"	f
mpeg4_encode_visual_object_header	h263.c	/^static void mpeg4_encode_visual_object_header(MpegEncContext * s){$/;"	f	file:
mpeg4_encode_vol_header	h263.c	/^static void mpeg4_encode_vol_header(MpegEncContext * s, int vo_number, int vol_number)$/;"	f	file:
mpeg4_encoder	mpegvideo.c	/^AVCodec mpeg4_encoder = {$/;"	v
mpeg4_get_block_length	h263.c	/^static int mpeg4_get_block_length(MpegEncContext * s, DCTELEM * block, int n, int intra_dc, $/;"	f	file:
mpeg4_get_dc_length	h263.c	/^static inline int mpeg4_get_dc_length(int level, int n){$/;"	f	file:
mpeg4_is_resync	h263.c	/^static inline int mpeg4_is_resync(MpegEncContext *s){$/;"	f	file:
mpeg4_pred_ac	h263.c	/^void mpeg4_pred_ac(MpegEncContext * s, DCTELEM *block, int n,$/;"	f
mpeg4video_parse	parser.c	/^static int mpeg4video_parse(AVCodecParserContext *s,$/;"	f	file:
mpeg4video_parse_init	parser.c	/^static int mpeg4video_parse_init(AVCodecParserContext *s)$/;"	f	file:
mpeg4video_parser	parser.c	/^AVCodecParser mpeg4video_parser = {$/;"	v
mpeg_decode_end	mpeg12.c	/^static int mpeg_decode_end(AVCodecContext *avctx)$/;"	f	file:
mpeg_decode_extension	mpeg12.c	/^static void mpeg_decode_extension(AVCodecContext *avctx, $/;"	f	file:
mpeg_decode_frame	mpeg12.c	/^static int mpeg_decode_frame(AVCodecContext *avctx, $/;"	f	file:
mpeg_decode_gop	mpeg12.c	/^static void mpeg_decode_gop(AVCodecContext *avctx, $/;"	f	file:
mpeg_decode_init	mpeg12.c	/^static int mpeg_decode_init(AVCodecContext *avctx)$/;"	f	file:
mpeg_decode_mb	mpeg12.c	/^static int mpeg_decode_mb(MpegEncContext *s,$/;"	f	file:
mpeg_decode_motion	mpeg12.c	/^static int mpeg_decode_motion(MpegEncContext *s, int fcode, int pred)$/;"	f	file:
mpeg_decode_picture_coding_extension	mpeg12.c	/^static void mpeg_decode_picture_coding_extension(MpegEncContext *s)$/;"	f	file:
mpeg_decode_picture_display_extension	mpeg12.c	/^static void mpeg_decode_picture_display_extension(Mpeg1Context *s1)$/;"	f	file:
mpeg_decode_postinit	mpeg12.c	/^static int mpeg_decode_postinit(AVCodecContext *avctx){$/;"	f	file:
mpeg_decode_quant_matrix_extension	mpeg12.c	/^static void mpeg_decode_quant_matrix_extension(MpegEncContext *s)$/;"	f	file:
mpeg_decode_sequence_display_extension	mpeg12.c	/^static void mpeg_decode_sequence_display_extension(Mpeg1Context *s1)$/;"	f	file:
mpeg_decode_sequence_extension	mpeg12.c	/^static void mpeg_decode_sequence_extension(Mpeg1Context *s1)$/;"	f	file:
mpeg_decode_slice	mpeg12.c	/^static int mpeg_decode_slice(Mpeg1Context *s1, int mb_y,$/;"	f	file:
mpeg_decode_user_data	mpeg12.c	/^static void mpeg_decode_user_data(AVCodecContext *avctx, $/;"	f	file:
mpeg_enc_ctx	mpeg12.c	/^    MpegEncContext mpeg_enc_ctx;$/;"	m	struct:Mpeg1Context	file:
mpeg_enc_ctx_allocated	mjpeg.c	/^    int mpeg_enc_ctx_allocated; \/* true if decoding context allocated *\/$/;"	m	struct:MJpegDecodeContext	file:
mpeg_enc_ctx_allocated	mpeg12.c	/^    int mpeg_enc_ctx_allocated; \/* true if decoding context allocated *\/$/;"	m	struct:Mpeg1Context	file:
mpeg_f_code	mpegvideo.h	/^    int mpeg_f_code[2][2];$/;"	m	struct:MpegEncContext
mpeg_field_start	mpeg12.c	/^static int mpeg_field_start(MpegEncContext *s){$/;"	f	file:
mpeg_mc_decode_init	mpeg12.c	/^static int mpeg_mc_decode_init(AVCodecContext *avctx){$/;"	f	file:
mpeg_motion	mpegvideo.c	/^static always_inline void mpeg_motion(MpegEncContext *s,$/;"	f	file:
mpeg_motion_lowres	mpegvideo.c	/^static always_inline void mpeg_motion_lowres(MpegEncContext *s,$/;"	f	file:
mpeg_quant	avcodec.h	/^    int mpeg_quant;$/;"	m	struct:AVCodecContext
mpeg_quant	mpegvideo.h	/^    int mpeg_quant;$/;"	m	struct:MpegEncContext
mpeg_xvmc_decoder	mpeg12.c	/^AVCodec mpeg_xvmc_decoder = {$/;"	v
mpegaudio_parse	parser.c	/^static int mpegaudio_parse(AVCodecParserContext *s1,$/;"	f	file:
mpegaudio_parse_init	parser.c	/^static int mpegaudio_parse_init(AVCodecParserContext *s1)$/;"	f	file:
mpegaudio_parser	parser.c	/^AVCodecParser mpegaudio_parser = {$/;"	v
mpegvideo_decoder	mpeg12.c	/^AVCodec mpegvideo_decoder = {$/;"	v
mpegvideo_extract_headers	parser.c	/^static void mpegvideo_extract_headers(AVCodecParserContext *s, $/;"	f	file:
mpegvideo_parse	parser.c	/^static int mpegvideo_parse(AVCodecParserContext *s,$/;"	f	file:
mpegvideo_parser	parser.c	/^AVCodecParser mpegvideo_parser = {$/;"	v
mps_state	cabac.h	/^    uint8_t mps_state[2*64];      \/\/\/< transIdxMPS$/;"	m	struct:CABACContext
ms_stereo	wmadec.c	/^    uint8_t ms_stereo; \/* true if mid\/side stereo mode *\/$/;"	m	struct:WMADecodeContext	file:
msmpeg4_decode_block	msmpeg4.c	/^static inline int msmpeg4_decode_block(MpegEncContext * s, DCTELEM * block,$/;"	f	file:
msmpeg4_decode_dc	msmpeg4.c	/^static int msmpeg4_decode_dc(MpegEncContext * s, int n, int *dir_ptr)$/;"	f	file:
msmpeg4_decode_ext_header	msmpeg4.c	/^int msmpeg4_decode_ext_header(MpegEncContext * s, int buf_size)$/;"	f
msmpeg4_decode_motion	msmpeg4.c	/^static int msmpeg4_decode_motion(MpegEncContext * s, $/;"	f	file:
msmpeg4_decode_picture_header	msmpeg4.c	/^int msmpeg4_decode_picture_header(MpegEncContext * s)$/;"	f
msmpeg4_encode_block	msmpeg4.c	/^static inline void msmpeg4_encode_block(MpegEncContext * s, DCTELEM * block, int n)$/;"	f	file:
msmpeg4_encode_dc	msmpeg4.c	/^static void msmpeg4_encode_dc(MpegEncContext * s, int level, int n, int *dir_ptr)$/;"	f	file:
msmpeg4_encode_ext_header	msmpeg4.c	/^void msmpeg4_encode_ext_header(MpegEncContext * s)$/;"	f
msmpeg4_encode_mb	msmpeg4.c	/^void msmpeg4_encode_mb(MpegEncContext * s, $/;"	f
msmpeg4_encode_motion	msmpeg4.c	/^static void msmpeg4_encode_motion(MpegEncContext * s, $/;"	f	file:
msmpeg4_encode_picture_header	msmpeg4.c	/^void msmpeg4_encode_picture_header(MpegEncContext * s, int picture_number)$/;"	f
msmpeg4_memsetw	msmpeg4.c	/^static inline void msmpeg4_memsetw(short *tab, int val, int n)$/;"	f	file:
msmpeg4_pred_dc	msmpeg4.c	/^static inline int msmpeg4_pred_dc(MpegEncContext * s, int n, $/;"	f	file:
msmpeg4_version	mpegvideo.h	/^    int msmpeg4_version;   \/\/\/< 0=not msmpeg4, 1=mp41, 2=mp42, 3=mp43\/divx3 4=wmv1\/7 5=wmv2\/8$/;"	m	struct:MpegEncContext
msmpeg4v12_decode_mb	msmpeg4.c	/^static int msmpeg4v12_decode_mb(MpegEncContext *s, DCTELEM block[6][64])$/;"	f	file:
msmpeg4v1_decoder	h263dec.c	/^AVCodec msmpeg4v1_decoder = {$/;"	v
msmpeg4v1_encoder	mpegvideo.c	/^AVCodec msmpeg4v1_encoder = {$/;"	v
msmpeg4v1_pred_dc	msmpeg4.c	/^static inline int msmpeg4v1_pred_dc(MpegEncContext * s, int n, $/;"	f	file:
msmpeg4v2_decode_motion	msmpeg4.c	/^static int msmpeg4v2_decode_motion(MpegEncContext * s, int pred, int f_code)$/;"	f	file:
msmpeg4v2_decoder	h263dec.c	/^AVCodec msmpeg4v2_decoder = {$/;"	v
msmpeg4v2_encode_motion	msmpeg4.c	/^static void msmpeg4v2_encode_motion(MpegEncContext * s, int val)$/;"	f	file:
msmpeg4v2_encoder	mpegvideo.c	/^AVCodec msmpeg4v2_encoder = {$/;"	v
msmpeg4v34_decode_mb	msmpeg4.c	/^static int msmpeg4v34_decode_mb(MpegEncContext *s, DCTELEM block[6][64])$/;"	f	file:
msmpeg4v3_decoder	h263dec.c	/^AVCodec msmpeg4v3_decoder = {$/;"	v
msmpeg4v3_encoder	mpegvideo.c	/^AVCodec msmpeg4v3_encoder = {$/;"	v
mspel	mpegvideo.h	/^    int mspel;$/;"	m	struct:MpegEncContext
mspel_bit	wmv2.c	/^    int mspel_bit;$/;"	m	struct:Wmv2Context	file:
msrle_decode_end	msrle.c	/^static int msrle_decode_end(AVCodecContext *avctx)$/;"	f	file:
msrle_decode_frame	msrle.c	/^static int msrle_decode_frame(AVCodecContext *avctx,$/;"	f	file:
msrle_decode_init	msrle.c	/^static int msrle_decode_init(AVCodecContext *avctx)$/;"	f	file:
msrle_decode_pal4	msrle.c	/^static void msrle_decode_pal4(MsrleContext *s)$/;"	f	file:
msrle_decode_pal8	msrle.c	/^static void msrle_decode_pal8(MsrleContext *s)$/;"	f	file:
msrle_decoder	msrle.c	/^AVCodec msrle_decoder = {$/;"	v
msvideo1_decode_16bit	msvideo1.c	/^static void msvideo1_decode_16bit(Msvideo1Context *s)$/;"	f	file:
msvideo1_decode_8bit	msvideo1.c	/^static void msvideo1_decode_8bit(Msvideo1Context *s)$/;"	f	file:
msvideo1_decode_end	msvideo1.c	/^static int msvideo1_decode_end(AVCodecContext *avctx)$/;"	f	file:
msvideo1_decode_frame	msvideo1.c	/^static int msvideo1_decode_frame(AVCodecContext *avctx,$/;"	f	file:
msvideo1_decode_init	msvideo1.c	/^static int msvideo1_decode_init(AVCodecContext *avctx)$/;"	f	file:
msvideo1_decoder	msvideo1.c	/^AVCodec msvideo1_decoder = {$/;"	v
mszh_decoder	lcl.c	/^AVCodec mszh_decoder = {$/;"	v
mszh_decomp	lcl.c	/^static unsigned int mszh_decomp(unsigned char * srcptr, int srclen, unsigned char * destptr, unsigned int destsize)$/;"	f	file:
mtype	h261.c	/^    int mtype;$/;"	m	struct:H261Context	file:
mul_poly	ac3enc.c	/^static unsigned int mul_poly(unsigned int a, unsigned int b, unsigned int poly)$/;"	f	file:
mult	g726.c	/^static inline int16_t mult(Float11* f1, Float11* f2)$/;"	f	file:
multires	vc9.c	/^    int multires;         \/\/\/< frame-level RESPIC syntax element present$/;"	m	struct:VC9Context	file:
mv	4xm.c	/^    int mv[256];$/;"	m	struct:FourXContext	file:
mv	4xm.c	/^static const int8_t mv[256][2]={$/;"	v	file:
mv	mpegvideo.h	/^    int mv[2][4][2];$/;"	m	struct:MpegEncContext
mv_bits	avcodec.h	/^    int mv_bits;$/;"	m	struct:AVCodecContext
mv_bits	mpegvideo.h	/^    int mv_bits;$/;"	m	struct:MpegEncContext
mv_bits	mpegvideo.h	/^    int mv_bits;$/;"	m	struct:RateControlEntry
mv_bits_sum	mpegvideo.h	/^    uint64_t mv_bits_sum[5];$/;"	m	struct:RateControlContext
mv_cache_clean	h264.c	/^    int mv_cache_clean[2];$/;"	m	struct:H264Context	file:
mv_dir	mpegvideo.h	/^    int mv_dir;$/;"	m	struct:MpegEncContext
mv_mode	vc9.c	/^    uint8_t mv_mode;      \/\/\/< MV coding monde$/;"	m	struct:VC9Context	file:
mv_mode2	vc9.c	/^    uint8_t mv_mode2;     \/\/\/< Secondary MV coding mode (B frames)$/;"	m	struct:VC9Context	file:
mv_penalty	h263.c	/^static uint8_t (*mv_penalty)[MAX_MV*2+1]= NULL;$/;"	v	file:
mv_penalty	mpeg12.c	/^static uint8_t (*mv_penalty)[MAX_MV*2+1]= NULL;$/;"	v	file:
mv_penalty	mpegvideo.h	/^    uint8_t (*mv_penalty)[MAX_MV*2+1];  \/\/\/< amount of bits needed to encode a MV $/;"	m	struct:MotionEstContext
mv_pmode_table	vc9.c	/^static const uint8_t mv_pmode_table[2][5] = {$/;"	v	file:
mv_scale	snow.c	/^    int mv_scale;$/;"	m	struct:SnowContext	file:
mv_table_index	mpegvideo.h	/^    int mv_table_index;$/;"	m	struct:MpegEncContext
mv_tables	msmpeg4data.h	/^static MVTable mv_tables[2] = {$/;"	v
mv_type	mpegvideo.h	/^    int mv_type;$/;"	m	struct:MpegEncContext
mv_type_mb_plane	vc9.c	/^    BitPlane mv_type_mb_plane;    \/\/\/< bitplane for mv_type == (4MV)$/;"	m	struct:VC9Context	file:
mv_vlc	h263.c	/^static VLC mv_vlc;$/;"	v	file:
mv_vlc	mpeg12.c	/^static VLC mv_vlc;$/;"	v	file:
mvd_table	h264.c	/^    int16_t     (*mvd_table[2])[2];$/;"	m	struct:H264Context	file:
mvmap	h261data.h	/^static const int mvmap[17] =$/;"	v
mvrange	vc9.c	/^    uint8_t mvrange;$/;"	m	struct:VC9Context	file:
mvtab	h263data.h	/^const uint8_t mvtab[33][2] =$/;"	v
mx	snow.c	/^    int16_t mx;$/;"	m	struct:BlockNode	file:
my	snow.c	/^    int16_t my;$/;"	m	struct:BlockNode	file:
n	dsputil.h	/^    int n;  \/* size of MDCT (i.e. number of input data * 2) *\/$/;"	m	struct:MDCTContext
n	mpegvideo.h	/^    int n;                         \/\/\/< number of entries of table_vlc minus 1 $/;"	m	struct:RLTable
n	msmpeg4data.h	/^    int n;$/;"	m	struct:MVTable
n	wmadec.c	/^    int n; \/* total number of codes *\/$/;"	m	struct:CoefVLCTable	file:
nal_length_size	h264.c	/^    int nal_length_size; \/\/\/< Number of bytes used for nal length (1, 2 or 4)$/;"	m	struct:H264Context	file:
nal_ref_idc	h264.c	/^    int nal_ref_idc;	$/;"	m	struct:H264Context	file:
nal_unit_type	h264.c	/^    int nal_unit_type;$/;"	m	struct:H264Context	file:
name	avcodec.h	/^    const char *name; \/* if name is NULL, it indicates a link to next *\/$/;"	m	struct:AVOption
name	avcodec.h	/^    const char *name;$/;"	m	struct:AVCodec
name	imgconvert.c	/^    const char *name;$/;"	m	struct:PixFmtInfo	file:
nb_all_channels	ac3enc.c	/^    int nb_all_channels;$/;"	m	struct:AC3EncodeContext	file:
nb_bits	adpcm.c	/^    int nb_bits;$/;"	m	struct:ADPCMContext	file:
nb_block_sizes	wmadec.c	/^    int nb_block_sizes;  \/* number of block sizes *\/$/;"	m	struct:WMADecodeContext	file:
nb_blocks	mjpeg.c	/^    int nb_blocks[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
nb_channels	ac3enc.c	/^    int nb_channels;$/;"	m	struct:AC3EncodeContext	file:
nb_channels	imgconvert.c	/^    uint8_t nb_channels;     \/* number of channels (including alpha) *\/$/;"	m	struct:PixFmtInfo	file:
nb_channels	mpegaudio.c	/^    int nb_channels;$/;"	m	struct:MpegAudioContext	file:
nb_channels	mpegaudiodec.c	/^    int nb_channels;$/;"	m	struct:MPADecodeContext	file:
nb_channels	wmadec.c	/^    int nb_channels;$/;"	m	struct:WMADecodeContext	file:
nb_coefs	ac3enc.c	/^    int nb_coefs[AC3_MAX_CHANNELS];$/;"	m	struct:AC3EncodeContext	file:
nb_components	mjpeg.c	/^    int nb_components;$/;"	m	struct:MJpegDecodeContext	file:
nb_samples	adpcm.c	/^    int nb_samples;$/;"	m	struct:ADPCMContext	file:
nb_samples	mpegaudio.c	/^    int64_t nb_samples; \/* total number of samples encoded *\/$/;"	m	struct:MpegAudioContext	file:
nb_scale_factors	mpegaudiotab.h	/^static const unsigned char nb_scale_factors[4] = { 3, 2, 1, 2 };$/;"	v
nbits	dsputil.h	/^    int nbits; \/* n = 2^nbits *\/$/;"	m	struct:MDCTContext
nbits	dsputil.h	/^    int nbits;$/;"	m	struct:FFTContext
ncplbnd	liba52/a52_internal.h	/^    uint8_t ncplbnd;		\/* number of coupling bands *\/$/;"	m	struct:a52_state_s
new_palette	flicvideo.c	/^    int new_palette;$/;"	m	struct:FlicDecodeContext	file:
new_pict_type	mpegvideo.h	/^    int new_pict_type;$/;"	m	struct:RateControlEntry
new_picture	mpegvideo.h	/^    Picture new_picture;$/;"	m	struct:MpegEncContext
new_pred	mpegvideo.h	/^    int new_pred;$/;"	m	struct:MpegEncContext
new_qscale	mpegvideo.h	/^    float new_qscale;$/;"	m	struct:RateControlEntry
next	avcodec.h	/^    struct AVCodec *next;$/;"	m	struct:AVCodec
next	avcodec.h	/^    struct AVCodecParser *next;$/;"	m	struct:AVCodecParser
next_block_len_bits	wmadec.c	/^    int next_block_len_bits; \/* log2 of next block length *\/$/;"	m	struct:WMADecodeContext	file:
next_codebook_buffer	vqavideo.c	/^    unsigned char *next_codebook_buffer;  \/* accumulator for next codebook *\/$/;"	m	struct:VqaContext	file:
next_codebook_buffer_index	vqavideo.c	/^    int next_codebook_buffer_index;$/;"	m	struct:VqaContext	file:
next_p_frame_damaged	mpegvideo.h	/^    int next_p_frame_damaged;        \/\/\/< set if the next p frame is damaged, to avoid showing trashed b frames $/;"	m	struct:MpegEncContext
next_picture	mpegvideo.h	/^    Picture next_picture;$/;"	m	struct:MpegEncContext
next_picture_ptr	mpegvideo.h	/^    Picture *next_picture_ptr;     \/\/\/< pointer to the next picture (for bidir pred) $/;"	m	struct:MpegEncContext
next_slice_index	h264.c	/^    int next_slice_index;$/;"	m	struct:H264Context	file:
nmean	shorten.c	/^    int nmean;$/;"	m	struct:ShortenContext	file:
no_motion_search	motion_est.c	/^static inline void no_motion_search(MpegEncContext * s,$/;"	f	file:
no_rnd_PACK	sh4/dsputil_align.c	35;"	d	file:
no_rnd_avg32	dsputil.h	/^static inline uint32_t no_rnd_avg32(uint32_t a, uint32_t b)$/;"	f
no_rounding	mpegvideo.h	/^    int no_rounding;  \/**< apply no rounding to motion compensation (MPEG4, msmpeg4, ...) $/;"	m	struct:MpegEncContext
no_sub_motion_search	motion_est_template.c	/^static int no_sub_motion_search(MpegEncContext * s,$/;"	f	file:
noise_index	wmadec.c	/^    int noise_index;$/;"	m	struct:WMADecodeContext	file:
noise_mult	wmadec.c	/^    float noise_mult; \/* XXX: suppress that and integrate it in the noise array *\/$/;"	m	struct:WMADecodeContext	file:
noise_reduction	avcodec.h	/^    int noise_reduction;$/;"	m	struct:AVCodecContext
noise_table	wmadec.c	/^    float noise_table[NOISE_TAB_SIZE];$/;"	m	struct:WMADecodeContext	file:
nonBQP	libpostproc/postprocess_internal.h	/^	int nonBQP;$/;"	m	struct:PPContext
nonBQPTable	libpostproc/postprocess_internal.h	/^	QP_STORE_T *nonBQPTable;$/;"	m	struct:PPContext
non_linear_qscale	mpeg12data.h	/^static const uint8_t non_linear_qscale[32] = {$/;"	v
non_zero_count	h264.c	/^    uint8_t (*non_zero_count)[16];$/;"	m	struct:H264Context	file:
nsse	dsputil.h	/^    me_cmp_func nsse[5];$/;"	m	struct:DSPContext
nsse16_c	dsputil.c	/^static int nsse16_c(MpegEncContext *c, uint8_t *s1, uint8_t *s2, int stride, int h){$/;"	f	file:
nsse16_mmx	i386/dsputil_mmx.c	/^static int nsse16_mmx(MpegEncContext *c, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
nsse8_c	dsputil.c	/^static int nsse8_c(MpegEncContext *c, uint8_t *s1, uint8_t *s2, int stride, int h){$/;"	f	file:
nsse8_mmx	i386/dsputil_mmx.c	/^static int nsse8_mmx(MpegEncContext *c, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
nsse_weight	avcodec.h	/^     int nsse_weight;$/;"	m	struct:AVCodecContext
num	rational.h	/^    int num; \/\/\/< numerator$/;"	m	struct:AVRational
num_entries	mpegvideo.h	/^    int num_entries;              \/\/\/< number of RateControlEntries $/;"	m	struct:RateControlContext
num_huff_nodes	idcinvideo.c	/^    int num_huff_nodes[256];$/;"	m	struct:IdcinContext	file:
num_reorder_frames	h264.c	/^    int num_reorder_frames;$/;"	m	struct:SPS	file:
num_sprite_warping_points	mpegvideo.h	/^    int num_sprite_warping_points;$/;"	m	struct:MpegEncContext
num_taps	sonic.c	/^    int num_taps, downsampling;$/;"	m	struct:SonicContext	file:
num_units_in_tick	h264.c	/^    uint32_t num_units_in_tick;$/;"	m	struct:SPS	file:
numchannels	alac.c	/^    int numchannels;$/;"	m	file:
numpanscanwin	vc9.c	/^    uint8_t numpanscanwin;$/;"	m	struct:VC9Context	file:
nwrap	shorten.c	/^    int nwrap;$/;"	m	struct:ShortenContext	file:
obmc	mpegvideo.h	/^    int obmc;                       \/\/\/< overlapped block motion compensation$/;"	m	struct:MpegEncContext
obmc16	snow.c	/^static const uint8_t obmc16[256]={$/;"	v	file:
obmc32	snow.c	/^static const uint8_t obmc32[1024]={$/;"	v	file:
obmc4	snow.c	/^static const uint8_t obmc4[16]={$/;"	v	file:
obmc8	snow.c	/^static const uint8_t obmc8[64]={$/;"	v	file:
obmc_motion	mpegvideo.c	/^static inline void obmc_motion(MpegEncContext *s,$/;"	f	file:
obmc_scratchpad	mpegvideo.h	/^    uint8_t *obmc_scratchpad;$/;"	m	struct:MpegEncContext
obmc_tab	snow.c	/^static const uint8_t *obmc_tab[4]={$/;"	v	file:
odd_table	sh4/idct_sh4.c	/^const	static float odd_table[] __attribute__ ((aligned(8))) = {$/;"	v	file:
offMASK_MSHW	armv4l/simple_idct_arm.S	/^#define offMASK_MSHW 28$/;"	d
offW1	armv4l/simple_idct_arm.S	/^#define offW1  0$/;"	d
offW2	armv4l/simple_idct_arm.S	/^#define offW2  4$/;"	d
offW3	armv4l/simple_idct_arm.S	/^#define offW3  8$/;"	d
offW4	armv4l/simple_idct_arm.S	/^#define offW4  12$/;"	d
offW5	armv4l/simple_idct_arm.S	/^#define offW5  16$/;"	d
offW6	armv4l/simple_idct_arm.S	/^#define offW6  20$/;"	d
offW7	armv4l/simple_idct_arm.S	/^#define offW7  24$/;"	d
offset	avcodec.h	/^    int offset;$/;"	m	struct:AVOption
offset	cljr.c	/^    int offset[4];$/;"	m	struct:CLJRContext	file:
offset	shorten.c	/^    int32_t *offset[MAX_CHANNELS];$/;"	m	struct:ShortenContext	file:
offset	vcr1.c	/^    int offset[4];$/;"	m	struct:VCR1Context	file:
offset_for_non_ref_pic	h264.c	/^    int offset_for_non_ref_pic;$/;"	m	struct:SPS	file:
offset_for_ref_frame	h264.c	/^    short offset_for_ref_frame[256]; \/\/FIXME dyn aloc?$/;"	m	struct:SPS	file:
offset_for_top_to_bottom_field	h264.c	/^    int offset_for_top_to_bottom_field;$/;"	m	struct:SPS	file:
offsetof	common.h	39;"	d
oggvorbis_decode_close	oggvorbis.c	/^static int oggvorbis_decode_close(AVCodecContext *avccontext) {$/;"	f	file:
oggvorbis_decode_frame	oggvorbis.c	/^static int oggvorbis_decode_frame(AVCodecContext *avccontext,$/;"	f	file:
oggvorbis_decode_init	oggvorbis.c	/^static int oggvorbis_decode_init(AVCodecContext *avccontext) {$/;"	f	file:
oggvorbis_decoder	oggvorbis.c	/^AVCodec oggvorbis_decoder = {$/;"	v
oggvorbis_encode_close	oggvorbis.c	/^static int oggvorbis_encode_close(AVCodecContext *avccontext) {$/;"	f	file:
oggvorbis_encode_frame	oggvorbis.c	/^static int oggvorbis_encode_frame(AVCodecContext *avccontext,$/;"	f	file:
oggvorbis_encode_init	oggvorbis.c	/^static int oggvorbis_encode_init(AVCodecContext *avccontext) {$/;"	f	file:
oggvorbis_encoder	oggvorbis.c	/^AVCodec oggvorbis_encoder = {$/;"	v
oggvorbis_init_encoder	oggvorbis.c	/^static int oggvorbis_init_encoder(vorbis_info *vi, AVCodecContext *avccontext) {$/;"	f	file:
oheight	imgresample.c	/^    int iwidth, iheight, owidth, oheight;$/;"	m	struct:ImgReSampleContext	file:
old_ff_c_dc_scale_table	msmpeg4data.h	/^static uint8_t old_ff_c_dc_scale_table[32]={$/;"	v
old_ff_y_dc_scale_table	msmpeg4data.h	/^static uint8_t old_ff_y_dc_scale_table[32]={$/;"	v
old_frame_size	mpegaudiodec.c	/^    int old_frame_size;$/;"	m	struct:MPADecodeContext	file:
old_twopassbuffer	xvidff.c	/^    char *old_twopassbuffer;       \/** Old character buffer (two-pass) *\/$/;"	m	struct:xvid_context	file:
oldval	ra144.c	/^	unsigned int	 resetflag, val, oldval;$/;"	m	file:
one_state	rangecoder.h	/^    uint8_t  one_state[256];$/;"	m	struct:RangeCoder
op	oggvorbis.c	/^    ogg_packet op;$/;"	m	struct:OggVorbisContext	file:
op2_avg	dsputil.c	2362;"	d	file:
op2_avg	dsputil.c	2376;"	d	file:
op2_avg	sh4/qpel.c	1525;"	d	file:
op2_avg	sh4/qpel.c	1539;"	d	file:
op2_put	dsputil.c	2363;"	d	file:
op2_put	dsputil.c	2377;"	d	file:
op2_put	sh4/qpel.c	1526;"	d	file:
op2_put	sh4/qpel.c	1540;"	d	file:
op_avg	dsputil.c	1069;"	d	file:
op_avg	dsputil.c	1075;"	d	file:
op_avg	dsputil.c	1448;"	d	file:
op_avg	dsputil.c	1453;"	d	file:
op_avg	dsputil.c	2005;"	d	file:
op_avg	dsputil.c	2014;"	d	file:
op_avg	dsputil.c	2359;"	d	file:
op_avg	dsputil.c	2374;"	d	file:
op_avg	dsputil.c	700;"	d	file:
op_avg	ppc/dsputil_altivec.c	728;"	d	file:
op_avg	sh4/qpel.c	1126;"	d	file:
op_avg	sh4/qpel.c	1135;"	d	file:
op_avg	sh4/qpel.c	1522;"	d	file:
op_avg	sh4/qpel.c	1537;"	d	file:
op_avg	sh4/qpel.c	356;"	d	file:
op_avg	sh4/qpel.c	361;"	d	file:
op_avg	sh4/qpel.c	541;"	d	file:
op_avg	sh4/qpel.c	546;"	d	file:
op_avg_no_rnd	dsputil.c	2006;"	d	file:
op_avg_no_rnd	dsputil.c	2015;"	d	file:
op_avg_no_rnd	sh4/qpel.c	1127;"	d	file:
op_avg_no_rnd	sh4/qpel.c	1136;"	d	file:
op_pixels_func	dsputil.h	/^typedef void (*op_pixels_func)(uint8_t *block\/*align width (8 or 16)*\/, const uint8_t *pixels\/*align 1*\/, int line_size, int h);$/;"	t
op_put	dsputil.c	1071;"	d	file:
op_put	dsputil.c	1076;"	d	file:
op_put	dsputil.c	1449;"	d	file:
op_put	dsputil.c	1454;"	d	file:
op_put	dsputil.c	2007;"	d	file:
op_put	dsputil.c	2016;"	d	file:
op_put	dsputil.c	2361;"	d	file:
op_put	dsputil.c	2375;"	d	file:
op_put	sh4/qpel.c	1128;"	d	file:
op_put	sh4/qpel.c	1137;"	d	file:
op_put	sh4/qpel.c	1524;"	d	file:
op_put	sh4/qpel.c	1538;"	d	file:
op_put	sh4/qpel.c	357;"	d	file:
op_put	sh4/qpel.c	362;"	d	file:
op_put	sh4/qpel.c	542;"	d	file:
op_put	sh4/qpel.c	547;"	d	file:
op_put_no_rnd	dsputil.c	2008;"	d	file:
op_put_no_rnd	dsputil.c	2017;"	d	file:
op_put_no_rnd	sh4/qpel.c	1129;"	d	file:
op_put_no_rnd	sh4/qpel.c	1138;"	d	file:
op_scale1	dsputil.c	2380;"	d	file:
op_scale1	dsputil.c	2447;"	d	file:
op_scale2	dsputil.c	2381;"	d	file:
op_scale2	dsputil.c	2448;"	d	file:
opaque	avcodec.h	/^    void *opaque;$/;"	m	struct:AVCodecContext
opaque	eval.c	/^    void *opaque;$/;"	m	struct:Parser	file:
opaque	mpegvideo.h	/^    void *opaque;              \/\/\/< private data for the user$/;"	m	struct:MpegEncContext
opcode	h264.c	/^    MMCOOpcode opcode;$/;"	m	struct:MMCO	file:
org_height	mjpeg.c	/^    int org_height;  \/* size given at codec init *\/$/;"	m	struct:MJpegDecodeContext	file:
outPtr	mace.c	/^  short *outPtr;$/;"	m	struct:MACEContext	file:
out_format	mpegvideo.h	/^    enum OutputFormat out_format; \/\/\/< output format $/;"	m	struct:MpegEncContext
out_pic	x264.c	/^    AVFrame out_pic;$/;"	m	struct:X264Context	file:
output	liba52/a52_internal.h	/^    int output;			\/* type of output *\/$/;"	m	struct:a52_state_s
output	ra288.c	/^	float	output[40];$/;"	m	file:
output_audio_block	ac3enc.c	/^static void output_audio_block(AC3EncodeContext *s,$/;"	f	file:
output_buffer	ra144.c	/^	signed   short	 output_buffer[40];$/;"	m	file:
output_channels	resample.c	/^    int input_channels, output_channels, filter_channels;$/;"	m	struct:ReSampleContext	file:
output_frame_end	ac3enc.c	/^static int output_frame_end(AC3EncodeContext *s)$/;"	f	file:
output_frame_header	ac3enc.c	/^static void output_frame_header(AC3EncodeContext *s, unsigned char *frame)$/;"	f	file:
outputsamples_buffer_a	alac.c	/^    int32_t *outputsamples_buffer_a;$/;"	m	file:
outputsamples_buffer_b	alac.c	/^    int32_t *outputsamples_buffer_b;$/;"	m	file:
outstanding_byte	rangecoder.h	/^    int outstanding_byte;$/;"	m	struct:RangeCoder
outstanding_count	cabac.h	/^    int outstanding_count;$/;"	m	struct:CABACContext
outstanding_count	rangecoder.h	/^    int outstanding_count;$/;"	m	struct:RangeCoder
over_flags_plane	vc9.c	/^    BitPlane over_flags_plane;    \/\/\/< Overflags bitplane$/;"	m	struct:VC9Context	file:
overlap	vc9.c	/^    int overlap;          \/\/\/< overlapped transforms in use$/;"	m	struct:VC9Context	file:
overread	mpegvideo.h	/^    int overread;               \/\/\/< the number of bytes which where irreversibly read from the next frame$/;"	m	struct:ParseContext
overread_index	mpegvideo.h	/^    int overread_index;         \/\/\/< the index into ParseContext.buffer of the overreaded bytes$/;"	m	struct:ParseContext
owidth	imgresample.c	/^    int iwidth, iheight, owidth, oheight;$/;"	m	struct:ImgReSampleContext	file:
p	raw.c	/^    unsigned char * p;       \/* current position in buffer *\/$/;"	m	struct:RawVideoContext	file:
p1p1m1m1	i386/fft_sse.c	/^static const float p1p1m1m1[4] __attribute__((aligned(16))) = $/;"	v	file:
p1p1m1p1	i386/fft_sse.c	/^static const float p1p1m1p1[4] __attribute__((aligned(16))) = $/;"	v	file:
p1p1p1m1	i386/fft_sse.c	/^static const float p1p1p1m1[4] __attribute__((aligned(16))) = $/;"	v	file:
pQPb	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) pQPb;$/;"	m	struct:PPContext
pQPb2	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) pQPb2;$/;"	m	struct:PPContext
p_count	avcodec.h	/^    int p_count;$/;"	m	struct:AVCodecContext
p_cplx_sum	mpegvideo.h	/^    uint64_t p_cplx_sum[5];$/;"	m	struct:RateControlContext
p_field_mv_table	mpegvideo.h	/^    int16_t (*p_field_mv_table[2][2])[2];   \/\/\/< MV table (2MV per MB) interlaced p-frame encoding$/;"	m	struct:MpegEncContext
p_field_mv_table_base	mpegvideo.h	/^    int16_t (*p_field_mv_table_base[2][2])[2];$/;"	m	struct:MpegEncContext
p_field_select_table	mpegvideo.h	/^    uint8_t (*p_field_select_table[2]);$/;"	m	struct:MpegEncContext
p_masking	avcodec.h	/^    float p_masking;$/;"	m	struct:AVCodecContext
p_mb_type_info	h264data.h	/^static const PMbInfo p_mb_type_info[5]={$/;"	v
p_mv_table	mpegvideo.h	/^    int16_t (*p_mv_table)[2];            \/\/\/< MV table (1MV per MB) p-frame encoding $/;"	m	struct:MpegEncContext
p_mv_table_base	mpegvideo.h	/^    int16_t (*p_mv_table_base)[2];$/;"	m	struct:MpegEncContext
p_sub_mb_type_info	h264data.h	/^static const PMbInfo p_sub_mb_type_info[4]={$/;"	v
p_tex_bits	avcodec.h	/^    int p_tex_bits;$/;"	m	struct:AVCodecContext
p_tex_bits	mpegvideo.h	/^    int p_tex_bits;$/;"	m	struct:MpegEncContext
p_tex_bits	mpegvideo.h	/^    int p_tex_bits;$/;"	m	struct:RateControlEntry
pack16to32	h264.c	/^static inline uint32_t pack16to32(int a, int b){$/;"	f	file:
packedYOffset	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) packedYOffset;$/;"	m	struct:PPContext
packedYScale	libpostproc/postprocess_internal.h	/^	uint64_t __attribute__((aligned(8))) packedYScale;$/;"	m	struct:PPContext
packssdw_m2r	i386/mmx.h	62;"	d
packssdw_r2r	i386/mmx.h	63;"	d
packsswb_m2r	i386/mmx.h	64;"	d
packsswb_r2r	i386/mmx.h	65;"	d
packuswb_m2r	i386/mmx.h	67;"	d
packuswb_r2r	i386/mmx.h	68;"	d
pad_oheight	imgresample.c	/^    int pad_owidth, pad_oheight;$/;"	m	struct:ImgReSampleContext	file:
pad_owidth	imgresample.c	/^    int pad_owidth, pad_oheight;$/;"	m	struct:ImgReSampleContext	file:
padbottom	imgresample.c	/^    int padtop, padbottom, padleft, padright;$/;"	m	struct:ImgReSampleContext	file:
paddb_m2r	i386/mmx.h	70;"	d
paddb_r2r	i386/mmx.h	71;"	d
paddd_m2r	i386/mmx.h	72;"	d
paddd_r2r	i386/mmx.h	73;"	d
paddh	ps2/mmi.h	136;"	d
padding_bug_score	mpegvideo.h	/^    int padding_bug_score;             \/\/\/< used to detect the VERY common padding bug in MPEG4 $/;"	m	struct:MpegEncContext
paddsb_m2r	i386/mmx.h	77;"	d
paddsb_r2r	i386/mmx.h	78;"	d
paddsw_m2r	i386/mmx.h	79;"	d
paddsw_r2r	i386/mmx.h	80;"	d
paddusb_m2r	i386/mmx.h	82;"	d
paddusb_r2r	i386/mmx.h	83;"	d
paddusw_m2r	i386/mmx.h	84;"	d
paddusw_r2r	i386/mmx.h	85;"	d
paddw	ps2/mmi.h	94;"	d
paddw_m2r	i386/mmx.h	74;"	d
paddw_r2r	i386/mmx.h	75;"	d
padleft	imgresample.c	/^    int padtop, padbottom, padleft, padright;$/;"	m	struct:ImgReSampleContext	file:
padright	imgresample.c	/^    int padtop, padbottom, padleft, padright;$/;"	m	struct:ImgReSampleContext	file:
padtop	imgresample.c	/^    int padtop, padbottom, padleft, padright;$/;"	m	struct:ImgReSampleContext	file:
palctrl	avcodec.h	/^    struct AVPaletteControl *palctrl;$/;"	m	struct:AVCodecContext
palette	avcodec.h	/^    unsigned int palette[AVPALETTE_COUNT];$/;"	m	struct:AVPaletteControl
palette	flicvideo.c	/^    unsigned int palette[256];$/;"	m	struct:FlicDecodeContext	file:
palette	png.c	/^    uint32_t palette[256];$/;"	m	struct:PNGContext	file:
palette	qdrw.c	/^    uint8_t palette[256*3];$/;"	m	struct:QdrawContext	file:
palette	vmdav.c	/^    unsigned char palette[PALETTE_COUNT * 4];$/;"	m	struct:VmdVideoContext	file:
palette	vqavideo.c	/^    unsigned int palette[PALETTE_COUNT];$/;"	m	struct:VqaContext	file:
palette	xan.c	/^    unsigned char palette[PALETTE_COUNT * 4];$/;"	m	struct:XanContext	file:
palette_changed	avcodec.h	/^    int palette_changed;$/;"	m	struct:AVPaletteControl
palette_video	cinepak.c	/^    int palette_video;$/;"	m	struct:CinepakContext	file:
pam_encode_frame	pnm.c	/^static int pam_encode_frame(AVCodecContext *avctx, unsigned char *outbuf, int buf_size, void *data){$/;"	f	file:
pam_encoder	pnm.c	/^AVCodec pam_encoder = {$/;"	v
pan_scan	mpeg12.c	/^    AVPanScan pan_scan; \/** some temporary storage for the panscan *\/$/;"	m	struct:Mpeg1Context	file:
pand_m2r	i386/mmx.h	87;"	d
pand_r2r	i386/mmx.h	88;"	d
pandn_m2r	i386/mmx.h	90;"	d
pandn_r2r	i386/mmx.h	91;"	d
panscanflag	vc9.c	/^    int panscanflag;      \/\/\/< NUMPANSCANWIN, TOPLEFT{X,Y}, BOTRIGHT{X,Y} present$/;"	m	struct:VC9Context	file:
params	x264.c	/^    x264_param_t params;$/;"	m	struct:X264Context	file:
parent	snow.c	/^    struct SubBand *parent;$/;"	m	struct:SubBand	file:
parse1_close	parser.c	/^static void parse1_close(AVCodecParserContext *s)$/;"	f	file:
parse_context	mpegvideo.h	/^    ParseContext parse_context;$/;"	m	struct:MpegEncContext
parse_deltba	liba52/parse.c	/^static int parse_deltba (a52_state_t * state, int8_t * deltba)$/;"	f	file:
parse_exponents	liba52/parse.c	/^static int parse_exponents (a52_state_t * state, int expstr, int ngrps,$/;"	f	file:
parse_mb_skip	wmv2.c	/^static void parse_mb_skip(Wmv2Context * w){$/;"	f	file:
parse_only	avcodec.h	/^    int parse_only; \/* - decoding only: if true, only parsing is done$/;"	m	struct:AVCodecContext
parser	avcodec.h	/^    struct AVCodecParser *parser;$/;"	m	struct:AVCodecParserContext
parser_close	avcodec.h	/^    void (*parser_close)(AVCodecParserContext *s);$/;"	m	struct:AVCodecParser
parser_init	avcodec.h	/^    int (*parser_init)(AVCodecParserContext *s);$/;"	m	struct:AVCodecParser
parser_parse	avcodec.h	/^    int (*parser_parse)(AVCodecParserContext *s, $/;"	m	struct:AVCodecParser
part2_3_length	mpegaudiodec.c	/^    int part2_3_length;$/;"	m	struct:GranuleDef	file:
partial_bit_buffer	dv.c	/^    uint16_t partial_bit_buffer;$/;"	m	struct:BlockInfo	file:
partial_bit_buffer	dv.c	/^    uint32_t partial_bit_buffer; \/* we can't use uint16_t here *\/$/;"	m	struct:EncBlockInfo	file:
partial_bit_count	dv.c	/^    uint8_t partial_bit_count;$/;"	m	struct:BlockInfo	file:
partial_bit_count	dv.c	/^    uint8_t partial_bit_count;$/;"	m	struct:EncBlockInfo	file:
partial_count	vqavideo.c	/^    int partial_count;$/;"	m	struct:VqaContext	file:
partial_countdown	vqavideo.c	/^    int partial_countdown;$/;"	m	struct:VqaContext	file:
partition_count	h264data.h	/^    uint8_t partition_count;$/;"	m	struct:PMbInfo
partitioned_frame	mpegvideo.h	/^    int partitioned_frame;           \/\/\/< is current frame partitioned $/;"	m	struct:MpegEncContext
pass	png.c	/^    int pass;$/;"	m	struct:PNGContext	file:
pass1_rc_eq_output_sum	mpegvideo.h	/^    double pass1_rc_eq_output_sum;\/\/\/< sum of the output of the rc equation, this is used for normalization  $/;"	m	struct:RateControlContext
pass1_wanted_bits	mpegvideo.h	/^    double pass1_wanted_bits;     \/\/\/< bits which should have been outputed by the pass1 code (including complexity init) $/;"	m	struct:RateControlContext
pass_row_size	png.c	/^    int pass_row_size; \/* decompress row size of the current pass *\/$/;"	m	struct:PNGContext	file:
pavgb_m2r	i386/mmx.h	209;"	d
pavgb_r2r	i386/mmx.h	210;"	d
pavgusb_m2r	i386/mmx.h	183;"	d
pavgusb_r2r	i386/mmx.h	184;"	d
pavgw_m2r	i386/mmx.h	211;"	d
pavgw_r2r	i386/mmx.h	212;"	d
pb	ac3enc.c	/^    PutBitContext pb;$/;"	m	struct:AC3EncodeContext	file:
pb	asv1.c	/^    PutBitContext pb;$/;"	m	struct:ASV1Context	file:
pb	cabac.h	/^    PutBitContext pb;$/;"	m	struct:CABACContext
pb	ffv1.c	/^    PutBitContext pb;$/;"	m	struct:FFV1Context	file:
pb	huffyuv.c	/^    PutBitContext pb;$/;"	m	struct:HYuvContext	file:
pb	lcl.c	/^    PutBitContext pb;$/;"	m	struct:LclContext	file:
pb	mdec.c	/^    PutBitContext pb;$/;"	m	struct:MDECContext	file:
pb	mpegaudio.c	/^    PutBitContext pb;$/;"	m	struct:MpegAudioContext	file:
pb	mpegvideo.h	/^    PutBitContext pb;$/;"	m	struct:MpegEncContext
pb	svq1.c	/^    PutBitContext pb;$/;"	m	struct:SVQ1Context	file:
pb2	mpegvideo.h	/^    PutBitContext pb2;               \/\/\/< used for data partitioned VOPs $/;"	m	struct:MpegEncContext
pbBufPtr	bitstream.h	/^static inline uint8_t* pbBufPtr(PutBitContext *s)$/;"	f
pb_field_time	mpegvideo.h	/^    uint16_t pb_field_time;         \/\/\/< like above, just for interlaced $/;"	m	struct:MpegEncContext
pb_time	mpegvideo.h	/^    uint16_t pb_time;               \/\/\/< time distance between the last b and p,s,i frame $/;"	m	struct:MpegEncContext
pblocks	mpegvideo.h	/^    short * pblocks[12];$/;"	m	struct:MpegEncContext
pbm_encoder	pnm.c	/^AVCodec pbm_encoder = {$/;"	v
pc	parser.c	/^    ParseContext pc;$/;"	m	struct:ParseContext1	file:
pc_tbl2	truemotion1data.h	/^static uint8_t pc_tbl2[] = {$/;"	v
pc_tbl3	truemotion1data.h	/^static uint8_t pc_tbl3[] = {$/;"	v
pc_tbl4	truemotion1data.h	/^static uint8_t pc_tbl4[] = {$/;"	v
pcm_decode_frame	pcm.c	/^static int pcm_decode_frame(AVCodecContext *avctx,$/;"	f	file:
pcm_decode_init	pcm.c	/^static int pcm_decode_init(AVCodecContext * avctx)$/;"	f	file:
pcm_encode_close	pcm.c	/^static int pcm_encode_close(AVCodecContext *avctx)$/;"	f	file:
pcm_encode_frame	pcm.c	/^static int pcm_encode_frame(AVCodecContext *avctx,$/;"	f	file:
pcm_encode_init	pcm.c	/^static int pcm_encode_init(AVCodecContext *avctx)$/;"	f	file:
pcmpeqb_m2r	i386/mmx.h	93;"	d
pcmpeqb_r2r	i386/mmx.h	94;"	d
pcmpeqd_m2r	i386/mmx.h	95;"	d
pcmpeqd_r2r	i386/mmx.h	96;"	d
pcmpeqw_m2r	i386/mmx.h	97;"	d
pcmpeqw_r2r	i386/mmx.h	98;"	d
pcmpgtb_m2r	i386/mmx.h	100;"	d
pcmpgtb_r2r	i386/mmx.h	101;"	d
pcmpgtd_m2r	i386/mmx.h	102;"	d
pcmpgtd_r2r	i386/mmx.h	103;"	d
pcmpgtw_m2r	i386/mmx.h	104;"	d
pcmpgtw_r2r	i386/mmx.h	105;"	d
pcpyh	ps2/mmi.h	91;"	d
pcpyld	ps2/mmi.h	88;"	d
pcpyud	ps2/mmi.h	85;"	d
pegasus_rct	mjpeg.c	/^    int pegasus_rct;    \/* pegasus reversible colorspace transform *\/  $/;"	m	struct:MJpegDecodeContext	file:
penalty_factor	mpegvideo.h	/^    int penalty_factor;$/;"	m	struct:MotionEstContext
per_block_abt	wmv2.c	/^    int per_block_abt;$/;"	m	struct:Wmv2Context	file:
per_mb_abt	wmv2.c	/^    int per_mb_abt;$/;"	m	struct:Wmv2Context	file:
per_mb_rl_bit	wmv2.c	/^    int per_mb_rl_bit;$/;"	m	struct:Wmv2Context	file:
per_mb_rl_table	mpegvideo.h	/^    int per_mb_rl_table;$/;"	m	struct:MpegEncContext
perfdata	ppc/dsputil_ppc.c	/^unsigned long long perfdata[POWERPC_NUM_PMC_ENABLED][powerpc_perf_total][powerpc_data_total];$/;"	v
perfname	ppc/dsputil_ppc.c	/^static unsigned char* perfname[] = {$/;"	v	file:
permutated	mpegvideo.h	/^    uint8_t permutated[64];$/;"	m	struct:ScanTable
perr	alpha/asm.h	111;"	d
perr	alpha/asm.h	125;"	d
perr	alpha/asm.h	154;"	d
pextlb	ps2/mmi.h	148;"	d
pextlh	ps2/mmi.h	103;"	d
pextlw	ps2/mmi.h	97;"	d
pextrw_r2r	i386/mmx.h	214;"	d
pextuh	ps2/mmi.h	106;"	d
pextuw	ps2/mmi.h	100;"	d
pgm_encoder	pnm.c	/^AVCodec pgm_encoder = {$/;"	v
pgm_save	apiexample.c	/^void pgm_save(unsigned char *buf,int wrap, int xsize,int ysize,char *filename) $/;"	f
pgmyuv_encoder	pnm.c	/^AVCodec pgmyuv_encoder = {$/;"	v
phase	ra288.c	/^	int	phase, phasep;$/;"	m	file:
phase_mask	resample2.c	/^    int phase_mask;$/;"	m	struct:AVResampleContext	file:
phase_shift	resample2.c	/^    int phase_shift;$/;"	m	struct:AVResampleContext	file:
phasep	ra288.c	/^	int	phase, phasep;$/;"	m	file:
phmadh	ps2/mmi.h	82;"	d
phsflginu	liba52/a52_internal.h	/^    uint8_t phsflginu;		\/* phase flags in use (stereo only) *\/$/;"	m	struct:a52_state_s
pic	8bps.c	/^	AVFrame pic;$/;"	m	struct:EightBpsContext	file:
pic	lcl.c	/^	AVFrame pic;$/;"	m	struct:LclContext	file:
pic	loco.c	/^    AVFrame pic;$/;"	m	struct:LOCOContext	file:
pic	qdrw.c	/^    AVFrame pic;$/;"	m	struct:QdrawContext	file:
pic	qpeg.c	/^    AVFrame pic;$/;"	m	struct:QpegContext	file:
pic	raw.c	/^    AVFrame pic;             \/\/\/< AVCodecContext.coded_frame$/;"	m	struct:RawVideoContext	file:
pic	tscc.c	/^    AVFrame pic;$/;"	m	struct:TsccContext	file:
pic	x264.c	/^    x264_picture_t pic;$/;"	m	struct:X264Context	file:
pic	xl.c	/^    AVFrame pic;$/;"	m	struct:VideoXLContext	file:
pic_id	mpegvideo.h	/^    int pic_id;                 \/\/\/< h264 pic_num or long_term_pic_idx$/;"	m	struct:Picture
pic_order_present	h264.c	/^    int pic_order_present;      \/\/\/< pic_order_present_flag$/;"	m	struct:PPS	file:
pict_type	avcodec.h	/^    int pict_type; \/* XXX: put it back in AVCodecContext *\/$/;"	m	struct:AVCodecParserContext
pict_type	mpegvideo.h	/^    int pict_type;              \/\/\/< I_TYPE, P_TYPE, B_TYPE, ... $/;"	m	struct:MpegEncContext
pict_type	mpegvideo.h	/^    int pict_type;$/;"	m	struct:RateControlEntry
pict_type_to_golomb	h264data.h	/^static const uint8_t pict_type_to_golomb[7]=$/;"	v
picture	asv1.c	/^    AVFrame picture;$/;"	m	struct:ASV1Context	file:
picture	cljr.c	/^    AVFrame picture;$/;"	m	struct:CLJRContext	file:
picture	dv.c	/^    AVFrame picture;$/;"	m	struct:DVVideoContext	file:
picture	ffv1.c	/^    AVFrame picture;$/;"	m	struct:FFV1Context	file:
picture	huffyuv.c	/^    AVFrame picture;$/;"	m	struct:HYuvContext	file:
picture	mdec.c	/^    AVFrame picture;$/;"	m	struct:MDECContext	file:
picture	mjpeg.c	/^    AVFrame picture; \/* picture structure *\/$/;"	m	struct:MJpegDecodeContext	file:
picture	mpegvideo.h	/^    Picture *picture;          \/\/\/< main picture buffer $/;"	m	struct:MpegEncContext
picture	png.c	/^    AVFrame picture;$/;"	m	struct:PNGContext	file:
picture	pnm.c	/^    AVFrame picture;$/;"	m	struct:PNMContext	file:
picture	svq1.c	/^    AVFrame picture;$/;"	m	struct:SVQ1Context	file:
picture	vcr1.c	/^    AVFrame picture;$/;"	m	struct:VCR1Context	file:
picture_in_gop_number	mpegvideo.h	/^    int picture_in_gop_number; \/\/\/< 0-> first pic in gop, ... $/;"	m	struct:MpegEncContext
picture_number	ffv1.c	/^    int picture_number;$/;"	m	struct:FFV1Context	file:
picture_number	huffyuv.c	/^    int picture_number;$/;"	m	struct:HYuvContext	file:
picture_number	mpegvideo.h	/^    int picture_number;       \/\/FIXME remove, unclear definition$/;"	m	struct:MpegEncContext
picture_structure	mpegvideo.h	/^    int picture_structure;$/;"	m	struct:MpegEncContext
pinsrw_r2r	i386/mmx.h	216;"	d
pinteh	ps2/mmi.h	133;"	d
pinth	ps2/mmi.h	79;"	d
pix_abs	dsputil.h	/^    me_cmp_func pix_abs[2][4];$/;"	m	struct:DSPContext
pix_abs16_c	dsputil.c	/^static inline int pix_abs16_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs16_x2_c	dsputil.c	/^static int pix_abs16_x2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs16_xy2_c	dsputil.c	/^static int pix_abs16_xy2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs16_y2_c	dsputil.c	/^static int pix_abs16_y2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs16x16_mvi_asm	alpha/motion_est_mvi_asm.S	/^pix_abs16x16_mvi_asm:$/;"	l
pix_abs16x16_x2_mvi	alpha/motion_est_alpha.c	/^int pix_abs16x16_x2_mvi(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
pix_abs16x16_xy2_mvi	alpha/motion_est_alpha.c	/^int pix_abs16x16_xy2_mvi(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
pix_abs16x16_y2_mvi	alpha/motion_est_alpha.c	/^int pix_abs16x16_y2_mvi(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
pix_abs8_c	dsputil.c	/^static inline int pix_abs8_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs8_x2_c	dsputil.c	/^static int pix_abs8_x2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs8_xy2_c	dsputil.c	/^static int pix_abs8_xy2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs8_y2_c	dsputil.c	/^static int pix_abs8_y2_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
pix_abs8x8_mvi	alpha/motion_est_alpha.c	/^int pix_abs8x8_mvi(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
pix_fmt	avcodec.h	/^    enum PixelFormat pix_fmt;$/;"	m	struct:AVCodecContext
pix_fmt	dvdata.h	/^    enum PixelFormat pix_fmt;             \/* picture pixel format *\/$/;"	m	struct:DVprofile
pix_fmt	raw.c	/^    int pix_fmt;$/;"	m	struct:PixleFormatTag	file:
pix_fmt_info	imgconvert.c	/^static PixFmtInfo pix_fmt_info[PIX_FMT_NB] = {$/;"	v	file:
pix_fmts	avcodec.h	/^    const enum PixelFormat *pix_fmts;       \/\/\/array of supported pixel formats, or NULL if unknown, array is terminanted by -1$/;"	m	struct:AVCodec
pix_norm1	dsputil.h	/^    int (*pix_norm1)(uint8_t * pix, int line_size);$/;"	m	struct:DSPContext
pix_norm1	snow.c	/^static int pix_norm1(uint8_t * pix, int line_size, int w)$/;"	f	file:
pix_norm1_altivec	ppc/dsputil_altivec.c	/^int pix_norm1_altivec(uint8_t *pix, int line_size)$/;"	f
pix_norm1_c	dsputil.c	/^static int pix_norm1_c(uint8_t * pix, int line_size)$/;"	f	file:
pix_norm1_mmx	i386/dsputil_mmx.c	/^static int pix_norm1_mmx(uint8_t *pix, int line_size) {$/;"	f	file:
pix_sum	dsputil.h	/^    int (*pix_sum)(uint8_t * pix, int line_size);$/;"	m	struct:DSPContext
pix_sum	snow.c	/^static int pix_sum(uint8_t * pix, int line_size, int w)$/;"	f	file:
pix_sum16_mmx	i386/dsputil_mmx.c	/^static int pix_sum16_mmx(uint8_t * pix, int line_size){$/;"	f	file:
pix_sum_altivec	ppc/dsputil_altivec.c	/^int pix_sum_altivec(uint8_t * pix, int line_size)$/;"	f
pix_sum_c	dsputil.c	/^static int pix_sum_c(uint8_t * pix, int line_size)$/;"	f	file:
pixel	dsputil.h	480;"	d
pixel	dsputil.h	482;"	d
pixelFormatTags	raw.c	/^const PixelFormatTag pixelFormatTags[] = {$/;"	v
pixel_addresses_inited	vp3.c	/^    int pixel_addresses_inited;$/;"	m	struct:Vp3DecodeContext	file:
pixel_aspect	h264data.h	/^static const AVRational pixel_aspect[14]={$/;"	v
pixel_aspect	mpeg4data.h	/^static const AVRational pixel_aspect[16]={$/;"	v
pixel_ptr	interplayvideo.c	/^    unsigned char *pixel_ptr;$/;"	m	struct:IpvideoContext	file:
pixel_type	imgconvert.c	/^    uint8_t pixel_type;      \/* pixel storage type (see FF_PIXEL_xxx constants) *\/$/;"	m	struct:PixFmtInfo	file:
pixfmt_rgb24	8bps.c	/^const enum PixelFormat pixfmt_rgb24[] = {PIX_FMT_BGR24, PIX_FMT_RGBA32, -1};$/;"	v
pixfmt_xvmc_mpg2_420	mpeg12.c	/^const enum PixelFormat pixfmt_xvmc_mpg2_420[] = {$/;"	v
pixfmt_yuv_420	mpeg12.c	/^const enum PixelFormat pixfmt_yuv_420[]= {PIX_FMT_YUV420P,-1};$/;"	v
pixfmt_yuv_422	mpeg12.c	/^const enum PixelFormat pixfmt_yuv_422[]= {PIX_FMT_YUV422P,-1};$/;"	v
pixfmt_yuv_444	mpeg12.c	/^const enum PixelFormat pixfmt_yuv_444[]= {PIX_FMT_YUV444P,-1};$/;"	v
pk	g726.c	/^	 int pk[2];           \/**< signs of prev. 2 sez + dq *\/$/;"	m	struct:G726Context	file:
pklb	alpha/asm.h	112;"	d
pklb	alpha/asm.h	126;"	d
pklb	alpha/asm.h	155;"	d
pkwb	alpha/asm.h	113;"	d
pkwb	alpha/asm.h	127;"	d
pkwb	alpha/asm.h	156;"	d
plane	ffv1.c	/^    PlaneContext plane[MAX_PLANES];$/;"	m	struct:FFV1Context	file:
plane	snow.c	/^    Plane plane[MAX_PLANES];$/;"	m	struct:SnowContext	file:
plane_count	ffv1.c	/^    int plane_count;$/;"	m	struct:FFV1Context	file:
planemap	8bps.c	/^	unsigned char planemap[4];$/;"	m	struct:EightBpsContext	file:
planes	8bps.c	/^	unsigned char planes;$/;"	m	struct:EightBpsContext	file:
pmaddwd_m2r	i386/mmx.h	107;"	d
pmaddwd_r2r	i386/mmx.h	108;"	d
pmaxh	ps2/mmi.h	127;"	d
pmaxsw_m2r	i386/mmx.h	218;"	d
pmaxsw_r2r	i386/mmx.h	219;"	d
pmaxub_m2r	i386/mmx.h	221;"	d
pmaxub_r2r	i386/mmx.h	222;"	d
pmfhl_uw	ps2/mmi.h	145;"	d
pminh	ps2/mmi.h	130;"	d
pminsw_m2r	i386/mmx.h	224;"	d
pminsw_r2r	i386/mmx.h	225;"	d
pminub_m2r	i386/mmx.h	227;"	d
pminub_r2r	i386/mmx.h	228;"	d
pmovmskb	i386/mmx.h	230;"	d
pmulhuw_m2r	i386/mmx.h	233;"	d
pmulhuw_r2r	i386/mmx.h	234;"	d
pmulhw_m2r	i386/mmx.h	110;"	d
pmulhw_r2r	i386/mmx.h	111;"	d
pmullw_m2r	i386/mmx.h	113;"	d
pmullw_r2m	i386/mmx.h	264;"	d
pmullw_r2r	i386/mmx.h	114;"	d
pmulth	ps2/mmi.h	124;"	d
png_decode_idat	png.c	/^static int png_decode_idat(PNGContext *s, int length)$/;"	f	file:
png_decoder	png.c	/^AVCodec png_decoder = {$/;"	v
png_encoder	png.c	/^AVCodec png_encoder = {$/;"	v
png_filter_row	png.c	/^static void png_filter_row(uint8_t *dst, int filter_type, $/;"	f	file:
png_get_interlaced_row	png.c	/^static void png_get_interlaced_row(uint8_t *dst, int row_size, $/;"	f	file:
png_get_nb_channels	png.c	/^static int png_get_nb_channels(int color_type)$/;"	f	file:
png_handle_row	png.c	/^static void png_handle_row(PNGContext *s)$/;"	f	file:
png_pass_dsp_mask	png.c	/^static const uint8_t png_pass_dsp_mask[NB_PASSES] = { $/;"	v	file:
png_pass_dsp_ymask	png.c	/^static const uint8_t png_pass_dsp_ymask[NB_PASSES] = {$/;"	v	file:
png_pass_mask	png.c	/^static const uint8_t png_pass_mask[NB_PASSES] = {$/;"	v	file:
png_pass_row_size	png.c	/^static int png_pass_row_size(int pass, int bits_per_pixel, int width)$/;"	f	file:
png_pass_xmin	png.c	/^static const uint8_t png_pass_xmin[NB_PASSES] = {$/;"	v	file:
png_pass_xshift	png.c	/^static const uint8_t png_pass_xshift[NB_PASSES] = {$/;"	v	file:
png_pass_ymask	png.c	/^static const uint8_t png_pass_ymask[NB_PASSES] = {$/;"	v	file:
png_put_interlaced_row	png.c	/^static void png_put_interlaced_row(uint8_t *dst, int width, $/;"	f	file:
png_write_chunk	png.c	/^static void png_write_chunk(uint8_t **f, uint32_t tag,$/;"	f	file:
png_write_row	png.c	/^static int png_write_row(PNGContext *s, const uint8_t *data, int size)$/;"	f	file:
png_zalloc	png.c	/^static void *png_zalloc(void *opaque, unsigned int items, unsigned int size)$/;"	f	file:
png_zfree	png.c	/^static void png_zfree(void *opaque, void *ptr)$/;"	f	file:
pngsig	png.c	/^static const uint8_t pngsig[8] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v	file:
pnm_decode_frame	pnm.c	/^static int pnm_decode_frame(AVCodecContext *avctx, $/;"	f	file:
pnm_decode_header	pnm.c	/^static int pnm_decode_header(AVCodecContext *avctx, PNMContext * const s){$/;"	f	file:
pnm_encode_frame	pnm.c	/^static int pnm_encode_frame(AVCodecContext *avctx, unsigned char *outbuf, int buf_size, void *data){$/;"	f	file:
pnm_get	pnm.c	/^static void pnm_get(PNMContext *sc, char *str, int buf_size) $/;"	f	file:
pnm_parse	pnm.c	/^static int pnm_parse(AVCodecParserContext *s,$/;"	f	file:
pnm_parser	pnm.c	/^AVCodecParser pnm_parser = {$/;"	v
pnm_space	pnm.c	/^static inline int pnm_space(int c)  $/;"	f	file:
poc	mpegvideo.h	/^    int poc;                    \/\/\/< h264 frame POC$/;"	m	struct:Picture
poc_cycle_length	h264.c	/^    int poc_cycle_length;              \/\/\/< num_ref_frames_in_pic_order_cnt_cycle$/;"	m	struct:SPS	file:
poc_lsb	h264.c	/^    int poc_lsb;$/;"	m	struct:H264Context	file:
poc_msb	h264.c	/^    int poc_msb;$/;"	m	struct:H264Context	file:
poc_type	h264.c	/^    int poc_type;                      \/\/\/< pic_order_cnt_type$/;"	m	struct:SPS	file:
por_m2r	i386/mmx.h	116;"	d
por_r2r	i386/mmx.h	117;"	d
pos	dv.c	/^    uint8_t pos; \/* position in block *\/$/;"	m	struct:BlockInfo	file:
position	avcodec.h	/^    int16_t position[3][2];$/;"	m	struct:AVPanScan
post1	liba52/imdct.c	/^static complex_t post1[64];$/;"	v	file:
post2	liba52/imdct.c	/^static complex_t post2[32];$/;"	v	file:
postProcess	libpostproc/postprocess.c	/^static inline void postProcess(uint8_t src[], int srcStride, uint8_t dst[], int dstStride, int width, int height,$/;"	f	file:
postProcess	libpostproc/postprocess_template.c	/^static void RENAME(postProcess)(uint8_t src[], int srcStride, uint8_t dst[], int dstStride, int width, int height,$/;"	f	file:
postproc	vc9.c	/^    uint8_t postproc;$/;"	m	struct:VC9Context	file:
postprocflag	vc9.c	/^    int postprocflag;     \/\/\/< Per-frame processing suggestion flag present$/;"	m	struct:VC9Context	file:
postscale	faandct.c	/^static FLOAT postscale[64]={$/;"	v	file:
pow_m1_4	wmadec.c	/^static inline float pow_m1_4(WMADecodeContext *s, float x)$/;"	f	file:
pow_poly	ac3enc.c	/^static unsigned int pow_poly(unsigned int a, unsigned int n, unsigned int poly)$/;"	f	file:
powerpc_clear_blocks_dcbz128	ppc/dsputil_ppc.h	/^  powerpc_clear_blocks_dcbz128,$/;"	e	enum:powerpc_perf_index
powerpc_clear_blocks_dcbz32	ppc/dsputil_ppc.h	/^  powerpc_clear_blocks_dcbz32,$/;"	e	enum:powerpc_perf_index
powerpc_data_index	ppc/dsputil_ppc.h	/^enum powerpc_data_index {$/;"	g
powerpc_data_max	ppc/dsputil_ppc.h	/^  powerpc_data_max,$/;"	e	enum:powerpc_data_index
powerpc_data_min	ppc/dsputil_ppc.h	/^  powerpc_data_min = 0,$/;"	e	enum:powerpc_data_index
powerpc_data_num	ppc/dsputil_ppc.h	/^  powerpc_data_num,$/;"	e	enum:powerpc_data_index
powerpc_data_sum	ppc/dsputil_ppc.h	/^  powerpc_data_sum,$/;"	e	enum:powerpc_data_index
powerpc_data_total	ppc/dsputil_ppc.h	/^  powerpc_data_total$/;"	e	enum:powerpc_data_index
powerpc_display_perf_report	ppc/dsputil_ppc.c	/^void powerpc_display_perf_report(void)$/;"	f
powerpc_perf_index	ppc/dsputil_ppc.h	/^enum powerpc_perf_index {$/;"	g
powerpc_perf_total	ppc/dsputil_ppc.h	/^  powerpc_perf_total$/;"	e	enum:powerpc_perf_index
ppMode	libpostproc/postprocess_internal.h	/^	PPMode ppMode;$/;"	m	struct:PPContext
pp_context_t	libpostproc/postprocess.h	/^typedef void pp_context_t;$/;"	t
pp_field_time	mpegvideo.h	/^    uint16_t pp_field_time;$/;"	m	struct:MpegEncContext
pp_free_context	libpostproc/postprocess.c	/^void pp_free_context(void *vc){$/;"	f
pp_free_mode	libpostproc/postprocess.c	/^void pp_free_mode(pp_mode_t *mode){$/;"	f
pp_get_context	libpostproc/postprocess.c	/^pp_context_t *pp_get_context(int width, int height, int cpuCaps){$/;"	f
pp_get_mode_by_name_and_quality	libpostproc/postprocess.c	/^pp_mode_t *pp_get_mode_by_name_and_quality(char *name, int quality)$/;"	f
pp_help	libpostproc/postprocess.c	/^char *pp_help=$/;"	v
pp_mode_t	libpostproc/postprocess.h	/^typedef void pp_mode_t;$/;"	t
pp_postprocess	libpostproc/postprocess.c	/^void  pp_postprocess(uint8_t * src[3], int srcStride[3],$/;"	f
pp_time	mpegvideo.h	/^    uint16_t pp_time;               \/\/\/< time distance between the last 2 p,s,i frames $/;"	m	struct:MpegEncContext
ppacb	ps2/mmi.h	118;"	d
ppach	ps2/mmi.h	115;"	d
ppm_encoder	pnm.c	/^AVCodec ppm_encoder = {$/;"	v
pps	h264.c	/^    PPS pps; \/\/FIXME move tp Picture perhaps? (->no) do we need that?$/;"	m	struct:H264Context	file:
pps_buffer	h264.c	/^    PPS pps_buffer[MAX_PPS_COUNT];$/;"	m	struct:H264Context	file:
pq	vc9.c	/^    uint8_t pq, altpq;    \/\/\/< Current\/alternate frame quantizer scale$/;"	m	struct:VC9Context	file:
pquant_table	vc9.c	/^static const uint8_t pquant_table[3][32] = {$/;"	v	file:
pquantizer	vc9.c	/^    uint8_t pquantizer;           \/\/\/< Uniform (over sequence) quantizer in use$/;"	m	struct:VC9Context	file:
pr1	ra288.c	/^	float	pr1[36];$/;"	m	file:
pr2	ra288.c	/^	float	pr2[10];$/;"	m	file:
pre1	liba52/imdct.c	/^static complex_t pre1[128];$/;"	v	file:
pre2	liba52/imdct.c	/^static complex_t pre2[64];$/;"	v	file:
pre_dia_size	avcodec.h	/^    int pre_dia_size;$/;"	m	struct:AVCodecContext
pre_estimate_motion_thread	mpegvideo.c	/^static int pre_estimate_motion_thread(AVCodecContext *c, void *arg){$/;"	f	file:
pre_gb	4xm.c	/^    GetBitContext pre_gb;          \/\/\/< ac\/dc prefix$/;"	m	struct:FourXContext	file:
pre_me	avcodec.h	/^    int pre_me;$/;"	m	struct:AVCodecContext
pre_pass	mpegvideo.h	/^    int pre_pass;                      \/\/\/< = 1 for the pre pass $/;"	m	struct:MotionEstContext
pre_penalty_factor	mpegvideo.h	/^    int pre_penalty_factor;$/;"	m	struct:MotionEstContext
pre_vlc	4xm.c	/^    VLC pre_vlc;$/;"	m	struct:FourXContext	file:
pred	mpegvideo.h	/^    Predictor pred[5];$/;"	m	struct:RateControlContext
pred	ra288.c	/^static int pred(float *in, float *tgt, int n)$/;"	f	file:
pred16x16	h264.c	/^    void (*pred16x16[4+3])(uint8_t *src, int stride);$/;"	m	struct:H264Context	file:
pred16x16_128_dc_c	h264.c	/^static void pred16x16_128_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_dc_c	h264.c	/^static void pred16x16_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_horizontal_c	h264.c	/^static void pred16x16_horizontal_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_left_dc_c	h264.c	/^static void pred16x16_left_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_plane_c	h264.c	/^static void pred16x16_plane_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_plane_compat_c	h264.c	/^static inline void pred16x16_plane_compat_c(uint8_t *src, int stride, const int svq3){$/;"	f	file:
pred16x16_plane_svq3_c	svq3.c	/^static void pred16x16_plane_svq3_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_top_dc_c	h264.c	/^static void pred16x16_top_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred16x16_vertical_c	h264.c	/^static void pred16x16_vertical_c(uint8_t *src, int stride){$/;"	f	file:
pred4x4	h264.c	/^    void (*pred4x4  [9+3])(uint8_t *src, uint8_t *topright, int stride);\/\/FIXME move to dsp?$/;"	m	struct:H264Context	file:
pred4x4_128_dc_c	h264.c	/^static void pred4x4_128_dc_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_dc_c	h264.c	/^static void pred4x4_dc_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_down_left_c	h264.c	/^static void pred4x4_down_left_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_down_left_svq3_c	svq3.c	/^static void pred4x4_down_left_svq3_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_down_right_c	h264.c	/^static void pred4x4_down_right_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_horizontal_c	h264.c	/^static void pred4x4_horizontal_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_horizontal_down_c	h264.c	/^static void pred4x4_horizontal_down_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_horizontal_up_c	h264.c	/^static void pred4x4_horizontal_up_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_left_dc_c	h264.c	/^static void pred4x4_left_dc_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_top_dc_c	h264.c	/^static void pred4x4_top_dc_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_vertical_c	h264.c	/^static void pred4x4_vertical_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_vertical_left_c	h264.c	/^static void pred4x4_vertical_left_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred4x4_vertical_right_c	h264.c	/^static void pred4x4_vertical_right_c(uint8_t *src, uint8_t *topright, int stride){$/;"	f	file:
pred8x8	h264.c	/^    void (*pred8x8  [4+3])(uint8_t *src, int stride);$/;"	m	struct:H264Context	file:
pred8x8_128_dc_c	h264.c	/^static void pred8x8_128_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_dc_c	h264.c	/^static void pred8x8_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_horizontal_c	h264.c	/^static void pred8x8_horizontal_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_left_dc_c	h264.c	/^static void pred8x8_left_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_plane_c	h264.c	/^static void pred8x8_plane_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_top_dc_c	h264.c	/^static void pred8x8_top_dc_c(uint8_t *src, int stride){$/;"	f	file:
pred8x8_vertical_c	h264.c	/^static void pred8x8_vertical_c(uint8_t *src, int stride){$/;"	f	file:
pred_16x8_motion	h264.c	/^static inline void pred_16x8_motion(H264Context * const h, int n, int list, int ref, int * const mx, int * const my){$/;"	f	file:
pred_8x16_motion	h264.c	/^static inline void pred_8x16_motion(H264Context * const h, int n, int list, int ref, int * const mx, int * const my){$/;"	f	file:
pred_block	snow.c	/^static void pred_block(SnowContext *s, uint8_t *dst, uint8_t *src, uint8_t *tmp, int stride, int sx, int sy, int b_w, int b_h, BlockNode *block, int plane_index, int w, int h){$/;"	f	file:
pred_dir_table	mpegvideo.h	/^    uint8_t *pred_dir_table;      \/\/\/< used to store pred_dir for partitioned decoding $/;"	m	struct:MpegEncContext
pred_direct_motion	h264.c	/^static inline void pred_direct_motion(H264Context * const h, int *mb_type){$/;"	f	file:
pred_intra_mode	h264.c	/^static inline int pred_intra_mode(H264Context *h, int n){$/;"	f	file:
pred_mode	h264data.h	/^    uint8_t pred_mode;$/;"	m	struct:IMbInfo
pred_motion	h264.c	/^static inline void pred_motion(H264Context * const h, int n, int part_width, int list, int ref, int * const mx, int * const my){$/;"	f	file:
pred_non_zero_count	h264.c	/^static inline int pred_non_zero_count(H264Context *h, int n){$/;"	f	file:
pred_pskip_motion	h264.c	/^static inline void pred_pskip_motion(H264Context * const h, int * const mx, int * const my){$/;"	f	file:
pred_weight_table	h264.c	/^static int pred_weight_table(H264Context *h){$/;"	f	file:
pred_x	mpegvideo.h	/^    int pred_x;$/;"	m	struct:MotionEstContext
pred_y	mpegvideo.h	/^    int pred_y;$/;"	m	struct:MotionEstContext
predict	ffv1.c	/^static inline int predict(int_fast16_t *src, int_fast16_t *last){$/;"	f	file:
predict_plane	snow.c	/^static always_inline void predict_plane(SnowContext *s, DWTELEM *buf, int plane_index, int add){$/;"	f	file:
predict_size	ratecontrol.c	/^static double predict_size(Predictor *p, double q, double var)$/;"	f	file:
predict_slice	snow.c	/^static always_inline void predict_slice(SnowContext *s, DWTELEM *buf, int plane_index, int add, int mb_y){$/;"	f	file:
predicterror_buffer_a	alac.c	/^    int32_t *predicterror_buffer_a;$/;"	m	file:
predicterror_buffer_b	alac.c	/^    int32_t *predicterror_buffer_b;$/;"	m	file:
prediction_method	avcodec.h	/^     int prediction_method;$/;"	m	struct:AVCodecContext
predictor	adpcm.c	/^    int predictor;$/;"	m	struct:ADPCMChannelStatus	file:
predictor	huffyuv.c	/^    Predictor predictor;$/;"	m	struct:HYuvContext	file:
predictor_calc_error	sonic.c	/^static int predictor_calc_error(int *k, int *state, int order, int error)$/;"	f	file:
predictor_decompress_fir_adapt	alac.c	/^static void predictor_decompress_fir_adapt(int32_t *error_buffer,$/;"	f	file:
predictor_init_state	sonic.c	/^static void predictor_init_state(int *k, int *state, int order)$/;"	f	file:
predictor_k	sonic.c	/^    int *predictor_k;$/;"	m	struct:SonicContext	file:
predictor_state	sonic.c	/^    int *predictor_state[MAX_CHANNELS];$/;"	m	struct:SonicContext	file:
predictors	vmdav.c	/^    short predictors[2];$/;"	m	struct:VmdAudioContext	file:
prefetch	alpha/asm.h	71;"	d
prefetch	alpha/asm.h	86;"	d
prefetch_en	alpha/asm.h	72;"	d
prefetch_en	alpha/asm.h	87;"	d
prefetch_m	alpha/asm.h	73;"	d
prefetch_m	alpha/asm.h	88;"	d
prefetch_men	alpha/asm.h	74;"	d
prefetch_men	alpha/asm.h	89;"	d
prefetchnta	i386/mmx.h	239;"	d
prefetchnta	libpostproc/postprocess.c	/^static inline void prefetchnta(void *p)$/;"	f	file:
prefetcht0	i386/mmx.h	236;"	d
prefetcht0	libpostproc/postprocess.c	/^static inline void prefetcht0(void *p)$/;"	f	file:
prefetcht1	i386/mmx.h	237;"	d
prefetcht1	libpostproc/postprocess.c	/^static inline void prefetcht1(void *p)$/;"	f	file:
prefetcht2	i386/mmx.h	238;"	d
prefetcht2	libpostproc/postprocess.c	/^static inline void prefetcht2(void *p)$/;"	f	file:
preflag	mpegaudiodec.c	/^    int preflag;$/;"	m	struct:GranuleDef	file:
prev	adx.c	/^    PREV prev[2];$/;"	m	file:
prev2	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
prev_block_len_bits	wmadec.c	/^    int prev_block_len_bits; \/* log2 of prev block length *\/$/;"	m	struct:WMADecodeContext	file:
prev_frame	truemotion1.c	/^    AVFrame prev_frame;$/;"	m	struct:TrueMotion1Context	file:
prev_frame	vmdav.c	/^    AVFrame prev_frame;$/;"	m	struct:VmdVideoContext	file:
prev_frame_num	h264.c	/^    int prev_frame_num;           \/\/\/< frame_num of the last pic for POC type 1\/2$/;"	m	struct:H264Context	file:
prev_frame_num_offset	h264.c	/^    int prev_frame_num_offset;    \/\/\/< for POC type 2$/;"	m	struct:H264Context	file:
prev_mb_skiped	h264.c	/^    int prev_mb_skiped; \/\/FIXME remove (IMHO not used)$/;"	m	struct:H264Context	file:
prev_pict_types	mpegvideo.h	/^    uint8_t *prev_pict_types;     \/\/\/< previous picture types in bitstream order, used for mb skip $/;"	m	struct:MpegEncContext
prev_poc_lsb	h264.c	/^    int prev_poc_lsb;             \/\/\/< poc_lsb of the last reference pic for POC type 0$/;"	m	struct:H264Context	file:
prev_poc_msb	h264.c	/^    int prev_poc_msb;             \/\/\/< poc_msb of the last reference pic for POC type 0$/;"	m	struct:H264Context	file:
prev_run	dv.c	/^    int prev_run[4];$/;"	m	struct:EncBlockInfo	file:
prev_sample	adpcm.c	/^    int prev_sample;$/;"	m	struct:ADPCMChannelStatus	file:
prevh	ps2/mmi.h	121;"	d
preview_obmc	h263.c	/^static void preview_obmc(MpegEncContext *s){$/;"	f	file:
previous	mace.c	/^  short index, lev, factor, prev2, previous, level;$/;"	m	struct:MACEContext	file:
previous_line_cbpcy	vc9.c	/^    uint8_t *previous_line_cbpcy; \/\/\/< To use for predicted CBPCY$/;"	m	struct:VC9Context	file:
previous_mba	h261.c	/^    int previous_mba;$/;"	m	struct:H261Context	file:
print_bin	bitstream.h	/^static inline void print_bin(int bits, int n){$/;"	f
print_long_term	h264.c	/^static void print_long_term(H264Context *h) {$/;"	f	file:
print_short_term	h264.c	/^static void print_short_term(H264Context *h) {$/;"	f	file:
print_stats	msmpeg4.c	/^void print_stats(void)$/;"	f
printf	common.h	505;"	d
printf	eval.c	205;"	d	file:
printf	snow.c	3114;"	d	file:
priv_data	avcodec.h	/^    void *priv_data;$/;"	m	struct:AVCodecContext
priv_data	avcodec.h	/^    void *priv_data;$/;"	m	struct:AVCodecParserContext
priv_data_size	avcodec.h	/^    int priv_data_size;$/;"	m	struct:AVCodec
priv_data_size	avcodec.h	/^    int priv_data_size;$/;"	m	struct:AVCodecParser
prodsum	ra288.c	/^static void prodsum(float *tgt, float *src, int len, int n)$/;"	f	file:
profile	avcodec.h	/^     int profile;$/;"	m	struct:AVCodecContext
profile	vc9.c	/^    int profile;          \/\/\/< 2bits, Profile$/;"	m	struct:VC9Context	file:
profile_idc	h264.c	/^    int profile_idc;$/;"	m	struct:SPS	file:
progressive_frame	mpegvideo.h	/^    int progressive_frame;$/;"	m	struct:MpegEncContext
progressive_sequence	mpegvideo.h	/^    int progressive_sequence;$/;"	m	struct:MpegEncContext
progressive_sequence	parser.c	/^    int progressive_sequence;$/;"	m	struct:ParseContext1	file:
psadbw_m2r	i386/mmx.h	241;"	d
psadbw_r2r	i386/mmx.h	242;"	d
pshufd_r2r	i386/mmx.h	255;"	d
pshufhw_m2r	i386/mmx.h	250;"	d
pshufhw_r2r	i386/mmx.h	251;"	d
pshuflw_m2r	i386/mmx.h	252;"	d
pshuflw_r2r	i386/mmx.h	253;"	d
pshufw_m2r	i386/mmx.h	244;"	d
pshufw_r2r	i386/mmx.h	245;"	d
pslld_i2r	i386/mmx.h	119;"	d
pslld_m2r	i386/mmx.h	120;"	d
pslld_r2r	i386/mmx.h	121;"	d
pslldq_i2r	i386/mmx.h	266;"	d
psllq_i2r	i386/mmx.h	122;"	d
psllq_m2r	i386/mmx.h	123;"	d
psllq_r2r	i386/mmx.h	124;"	d
psllw_i2r	i386/mmx.h	125;"	d
psllw_m2r	i386/mmx.h	126;"	d
psllw_r2r	i386/mmx.h	127;"	d
psrad_i2r	i386/mmx.h	129;"	d
psrad_m2r	i386/mmx.h	130;"	d
psrad_r2r	i386/mmx.h	131;"	d
psrah	ps2/mmi.h	142;"	d
psraw	ps2/mmi.h	112;"	d
psraw_i2r	i386/mmx.h	132;"	d
psraw_m2r	i386/mmx.h	133;"	d
psraw_r2r	i386/mmx.h	134;"	d
psrld_i2r	i386/mmx.h	136;"	d
psrld_m2r	i386/mmx.h	137;"	d
psrld_r2r	i386/mmx.h	138;"	d
psrldq_i2r	i386/mmx.h	267;"	d
psrlq_i2r	i386/mmx.h	139;"	d
psrlq_m2r	i386/mmx.h	140;"	d
psrlq_r2r	i386/mmx.h	141;"	d
psrlw_i2r	i386/mmx.h	142;"	d
psrlw_m2r	i386/mmx.h	143;"	d
psrlw_r2r	i386/mmx.h	144;"	d
psubb_m2r	i386/mmx.h	146;"	d
psubb_r2r	i386/mmx.h	147;"	d
psubd_m2r	i386/mmx.h	148;"	d
psubd_r2r	i386/mmx.h	149;"	d
psubh	ps2/mmi.h	139;"	d
psubsb_m2r	i386/mmx.h	153;"	d
psubsb_r2r	i386/mmx.h	154;"	d
psubsw_m2r	i386/mmx.h	155;"	d
psubsw_r2r	i386/mmx.h	156;"	d
psubusb_m2r	i386/mmx.h	158;"	d
psubusb_r2r	i386/mmx.h	159;"	d
psubusw_m2r	i386/mmx.h	160;"	d
psubusw_r2r	i386/mmx.h	161;"	d
psubw	ps2/mmi.h	109;"	d
psubw_m2r	i386/mmx.h	150;"	d
psubw_r2r	i386/mmx.h	151;"	d
psycho_acoustic_model	mpegaudio.c	/^static void psycho_acoustic_model(MpegAudioContext *s, short smr[SBLIMIT])$/;"	f	file:
ptr_lastgob	mpegvideo.h	/^    uint8_t *ptr_lastgob;$/;"	m	struct:MpegEncContext
pts	avcodec.h	/^    int64_t pts;     \/* pts of the current frame *\/$/;"	m	struct:AVCodecParserContext
ptype2mb_type	mpeg12data.h	/^static const uint32_t ptype2mb_type[7] = {$/;"	v
punpckhbw_m2r	i386/mmx.h	163;"	d
punpckhbw_r2r	i386/mmx.h	164;"	d
punpckhdq_m2r	i386/mmx.h	165;"	d
punpckhdq_r2r	i386/mmx.h	166;"	d
punpckhqdq_r2r	i386/mmx.h	270;"	d
punpckhwd_m2r	i386/mmx.h	167;"	d
punpckhwd_r2r	i386/mmx.h	168;"	d
punpcklbw_m2r	i386/mmx.h	170;"	d
punpcklbw_r2r	i386/mmx.h	171;"	d
punpckldq_m2r	i386/mmx.h	172;"	d
punpckldq_r2r	i386/mmx.h	173;"	d
punpcklqdq_r2r	i386/mmx.h	269;"	d
punpcklwd_m2r	i386/mmx.h	174;"	d
punpcklwd_r2r	i386/mmx.h	175;"	d
put	sh4/dsputil_align.c	46;"	d	file:
put32	png.c	/^static void put32(uint8_t **b, unsigned int v){$/;"	f	file:
put_bits	bitstream.h	/^static inline void put_bits(PutBitContext *s, int n, unsigned int value)$/;"	f
put_bits_count	bitstream.h	/^static inline int put_bits_count(PutBitContext *s)$/;"	f
put_bits_left	dv.c	/^static inline int put_bits_left(PutBitContext* s)$/;"	f	file:
put_cabac	cabac.h	/^static inline void put_cabac(CABACContext *c, uint8_t * const state, int bit){$/;"	f
put_cabac_bit	cabac.h	/^static inline void put_cabac_bit(CABACContext *c, int b){$/;"	f
put_cabac_bypass	cabac.h	/^static inline void put_cabac_bypass(CABACContext *c, int bit){$/;"	f
put_cabac_static	cabac.h	/^static inline void put_cabac_static(CABACContext *c, int RangeLPS, int bit){$/;"	f
put_cabac_terminate	cabac.h	/^static inline int put_cabac_terminate(CABACContext *c, int bit){$/;"	f
put_cabac_u	cabac.h	/^static inline void put_cabac_u(CABACContext *c, uint8_t * state, int v, int max, int max_index, int truncated){$/;"	f
put_cabac_ueg	cabac.h	/^static inline void put_cabac_ueg(CABACContext *c, uint8_t * state, int v, int max, int is_signed, int k, int max_index){$/;"	f
put_dc	error_resilience.c	/^static void put_dc(MpegEncContext *s, uint8_t *dest_y, uint8_t *dest_cb, uint8_t *dest_cr, int mb_x, int mb_y)$/;"	f	file:
put_dct	mpegvideo.c	/^static inline void put_dct(MpegEncContext *s, $/;"	f	file:
put_h264_chroma_pixels_tab	dsputil.h	/^    h264_chroma_mc_func put_h264_chroma_pixels_tab[3];$/;"	m	struct:DSPContext
put_h264_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func put_h264_qpel_pixels_tab[3][16];$/;"	m	struct:DSPContext
put_header	mpeg12.c	/^static void put_header(MpegEncContext *s, int header)$/;"	f	file:
put_huffman_table	mjpeg.c	/^static int put_huffman_table(MpegEncContext *s, int table_class, int table_id,$/;"	f	file:
put_marker	mjpeg.c	/^static inline void put_marker(PutBitContext *p, int code)$/;"	f	file:
put_mb_modes	mpeg12.c	/^static inline void put_mb_modes(MpegEncContext *s, int n, int bits, $/;"	f	file:
put_mspel8_mc00_c	dsputil.c	/^static void put_mspel8_mc00_c (uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc00_c	sh4/qpel.c	/^static void put_mspel8_mc00_c (uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc02_c	dsputil.c	/^static void put_mspel8_mc02_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc02_c	sh4/qpel.c	/^static void put_mspel8_mc02_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc10_c	dsputil.c	/^static void put_mspel8_mc10_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc10_c	sh4/qpel.c	/^static void put_mspel8_mc10_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc12_c	dsputil.c	/^static void put_mspel8_mc12_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc12_c	sh4/qpel.c	/^static void put_mspel8_mc12_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc20_c	dsputil.c	/^static void put_mspel8_mc20_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc20_c	sh4/qpel.c	/^static void put_mspel8_mc20_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc22_c	dsputil.c	/^static void put_mspel8_mc22_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc22_c	sh4/qpel.c	/^static void put_mspel8_mc22_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc30_c	dsputil.c	/^static void put_mspel8_mc30_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc30_c	sh4/qpel.c	/^static void put_mspel8_mc30_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc32_c	dsputil.c	/^static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel8_mc32_c	sh4/qpel.c	/^static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, int stride){$/;"	f	file:
put_mspel_pixels_tab	dsputil.h	/^    qpel_mc_func put_mspel_pixels_tab[8];$/;"	m	struct:DSPContext
put_no_rnd_pixels16_c	sh4/dsputil_align.c	318;"	d	file:
put_no_rnd_pixels16_l2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels16_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
put_no_rnd_pixels16_l2_c	dsputil.c	/^static void put_no_rnd_pixels16_l2_c(uint8_t *dst, const uint8_t *a, const uint8_t *b, int stride, int h){$/;"	f	file:
put_no_rnd_pixels16_mmx	i386/dsputil_mmx.c	1637;"	d	file:
put_no_rnd_pixels16_o	sh4/dsputil_align.c	309;"	d	file:
put_no_rnd_pixels16_x2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels16_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
put_no_rnd_pixels16_xy2_altivec	ppc/dsputil_altivec.c	/^void put_no_rnd_pixels16_xy2_altivec(uint8_t * block, const uint8_t * pixels, int line_size, int h)$/;"	f
put_no_rnd_pixels16_y2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels16_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
put_no_rnd_pixels8_c	sh4/dsputil_align.c	317;"	d	file:
put_no_rnd_pixels8_l2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels8_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
put_no_rnd_pixels8_l2_c	dsputil.c	/^static void put_no_rnd_pixels8_l2_c(uint8_t *dst, const uint8_t *a, const uint8_t *b, int stride, int h){$/;"	f	file:
put_no_rnd_pixels8_mmx	i386/dsputil_mmx.c	1636;"	d	file:
put_no_rnd_pixels8_o	sh4/dsputil_align.c	308;"	d	file:
put_no_rnd_pixels8_x2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels8_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_no_rnd_pixels8_xy2_altivec	ppc/dsputil_altivec.c	/^void put_no_rnd_pixels8_xy2_altivec(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_no_rnd_pixels8_y2	i386/dsputil_mmx_avg.h	/^static void DEF(put_no_rnd_pixels8_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_no_rnd_pixels_l2	dsputil.h	/^    void (*put_no_rnd_pixels_l2[2])(uint8_t *block\/*align width (8 or 16)*\/, const uint8_t *a\/*align 1*\/, const uint8_t *b\/*align 1*\/, int line_size, int h);$/;"	m	struct:DSPContext
put_no_rnd_pixels_tab	dsputil.h	/^    op_pixels_func put_no_rnd_pixels_tab[4][4];$/;"	m	struct:DSPContext
put_no_rnd_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func put_no_rnd_qpel_pixels_tab[2][16];$/;"	m	struct:DSPContext
put_obmc	mpegvideo.c	/^static inline void put_obmc(uint8_t *dst, uint8_t *src[5], int stride){$/;"	f	file:
put_pixels16_altivec	ppc/dsputil_altivec.c	/^void put_pixels16_altivec(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_pixels16_axp_asm	alpha/dsputil_alpha.c	/^void put_pixels16_axp_asm(uint8_t *block, const uint8_t *pixels,$/;"	f
put_pixels16_c	sh4/dsputil_align.c	314;"	d	file:
put_pixels16_l2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels16_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
put_pixels16_l2	ppc/dsputil_h264_altivec.c	/^} static inline void put_pixels16_l2(uint8_t * dst, const uint8_t * src1, const uint8_t * src2, int dst_stride, int src_stride1, int src_stride2, int h) {$/;"	f	file:
put_pixels16_l2_altivec	ppc/dsputil_h264_altivec.c	224;"	d	file:
put_pixels16_mlib	mlib/dsputil_mlib.c	/^static void put_pixels16_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels16_mmi	ps2/dsputil_mmi.c	/^static void put_pixels16_mmi(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f	file:
put_pixels16_mmx	i386/dsputil_mmx.c	/^static void put_pixels16_mmx(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f	file:
put_pixels16_x2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels16_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_pixels16_x2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels16_x2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels16_xy2_altivec	ppc/dsputil_altivec.c	/^void put_pixels16_xy2_altivec(uint8_t * block, const uint8_t * pixels, int line_size, int h)$/;"	f
put_pixels16_xy2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels16_xy2_mlib(uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels16_y2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels16_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h){$/;"	f
put_pixels16_y2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels16_y2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels4_c	sh4/dsputil_align.c	/^static void put_pixels4_c(uint8_t *dest,const uint8_t *ref, const int stride,int height)$/;"	f	file:
put_pixels4_l2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels4_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
put_pixels4_mmx	i386/dsputil_mmx.c	/^static void put_pixels4_mmx(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f	file:
put_pixels8_c	sh4/dsputil_align.c	313;"	d	file:
put_pixels8_l2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels8_l2)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int dstStride, int src1Stride, int h)$/;"	f
put_pixels8_l2	ppc/dsputil_h264_altivec.c	/^static inline void put_pixels8_l2(uint8_t * dst, const uint8_t * src1, const uint8_t * src2, int dst_stride, int src_stride1, int src_stride2, int h) {$/;"	f	file:
put_pixels8_mlib	mlib/dsputil_mlib.c	/^static void put_pixels8_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels8_mmi	ps2/dsputil_mmi.c	/^static void put_pixels8_mmi(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f	file:
put_pixels8_mmx	i386/dsputil_mmx.c	/^static void put_pixels8_mmx(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f	file:
put_pixels8_x2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels8_x2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_pixels8_x2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels8_x2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels8_xy2_altivec	ppc/dsputil_altivec.c	/^void put_pixels8_xy2_altivec(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_pixels8_xy2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels8_xy2_mlib(uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels8_y2	i386/dsputil_mmx_avg.h	/^static void DEF(put_pixels8_y2)(uint8_t *block, const uint8_t *pixels, int line_size, int h)$/;"	f
put_pixels8_y2_mlib	mlib/dsputil_mlib.c	/^static void put_pixels8_y2_mlib (uint8_t * dest, const uint8_t * ref,$/;"	f	file:
put_pixels_axp_asm	alpha/dsputil_alpha_asm.S	/^put_pixels_axp_asm:$/;"	l
put_pixels_clamped	dsputil.h	/^    void (*put_pixels_clamped)(const DCTELEM *block\/*align 16*\/, uint8_t *pixels\/*align 8*\/, int line_size);$/;"	m	struct:DSPContext
put_pixels_clamped2_c	dsputil.c	/^static void put_pixels_clamped2_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
put_pixels_clamped4_c	dsputil.c	/^static void put_pixels_clamped4_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
put_pixels_clamped_axp_p	alpha/dsputil_alpha.c	/^void (*put_pixels_clamped_axp_p)(const DCTELEM *block, uint8_t *pixels,$/;"	v
put_pixels_clamped_c	dsputil.c	/^static void put_pixels_clamped_c(const DCTELEM *block, uint8_t *restrict pixels,$/;"	f	file:
put_pixels_clamped_mmx	i386/dsputil_mmx.c	/^void put_pixels_clamped_mmx(const DCTELEM *block, uint8_t *pixels, int line_size)$/;"	f
put_pixels_clamped_mvi_asm	alpha/dsputil_alpha_asm.S	/^put_pixels_clamped_mvi_asm:$/;"	l
put_pixels_tab	dsputil.h	/^    op_pixels_func put_pixels_tab[4][4];$/;"	m	struct:DSPContext
put_qpel_pixels_tab	dsputil.h	/^    qpel_mc_func put_qpel_pixels_tab[2][16];$/;"	m	struct:DSPContext
put_rac	rangecoder.h	/^static inline void put_rac(RangeCoder *c, uint8_t * const state, int bit){$/;"	f
put_signed_pixels_clamped	dsputil.h	/^    void (*put_signed_pixels_clamped)(const DCTELEM *block\/*align 16*\/, uint8_t *pixels\/*align 8*\/, int line_size);$/;"	m	struct:DSPContext
put_signed_pixels_clamped_c	dsputil.c	/^static void put_signed_pixels_clamped_c(const DCTELEM *block, $/;"	f	file:
put_signed_pixels_clamped_mmx	i386/dsputil_mmx.c	/^void put_signed_pixels_clamped_mmx(const DCTELEM *block, uint8_t *pixels, int line_size)$/;"	f
put_string	bitstream.c	/^void put_string(PutBitContext * pbc, char *s, int put_zero)$/;"	f
put_symbol	ffv1.c	/^static inline void put_symbol(RangeCoder *c, uint8_t *state, int v, int is_signed){$/;"	f	file:
put_symbol	snow.c	/^static inline void put_symbol(RangeCoder *c, uint8_t *state, int v, int is_signed){$/;"	f	file:
put_symbol2	snow.c	/^static inline void put_symbol2(RangeCoder *c, uint8_t *state, int v, int log2){$/;"	f	file:
put_tpel_pixels_mc00_c	dsputil.c	/^static inline void put_tpel_pixels_mc00_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc01_c	dsputil.c	/^static inline void put_tpel_pixels_mc01_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc02_c	dsputil.c	/^static inline void put_tpel_pixels_mc02_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc10_c	dsputil.c	/^static inline void put_tpel_pixels_mc10_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc11_c	dsputil.c	/^static inline void put_tpel_pixels_mc11_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc12_c	dsputil.c	/^static inline void put_tpel_pixels_mc12_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc20_c	dsputil.c	/^static inline void put_tpel_pixels_mc20_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc21_c	dsputil.c	/^static inline void put_tpel_pixels_mc21_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_mc22_c	dsputil.c	/^static inline void put_tpel_pixels_mc22_c(uint8_t *dst, const uint8_t *src, int stride, int width, int height){$/;"	f	file:
put_tpel_pixels_tab	dsputil.h	/^    tpel_mc_func put_tpel_pixels_tab[11]; \/\/FIXME individual func ptr per width?$/;"	m	struct:DSPContext
put_vlc_symbol	ffv1.c	/^static inline void put_vlc_symbol(PutBitContext *pb, VlcState * const state, int v, int bits){$/;"	f	file:
pv	alpha/regdef.h	39;"	d
pxor_m2r	i386/mmx.h	177;"	d
pxor_r2r	i386/mmx.h	178;"	d
q	i386/mmx.h	/^	long long		q;	\/* Quadword (64-bit) value *\/$/;"	m
q1	liba52/parse.c	/^    quantizer_t q1[2];$/;"	m	file:
q1_ptr	liba52/parse.c	/^    int q1_ptr;$/;"	m	file:
q2	liba52/parse.c	/^    quantizer_t q2[2];$/;"	m	file:
q2_ptr	liba52/parse.c	/^    int q2_ptr;$/;"	m	file:
q4	liba52/parse.c	/^    quantizer_t q4;$/;"	m	file:
q4_ptr	liba52/parse.c	/^    int q4_ptr;$/;"	m	file:
q_1_0	liba52/tables.h	/^static const quantizer_t q_1_0[32] = {$/;"	v
q_1_1	liba52/tables.h	/^static const quantizer_t q_1_1[32] = {$/;"	v
q_1_2	liba52/tables.h	/^static const quantizer_t q_1_2[32] = {$/;"	v
q_2_0	liba52/tables.h	/^static const quantizer_t q_2_0[128] = {$/;"	v
q_2_1	liba52/tables.h	/^static const quantizer_t q_2_1[128] = {$/;"	v
q_2_2	liba52/tables.h	/^static const quantizer_t q_2_2[128] = {$/;"	v
q_3	liba52/tables.h	/^static const quantizer_t q_3[8] = {$/;"	v
q_4_0	liba52/tables.h	/^static const quantizer_t q_4_0[128] = {$/;"	v
q_4_1	liba52/tables.h	/^static const quantizer_t q_4_1[128] = {$/;"	v
q_5	liba52/tables.h	/^static const quantizer_t q_5[16] = {$/;"	v
q_inter_matrix	mpegvideo.h	/^    int (*q_inter_matrix)[64];$/;"	m	struct:MpegEncContext
q_inter_matrix16	mpegvideo.h	/^    uint16_t (*q_inter_matrix16)[2][64];$/;"	m	struct:MpegEncContext
q_intra_matrix	asv1.c	/^    int __align8 q_intra_matrix[64];$/;"	m	struct:ASV1Context	file:
q_intra_matrix	mdec.c	/^    int __align8 q_intra_matrix[64];$/;"	m	struct:MDECContext	file:
q_intra_matrix	mpegvideo.h	/^    int (*q_intra_matrix)[64];$/;"	m	struct:MpegEncContext
q_intra_matrix16	mpegvideo.h	/^    uint16_t (*q_intra_matrix16)[2][64];$/;"	m	struct:MpegEncContext
q_scale_type	mpegvideo.h	/^    int q_scale_type;$/;"	m	struct:MpegEncContext
qbias	snow.c	/^    int qbias;$/;"	m	struct:SnowContext	file:
qblur	avcodec.h	/^    float qblur;      \/\/\/< amount of qscale smoothing over time (0.0-1.0) $/;"	m	struct:AVCodecContext
qcells	roqvideo.c	/^    roq_qcell qcells[256];$/;"	m	struct:RoqContext	file:
qcompress	avcodec.h	/^    float qcompress;  \/\/\/< amount of qscale change between easy & hard scenes (0.0-1.0)$/;"	m	struct:AVCodecContext
qdraw_decoder	qdrw.c	/^AVCodec qdraw_decoder = {$/;"	v
qexp	snow.c	/^static const uint8_t qexp[8]={$/;"	v	file:
qexp	snow.c	443;"	d	file:
qlog	snow.c	/^    int qlog;                                   \/\/\/< log(qscale)\/log[2^(1\/6)]$/;"	m	struct:SubBand	file:
qlog	snow.c	/^    int qlog;$/;"	m	struct:SnowContext	file:
qmax	avcodec.h	/^    int qmax;$/;"	m	struct:AVCodecContext
qmin	avcodec.h	/^    int qmin;$/;"	m	struct:AVCodecContext
qp2bits	ratecontrol.c	/^static inline double qp2bits(RateControlEntry *rce, double qp){$/;"	f	file:
qpStride	libpostproc/postprocess_internal.h	/^	int qpStride; \/\/\/<size of qp buffers (needed to realloc them if needed)$/;"	m	struct:PPContext
qpeg_decode_inter	qpeg.c	/^static void qpeg_decode_inter(uint8_t *src, uint8_t *dst, int size,$/;"	f	file:
qpeg_decode_intra	qpeg.c	/^static void qpeg_decode_intra(uint8_t *src, uint8_t *dst, int size,$/;"	f	file:
qpeg_decoder	qpeg.c	/^AVCodec qpeg_decoder = {$/;"	v
qpeg_table_h	qpeg.c	/^static int qpeg_table_h[16] = $/;"	v	file:
qpeg_table_w	qpeg.c	/^static int qpeg_table_w[16] =$/;"	v	file:
qpel_avg	mpegvideo.h	/^    qpel_mc_func (*qpel_avg)[16];$/;"	m	struct:MotionEstContext
qpel_mc_func	dsputil.h	/^typedef void (*qpel_mc_func)(uint8_t *dst\/*align width (8 or 16)*\/, uint8_t *src\/*align 1*\/, int stride);$/;"	t
qpel_motion	mpegvideo.c	/^static inline void qpel_motion(MpegEncContext *s,$/;"	f	file:
qpel_motion_search	motion_est_template.c	/^static int qpel_motion_search(MpegEncContext * s,$/;"	f	file:
qpel_put	mpegvideo.h	/^    qpel_mc_func (*qpel_put)[16];$/;"	m	struct:MotionEstContext
qscale	avcodec.h	/^    int qscale; \/\/ if this is 0 then quality_factor will be used instead$/;"	m	struct:RcOverride
qscale	mdec.c	/^    int qscale;$/;"	m	struct:MDECContext	file:
qscale	mjpeg.c	/^    int qscale[4];      \/\/\/< quantizer scale calculated from quant_matrixes$/;"	m	struct:MJpegDecodeContext	file:
qscale	mpegvideo.h	/^    float qscale;$/;"	m	struct:RateControlEntry
qscale	mpegvideo.h	/^    int qscale;                 \/\/\/< QP $/;"	m	struct:MpegEncContext
qscale	xvidff.c	/^    int qscale;                    \/** Do we use constant scale? *\/$/;"	m	struct:xvid_context	file:
qscale_sum	mpegvideo.h	/^    uint64_t qscale_sum[5];$/;"	m	struct:RateControlContext
qscale_table	mjpeg.c	/^    int8_t *qscale_table;$/;"	m	struct:MJpegDecodeContext	file:
qscale_table	vp3.c	/^    uint8_t qscale_table[2048]; \/\/FIXME dynamic alloc (width+15)\/16$/;"	m	struct:Vp3DecodeContext	file:
qtrle_decode_16bpp	qtrle.c	/^static void qtrle_decode_16bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_1bpp	qtrle.c	/^static void qtrle_decode_1bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_24bpp	qtrle.c	/^static void qtrle_decode_24bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_2bpp	qtrle.c	/^static void qtrle_decode_2bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_32bpp	qtrle.c	/^static void qtrle_decode_32bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_4bpp	qtrle.c	/^static void qtrle_decode_4bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_8bpp	qtrle.c	/^static void qtrle_decode_8bpp(QtrleContext *s)$/;"	f	file:
qtrle_decode_end	qtrle.c	/^static int qtrle_decode_end(AVCodecContext *avctx)$/;"	f	file:
qtrle_decode_frame	qtrle.c	/^static int qtrle_decode_frame(AVCodecContext *avctx,$/;"	f	file:
qtrle_decode_init	qtrle.c	/^static int qtrle_decode_init(AVCodecContext *avctx)$/;"	f	file:
qtrle_decoder	qtrle.c	/^AVCodec qtrle_decoder = {$/;"	v
quality_factor	avcodec.h	/^    float quality_factor;$/;"	m	struct:RcOverride
quality_index	vp3.c	/^    int quality_index;$/;"	m	struct:Vp3DecodeContext	file:
quant	g726.c	/^	int* quant;           \/**< quantization table *\/$/;"	m	struct:G726Tables	file:
quant	g726.c	/^static inline uint8_t quant(G726Context* c, int d)$/;"	f	file:
quant11	ffv1.c	/^static const int8_t quant11[256]={$/;"	v	file:
quant11	snow.c	/^static const int8_t quant11[256]={$/;"	v	file:
quant13	ffv1.c	/^static const int8_t quant13[256]={$/;"	v	file:
quant13	snow.c	/^static const int8_t quant13[256]={$/;"	v	file:
quant3	ffv1.c	/^static const int8_t quant3[256]={$/;"	v	file:
quant3	snow.c	/^static const int8_t quant3[256]={$/;"	v	file:
quant3b	snow.c	/^static const int8_t quant3b[256]={$/;"	v	file:
quant5	ffv1.c	/^static const int8_t quant5[256]={$/;"	v	file:
quant5	snow.c	/^static const int8_t quant5[256]={$/;"	v	file:
quant7	ffv1.c	/^static const int8_t quant7[256]={$/;"	v	file:
quant7	snow.c	/^static const int8_t quant7[256]={$/;"	v	file:
quant9	ffv1.c	/^static const int8_t quant9[256]={$/;"	v	file:
quant9	snow.c	/^static const int8_t quant9[256]={$/;"	v	file:
quant_bits	mpegaudiodectab.h	/^const int quant_bits[17] = {$/;"	v
quant_coeff	h264data.h	/^static const int quant_coeff[52][16]={$/;"	v
quant_index	mjpeg.c	/^    int quant_index[4];   \/* quant table index for each component *\/$/;"	m	struct:MJpegDecodeContext	file:
quant_matrix_rebuild	mpeg12.c	/^static void quant_matrix_rebuild(uint16_t *matrix, const uint8_t *old_perm, $/;"	f	file:
quant_matrixes	mjpeg.c	/^    int16_t quant_matrixes[4][64];$/;"	m	struct:MJpegDecodeContext	file:
quant_precision	mpegvideo.h	/^    int quant_precision;$/;"	m	struct:MpegEncContext
quant_psnr	dsputil.h	/^    me_cmp_func quant_psnr[5];$/;"	m	struct:DSPContext
quant_psnr8x8_c	dsputil.c	/^static int quant_psnr8x8_c(\/*MpegEncContext*\/ void *c, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
quant_snr	mpegaudiotab.h	/^static unsigned short quant_snr[17] = { $/;"	v
quant_steps	mpegaudiodectab.h	/^const int quant_steps[17] = {$/;"	v
quant_table	ffv1.c	/^    int16_t quant_table[5][256];$/;"	m	struct:FFV1Context	file:
quant_tbl16	g726.c	/^static int quant_tbl16[] =                       \/**< 16kbit\/s 2bits per sample *\/$/;"	v	file:
quant_tbl24	g726.c	/^static int quant_tbl24[] =                       \/**< 24kbit\/s 3bits per sample *\/$/;"	v	file:
quant_tbl32	g726.c	/^static int quant_tbl32[] =                       \/**< 32kbit\/s 4bits per sample *\/$/;"	v	file:
quant_tbl40	g726.c	/^static int quant_tbl40[] =                      \/**< 40kbit\/s 5bits per sample *\/$/;"	v	file:
quantization	sonic.c	/^    double quantization;$/;"	m	struct:SonicContext	file:
quantize	snow.c	/^static void quantize(SnowContext *s, SubBand *b, DWTELEM *src, int stride, int bias){$/;"	f	file:
quantize_c	h264.c	/^static inline int quantize_c(DCTELEM *block, uint8_t *scantable, int qscale, int intra, int seperate_dc){$/;"	f	file:
quantizer_mode	vc9.c	/^    int quantizer_mode;   \/\/\/< 2bits, quantizer mode used for sequence, see QUANT_*$/;"	m	struct:VC9Context	file:
quantizer_noise_shaping	avcodec.h	/^    int quantizer_noise_shaping;$/;"	m	struct:AVCodecContext
quantizer_set_t	liba52/parse.c	/^} quantizer_set_t;$/;"	t	file:
quantizer_t	liba52/a52_internal.h	/^typedef int16_t quantizer_t;$/;"	t
quantizer_t	liba52/a52_internal.h	/^typedef sample_t quantizer_t;$/;"	t
quarter_sample	mpegvideo.h	/^    int quarter_sample;              \/\/\/< 1->qpel, 0->half pel ME\/MC  $/;"	m	struct:MpegEncContext
quicktime_format	xvidff.c	/^    int quicktime_format;          \/** Are we in a QT-based format? *\/$/;"	m	struct:xvid_context	file:
r0	i386/vp3dsp_mmx.c	39;"	d	file:
r1	i386/vp3dsp_mmx.c	40;"	d	file:
r2	i386/vp3dsp_mmx.c	41;"	d	file:
r3	i386/vp3dsp_mmx.c	42;"	d	file:
r4	i386/vp3dsp_mmx.c	43;"	d	file:
r5	i386/vp3dsp_mmx.c	44;"	d	file:
r6	i386/vp3dsp_mmx.c	45;"	d	file:
r7	i386/vp3dsp_mmx.c	46;"	d	file:
ra	alpha/regdef.h	36;"	d
ra144_decode_frame	ra144.c	/^static int ra144_decode_frame(AVCodecContext * avctx,$/;"	f	file:
ra144_decode_init	ra144.c	/^static int ra144_decode_init(AVCodecContext * avctx)$/;"	f	file:
ra288_decode_frame	ra288.c	/^static int ra288_decode_frame(AVCodecContext * avctx,$/;"	f	file:
ra288_decode_init	ra288.c	/^static int ra288_decode_init(AVCodecContext * avctx)$/;"	f	file:
ra_144_decoder	ra144.c	/^AVCodec ra_144_decoder =$/;"	v
ra_288_decoder	ra288.c	/^AVCodec ra_288_decoder =$/;"	v
rand	common.h	500;"	d
rand	resample2.c	265;"	d	file:
range	cabac.h	/^    int range;$/;"	m	struct:CABACContext
range	rangecoder.h	/^    int range;$/;"	m	struct:RangeCoder
rangered	vc9.c	/^    int rangered;         \/\/\/< RANGEREDFRM (range reduction) syntax element present$/;"	m	struct:VC9Context	file:
rangeredfrm	vc9.c	/^    uint8_t rangeredfrm; \/\/\/< out_sample = CLIP((in_sample-128)*2+128)$/;"	m	struct:VC9Context	file:
raster_end	mpegvideo.h	/^    uint8_t raster_end[64];$/;"	m	struct:ScanTable
rate_emu	avcodec.h	/^    int rate_emu;$/;"	m	struct:AVCodecContext
ratio	resample.c	/^    float ratio;$/;"	m	struct:ReSampleContext	file:
raw_close_decoder	raw.c	/^static int raw_close_decoder(AVCodecContext *avctx)$/;"	f	file:
raw_decode	raw.c	/^static int raw_decode(AVCodecContext *avctx,$/;"	f	file:
raw_encode	raw.c	/^static int raw_encode(AVCodecContext *avctx,$/;"	f	file:
raw_init_decoder	raw.c	/^static int raw_init_decoder(AVCodecContext *avctx)$/;"	f	file:
raw_init_encoder	raw.c	/^static int raw_init_encoder(AVCodecContext *avctx)$/;"	f	file:
rawvideo_decoder	raw.c	/^AVCodec rawvideo_decoder = {$/;"	v
rawvideo_encoder	raw.c	/^AVCodec rawvideo_encoder = {$/;"	v
rbsp_buffer	h264.c	/^    uint8_t *rbsp_buffer;$/;"	m	struct:H264Context	file:
rbsp_buffer_size	h264.c	/^    int rbsp_buffer_size;$/;"	m	struct:H264Context	file:
rc_buffer_aggressivity	avcodec.h	/^    float rc_buffer_aggressivity;$/;"	m	struct:AVCodecContext
rc_buffer_size	avcodec.h	/^    int rc_buffer_size;$/;"	m	struct:AVCodecContext
rc_context	mpegvideo.h	/^    RateControlContext rc_context; \/\/\/< contains stuff only accessed in ratecontrol.c$/;"	m	struct:MpegEncContext
rc_eq	avcodec.h	/^    char *rc_eq;$/;"	m	struct:AVCodecContext
rc_initial_buffer_occupancy	avcodec.h	/^    int rc_initial_buffer_occupancy;$/;"	m	struct:AVCodecContext
rc_initial_cplx	avcodec.h	/^    float rc_initial_cplx;$/;"	m	struct:AVCodecContext
rc_max_rate	avcodec.h	/^    int rc_max_rate;$/;"	m	struct:AVCodecContext
rc_min_rate	avcodec.h	/^    int rc_min_rate;$/;"	m	struct:AVCodecContext
rc_override	avcodec.h	/^    RcOverride *rc_override;$/;"	m	struct:AVCodecContext
rc_override_count	avcodec.h	/^    int rc_override_count;$/;"	m	struct:AVCodecContext
rc_qmod_amp	avcodec.h	/^    float rc_qmod_amp;$/;"	m	struct:AVCodecContext
rc_qmod_freq	avcodec.h	/^    int rc_qmod_freq;$/;"	m	struct:AVCodecContext
rc_qsquish	avcodec.h	/^    float rc_qsquish;$/;"	m	struct:AVCodecContext
rc_strategy	avcodec.h	/^    int rc_strategy;$/;"	m	struct:AVCodecContext
rct	mjpeg.c	/^    int rct;            \/* standard rct *\/  $/;"	m	struct:MJpegDecodeContext	file:
rd	dsputil.h	/^    me_cmp_func rd[5];$/;"	m	struct:DSPContext
rd8x8_c	dsputil.c	/^static int rd8x8_c(\/*MpegEncContext*\/ void *c, uint8_t *src1, uint8_t *src2, int stride, int h){$/;"	f	file:
rd_scratchpad	mpegvideo.h	/^    uint8_t *rd_scratchpad;       \/\/\/< scartchpad for rate distortion mb decission$/;"	m	struct:MpegEncContext
rd_total	svq1.c	/^    int64_t rd_total;$/;"	m	struct:SVQ1Context	file:
rdtsc	common.h	/^static inline long long rdtsc(void)$/;"	f
re	ac3enc.c	/^    short re,im;$/;"	m	struct:IComplex	file:
re	dsputil.h	/^    FFTSample re, im;$/;"	m	struct:FFTComplex
read_header	ffv1.c	/^static int read_header(FFV1Context *f){$/;"	f	file:
read_huffman_tables	4xm.c	/^static uint8_t *read_huffman_tables(FourXContext *f, uint8_t * const buf){$/;"	f	file:
read_huffman_tables	huffyuv.c	/^static int read_huffman_tables(HYuvContext *s, uint8_t *src, int length){$/;"	f	file:
read_len_table	huffyuv.c	/^static void read_len_table(uint8_t *dst, GetBitContext *gb){$/;"	f	file:
read_long	adx.c	/^static uint32_t read_long(const unsigned char *p)$/;"	f	file:
read_old_huffman_tables	huffyuv.c	/^static int read_old_huffman_tables(HYuvContext *s){$/;"	f	file:
read_quant_table	ffv1.c	/^static int read_quant_table(RangeCoder *c, int16_t *quant_table, int scale){$/;"	f	file:
read_uint_max	sonic.c	/^static unsigned int read_uint_max(GetBitContext *gb, int max)$/;"	f	file:
real	liba52/imdct.c	/^    sample_t real;$/;"	m	struct:complex_s	file:
real_pict_num	avcodec.h	/^    int real_pict_num;  \/\/\/< returns the real picture number of previous encoded frame $/;"	m	struct:AVCodecContext
real_sprite_warping_points	mpegvideo.h	/^    int real_sprite_warping_points;$/;"	m	struct:MpegEncContext
realloc	common.h	498;"	d
realloc	liba52/a52.h	31;"	d
realloc	mem.c	30;"	d	file:
reallocAlign	libpostproc/postprocess.c	/^static void reallocAlign(void **p, int alignment, int size){$/;"	f	file:
reallocBuffers	libpostproc/postprocess.c	/^static void reallocBuffers(PPContext *c, int width, int height, int stride, int qpStride){$/;"	f	file:
reduced_res_vop	mpegvideo.h	/^    int reduced_res_vop;$/;"	m	struct:MpegEncContext
redundant_pic_cnt_present	h264.c	/^    int redundant_pic_cnt_present; \/\/\/< redundant_pic_cnt_present_flag$/;"	m	struct:PPS	file:
redundant_pic_count	h264.c	/^    int redundant_pic_count;$/;"	m	struct:H264Context	file:
ref	mpegvideo.h	/^    uint8_t *ref[4][4];$/;"	m	struct:MotionEstContext
ref_count	h264.c	/^    int ref_count[2];           \/\/\/< num_ref_idx_l0\/1_active_minus1 + 1$/;"	m	struct:PPS	file:
ref_count	h264.c	/^    int ref_count[2];\/\/ FIXME split for AFF$/;"	m	struct:H264Context	file:
ref_count	mpegvideo.h	/^    int ref_count[2];           \/\/\/< number of entries in ref_poc$/;"	m	struct:Picture
ref_frame	indeo3.c	/^    YUVBufs *ref_frame;$/;"	m	struct:Indeo3DecodeContext	file:
ref_frame_count	h264.c	/^    int ref_frame_count;               \/\/\/< num_ref_frames$/;"	m	struct:SPS	file:
ref_list	h264.c	/^    Picture ref_list[2][32]; \/\/FIXME size?$/;"	m	struct:H264Context	file:
ref_poc	mpegvideo.h	/^    int ref_poc[2][16];         \/\/\/< h264 POCs of the frames used as reference$/;"	m	struct:Picture
refdata	qpeg.c	/^    uint8_t *refdata;$/;"	m	struct:QpegContext	file:
refill	cabac.h	/^static void refill(CABACContext *c){$/;"	f
refill	rangecoder.h	/^static inline void refill(RangeCoder *c){$/;"	f
reget_buffer	avcodec.h	/^    int (*reget_buffer)(struct AVCodecContext *c, AVFrame *pic);$/;"	m	struct:AVCodecContext
region_size	mpegaudiodec.c	/^    int region_size[3]; \/* number of huffman codes in each region *\/$/;"	m	struct:GranuleDef	file:
register_avcodec	utils.c	/^void register_avcodec(AVCodec *format)$/;"	f
release_buffer	avcodec.h	/^    void (*release_buffer)(struct AVCodecContext *c, AVFrame *pic);$/;"	m	struct:AVCodecContext
rem6	h264data.h	/^static const uint8_t rem6[52]={$/;"	v
rematflg	liba52/a52_internal.h	/^    uint8_t rematflg;		\/* stereo rematrixing *\/$/;"	m	struct:a52_state_s
remove_long	h264.c	/^static Picture * remove_long(H264Context *h, int i){$/;"	f	file:
remove_short	h264.c	/^static Picture * remove_short(H264Context *h, int frame_num){$/;"	f	file:
render_fragments	vp3.c	/^static void render_fragments(Vp3DecodeContext *s,$/;"	f	file:
renorm_cabac_decoder	cabac.h	/^static inline void renorm_cabac_decoder(CABACContext *c){$/;"	f
renorm_cabac_decoder_once	cabac.h	/^static inline void renorm_cabac_decoder_once(CABACContext *c){$/;"	f
renorm_cabac_encoder	cabac.h	/^static inline void renorm_cabac_encoder(CABACContext *c){$/;"	f
renorm_encoder	rangecoder.h	/^static inline void renorm_encoder(RangeCoder *c){$/;"	f
reorder_block	mpegaudiodec.c	/^static void reorder_block(MPADecodeContext *s, GranuleDef *g)$/;"	f	file:
reorder_pb	svq1.c	/^    PutBitContext reorder_pb[6]; \/\/why ooh why this sick breadth first order, everything is slower and more complex$/;"	m	struct:SVQ1Context	file:
reordered_input_picture	mpegvideo.h	/^    Picture **reordered_input_picture; \/\/\/< pointer to the next pictures in codedorder for encoding$/;"	m	struct:MpegEncContext
repeat_field	mpeg12.c	/^    int repeat_field; \/* true if we must repeat the field *\/$/;"	m	struct:Mpeg1Context	file:
repeat_first_field	mpegvideo.h	/^    int repeat_first_field;$/;"	m	struct:MpegEncContext
repeat_pict	avcodec.h	/^    int repeat_pict; \/* XXX: put it back in AVCodecContext *\/$/;"	m	struct:AVCodecParserContext
replaceTable	libpostproc/postprocess.c	/^static char *replaceTable[]=$/;"	v	file:
res_fasttx	vc9.c	/^    int res_fasttx;       \/\/\/< reserved, always 1$/;"	m	struct:VC9Context	file:
res_rtm_flag	vc9.c	/^    int res_rtm_flag;     \/\/\/< reserved, set to 1$/;"	m	struct:VC9Context	file:
res_sm	vc9.c	/^    int res_sm;           \/\/\/< reserved, 2b$/;"	m	struct:VC9Context	file:
res_transtab	vc9.c	/^    int res_transtab;     \/\/\/< reserved, always 0$/;"	m	struct:VC9Context	file:
res_x8	vc9.c	/^    int res_x8;           \/\/\/< reserved$/;"	m	struct:VC9Context	file:
resample_context	resample.c	/^    struct AVResampleContext *resample_context;$/;"	m	struct:ReSampleContext	file:
reserved	vc9.c	/^    int reserved;         \/\/\/< reserved$/;"	m	struct:VC9Context	file:
reset_block_lengths	wmadec.c	/^    int reset_block_lengths;$/;"	m	struct:WMADecodeContext	file:
reset_contexts	snow.c	/^static void reset_contexts(SnowContext *s){$/;"	f	file:
reset_flag	amr.c	/^    Word16 reset_flag;$/;"	m	struct:AMRContext	file:
reset_flag_old	amr.c	/^    Word16 reset_flag_old;$/;"	m	struct:AMRContext	file:
resetflag	ra144.c	/^	unsigned int	 resetflag, val, oldval;$/;"	m	file:
respic	vc9.c	/^    uint8_t respic;       \/\/\/< Frame-level flag for resized images$/;"	m	struct:VC9Context	file:
restart_count	mjpeg.c	/^    int restart_count;$/;"	m	struct:MJpegDecodeContext	file:
restart_interval	mjpeg.c	/^    int restart_interval;$/;"	m	struct:MJpegDecodeContext	file:
restore_ac_coeffs	h263.c	/^static inline void restore_ac_coeffs(MpegEncContext * s, DCTELEM block[6][64], int dir[6], uint8_t *st[6], int zigzag_last_index[6])$/;"	f	file:
restrict	common.h	61;"	d
resync_marker	mpegvideo.h	/^    int resync_marker;               \/\/\/< could this stream contain resync markers$/;"	m	struct:MpegEncContext
resync_mb_x	mpegvideo.h	/^    int resync_mb_x;                 \/\/\/< x position of last resync marker $/;"	m	struct:MpegEncContext
resync_mb_y	mpegvideo.h	/^    int resync_mb_y;                 \/\/\/< y position of last resync marker $/;"	m	struct:MpegEncContext
ret	beosthread.c	/^    int ret;$/;"	m	struct:ThreadContext	file:
ret	w32thread.c	/^    int ret;$/;"	m	struct:ThreadContext	file:
rets	pthread.c	/^    int *rets;$/;"	m	struct:ThreadContext	file:
rets_count	pthread.c	/^    int rets_count;$/;"	m	struct:ThreadContext	file:
reverse	asv1.c	/^static const uint8_t reverse[256]={$/;"	v	file:
reverse_dc_prediction	vp3.c	/^static void reverse_dc_prediction(Vp3DecodeContext *s,$/;"	f	file:
revtab	dsputil.h	/^    uint16_t *revtab;$/;"	m	struct:FFTContext
rff	vc9.c	/^    uint8_t rptfrm, tff, rff;$/;"	m	struct:VC9Context	file:
rgb	mjpeg.c	/^    int rgb;$/;"	m	struct:MJpegDecodeContext	file:
rgb24_to_yuv444p	imgconvert_template.h	/^static void rgb24_to_yuv444p(AVPicture *dst, const AVPicture *src,$/;"	f
rgb24_to_yuvj420p	imgconvert_template.h	/^static void rgb24_to_yuvj420p(AVPicture *dst, const AVPicture *src,$/;"	f
rgb24_to_yuvj444p	imgconvert_template.h	/^static void rgb24_to_yuvj444p(AVPicture *dst, const AVPicture *src,$/;"	f
rightBand	imgresample.c	/^    int topBand, bottomBand, leftBand, rightBand;$/;"	m	struct:ImgReSampleContext	file:
rl_chroma_table_index	mpegvideo.h	/^    int rl_chroma_table_index;$/;"	m	struct:MpegEncContext
rl_inter	h263data.h	/^static RLTable rl_inter = {$/;"	v
rl_intra	mpeg4data.h	/^static RLTable rl_intra = {$/;"	v
rl_intra_aic	h263data.h	/^static RLTable rl_intra_aic = {$/;"	v
rl_length	msmpeg4.c	/^static uint8_t rl_length[NB_RL_TABLES][MAX_LEVEL+1][MAX_RUN+1][2];$/;"	v	file:
rl_mpeg1	mpeg12data.h	/^static RLTable rl_mpeg1 = {$/;"	v
rl_mpeg2	mpeg12data.h	/^static RLTable rl_mpeg2 = {$/;"	v
rl_table	msmpeg4data.h	/^static RLTable rl_table[NB_RL_TABLES] = {$/;"	v
rl_table_index	mpegvideo.h	/^    int rl_table_index;$/;"	m	struct:MpegEncContext
rl_vlc	mpegvideo.h	/^    RL_VLC_ELEM *rl_vlc[32];       \/\/\/< decoding only $/;"	m	struct:RLTable
rle_unpack	vmdav.c	/^static int rle_unpack(unsigned char *src, unsigned char *dest, int len)$/;"	f	file:
rms	ra144.c	/^static unsigned int rms(int *data, int f)$/;"	f	file:
rnd_PACK	sh4/dsputil_align.c	34;"	d	file:
rnd_avg32	dsputil.h	/^static inline uint32_t rnd_avg32(uint32_t a, uint32_t b)$/;"	f
roots128	liba52/imdct.c	/^static sample_t roots128[31];$/;"	v	file:
roots16	liba52/imdct.c	/^static sample_t roots16[3];$/;"	v	file:
roots32	liba52/imdct.c	/^static sample_t roots32[7];$/;"	v	file:
roots64	liba52/imdct.c	/^static sample_t roots64[15];$/;"	v	file:
roq_cell	roqvideo.c	/^} roq_cell;$/;"	t	file:
roq_decode_end	roqvideo.c	/^static int roq_decode_end(AVCodecContext *avctx)$/;"	f	file:
roq_decode_frame	roqvideo.c	/^static int roq_decode_frame(AVCodecContext *avctx,$/;"	f	file:
roq_decode_init	roqvideo.c	/^static int roq_decode_init(AVCodecContext *avctx)$/;"	f	file:
roq_decoder	roqvideo.c	/^AVCodec roq_decoder = {$/;"	v
roq_dpcm_decoder	dpcm.c	/^AVCodec roq_dpcm_decoder = {$/;"	v
roq_qcell	roqvideo.c	/^} roq_qcell;$/;"	t	file:
roq_square_array	dpcm.c	/^    short roq_square_array[256];$/;"	m	struct:DPCMContext	file:
roqvideo_decode_frame	roqvideo.c	/^static void roqvideo_decode_frame(RoqContext *ri)$/;"	f	file:
rotate_block	ra144.c	/^static void rotate_block(short *source, short *target, int offset)$/;"	f	file:
round	i386/idct_mmx.c	35;"	d	file:
round_sample	mpegaudiodec.c	/^static inline int round_sample(int *sum)$/;"	f	file:
round_sample	mpegaudiodec.c	/^static inline int round_sample(int64_t *sum) $/;"	f	file:
round_tab	i386/motion_est_mmx.c	/^static const __attribute__ ((aligned(8))) uint64_t round_tab[3]={$/;"	v	file:
rounder	i386/idct_mmx.c	36;"	d	file:
row_fdct	faandct.c	/^static always_inline void row_fdct(FLOAT temp[64], DCTELEM * data)$/;"	f	file:
row_fdct	jfdctfst.c	/^static always_inline void row_fdct(DCTELEM * data){$/;"	f	file:
row_fdct	jfdctint.c	/^static always_inline void row_fdct(DCTELEM * data){$/;"	f	file:
row_loop	armv4l/jrevdct_arm.S	/^row_loop:$/;"	l
row_size	png.c	/^    int row_size; \/* decompressed row size *\/$/;"	m	struct:PNGContext	file:
rpcc	alpha/asm.h	145;"	d
rpcc	alpha/asm.h	84;"	d
rpcc	alpha/asm.h	98;"	d
rptfrm	vc9.c	/^    uint8_t rptfrm, tff, rff;$/;"	m	struct:VC9Context	file:
rpza_decode_end	rpza.c	/^static int rpza_decode_end(AVCodecContext *avctx)$/;"	f	file:
rpza_decode_frame	rpza.c	/^static int rpza_decode_frame(AVCodecContext *avctx,$/;"	f	file:
rpza_decode_init	rpza.c	/^static int rpza_decode_init(AVCodecContext *avctx)$/;"	f	file:
rpza_decode_stream	rpza.c	/^static void rpza_decode_stream(RpzaContext *s)$/;"	f	file:
rpza_decoder	rpza.c	/^AVCodec rpza_decoder = {$/;"	v
rtp_callback	avcodec.h	/^    void (*rtp_callback)(struct AVCodecContext *avctx, void *data, int size, int mb_nb); $/;"	m	struct:AVCodecContext
rtp_mode	avcodec.h	/^    int rtp_mode;$/;"	m	struct:AVCodecContext
rtp_mode	mpegvideo.h	/^    int rtp_mode;$/;"	m	struct:MpegEncContext
rtp_payload_size	avcodec.h	/^    int rtp_payload_size;   \/* The size of the RTP payload, the coder will  *\/$/;"	m	struct:AVCodecContext
run	bitstream.h	/^    uint8_t run;$/;"	m	struct:RL_VLC_ELEM
run	loco.c	/^    int save, run, run2; \/* internal rice decoder state *\/$/;"	m	struct:RICEContext	file:
run	svq3.c	/^static const struct { uint8_t run; uint8_t level; } svq3_dct_tables[2][16] = {$/;"	m	file:
run2	loco.c	/^    int save, run, run2; \/* internal rice decoder state *\/$/;"	m	struct:RICEContext	file:
run7_vlc	h264.c	/^static VLC run7_vlc;$/;"	v	file:
run_bits	h264data.h	/^static const uint8_t run_bits[7][16]={$/;"	v
run_index	ffv1.c	/^    int run_index;$/;"	m	struct:FFV1Context	file:
run_len	h264data.h	/^static const uint8_t run_len[7][16]={$/;"	v
run_table	wmadec.c	/^    uint16_t *run_table[2];$/;"	m	struct:WMADecodeContext	file:
run_vlc	h264.c	/^static VLC run_vlc[6];$/;"	v	file:
rv10_decode_end	rv10.c	/^static int rv10_decode_end(AVCodecContext *avctx)$/;"	f	file:
rv10_decode_frame	rv10.c	/^static int rv10_decode_frame(AVCodecContext *avctx, $/;"	f	file:
rv10_decode_init	rv10.c	/^static int rv10_decode_init(AVCodecContext *avctx)$/;"	f	file:
rv10_decode_packet	rv10.c	/^static int rv10_decode_packet(AVCodecContext *avctx, $/;"	f	file:
rv10_decode_picture_header	rv10.c	/^static int rv10_decode_picture_header(MpegEncContext *s)$/;"	f	file:
rv10_decoder	rv10.c	/^AVCodec rv10_decoder = {$/;"	v
rv10_encode_picture_header	rv10.c	/^void rv10_encode_picture_header(MpegEncContext *s, int picture_number)$/;"	f
rv10_encoder	mpegvideo.c	/^AVCodec rv10_encoder = {$/;"	v
rv10_first_dc_coded	mpegvideo.h	/^    int rv10_first_dc_coded[3];$/;"	m	struct:MpegEncContext
rv10_version	mpegvideo.h	/^    int rv10_version; \/\/\/< RV10 version: 0 or 3 $/;"	m	struct:MpegEncContext
rv20_decode_picture_header	rv10.c	/^static int rv20_decode_picture_header(MpegEncContext *s)$/;"	f	file:
rv20_decoder	rv10.c	/^AVCodec rv20_decoder = {$/;"	v
rv20_encode_picture_header	rv10.c	/^void rv20_encode_picture_header(MpegEncContext *s, int picture_number){$/;"	f
rv20_encoder	mpegvideo.c	/^AVCodec rv20_encoder = {$/;"	v
rv_chrom_bits	rv10.c	/^static const uint8_t rv_chrom_bits[256] =$/;"	v	file:
rv_chrom_code	rv10.c	/^static const uint16_t rv_chrom_code[256] =$/;"	v	file:
rv_dc_chrom	rv10.c	/^static VLC rv_dc_lum, rv_dc_chrom;$/;"	v	file:
rv_dc_lum	rv10.c	/^static VLC rv_dc_lum, rv_dc_chrom;$/;"	v	file:
rv_decode_dc	rv10.c	/^int rv_decode_dc(MpegEncContext *s, int n)$/;"	f
rv_lum_bits	rv10.c	/^static const uint8_t rv_lum_bits[256] = $/;"	v	file:
rv_lum_code	rv10.c	/^static const uint16_t rv_lum_code[256] =$/;"	v	file:
rvlc	mpegvideo.h	/^    int rvlc;                        \/\/\/< reversible vlc $/;"	m	struct:MpegEncContext
rvlc_rl_inter	mpeg4data.h	/^static RLTable rvlc_rl_inter = {$/;"	v
rvlc_rl_intra	mpeg4data.h	/^static RLTable rvlc_rl_intra = {$/;"	v
rx_type	amr.c	/^    enum RXFrameType rx_type;$/;"	m	struct:AMRContext	file:
s	eval.c	/^    char *s;$/;"	m	struct:Parser	file:
s	h261.c	/^    MpegEncContext s;$/;"	m	struct:H261Context	file:
s	h264.c	/^    MpegEncContext s;$/;"	m	struct:H264Context	file:
s	i386/mmx.h	/^	float			s[2];	\/* Single-precision (32-bit) value *\/$/;"	m
s	imgresample.c	/^    signed short s[8];$/;"	m	file:
s	vc9.c	/^    MpegEncContext s;$/;"	m	struct:VC9Context	file:
s	wmv2.c	/^    MpegEncContext s;$/;"	m	struct:Wmv2Context	file:
s0	alpha/regdef.h	16;"	d
s1	adx.c	/^    int s1,s2;$/;"	m	file:
s1	alpha/regdef.h	17;"	d
s2	adx.c	/^    int s1,s2;$/;"	m	file:
s2	alpha/regdef.h	18;"	d
s3	alpha/regdef.h	19;"	d
s4	alpha/regdef.h	20;"	d
s5	alpha/regdef.h	21;"	d
s6	alpha/regdef.h	22;"	d
sBitRates	mp3lameaudio.c	/^static const int sBitRates[2][3][15] = {$/;"	v	file:
sBitsPerSlot	mp3lameaudio.c	/^static const int sBitsPerSlot[3] = {$/;"	v	file:
sSampleRates	mp3lameaudio.c	/^static const int sSampleRates[3] = {$/;"	v	file:
sSamplesPerFrame	mp3lameaudio.c	/^static const int sSamplesPerFrame[2][3] =$/;"	v	file:
sab_diamond_search	motion_est_template.c	/^static int sab_diamond_search(MpegEncContext * s, int *best, int dmin,$/;"	f	file:
sad	dsputil.h	/^    me_cmp_func sad[5]; \/* identical to pix_absAxA except additional void * *\/$/;"	m	struct:DSPContext
sad16_altivec	ppc/dsputil_altivec.c	/^int sad16_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sad16_x2_altivec	ppc/dsputil_altivec.c	/^int sad16_x2_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sad16_xy2_altivec	ppc/dsputil_altivec.c	/^int sad16_xy2_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sad16_y2_altivec	ppc/dsputil_altivec.c	/^int sad16_y2_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sad16x16_mvi	alpha/dsputil_alpha.c	/^static int sad16x16_mvi(void *s, uint8_t *a, uint8_t *b, int stride)$/;"	f	file:
sad8_1_mmx	i386/motion_est_mmx.c	/^static inline void sad8_1_mmx(uint8_t *blk1, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_1_mmx2	i386/motion_est_mmx.c	/^static inline void sad8_1_mmx2(uint8_t *blk1, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_2_mmx	i386/motion_est_mmx.c	/^static inline void sad8_2_mmx(uint8_t *blk1a, uint8_t *blk1b, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_2_mmx2	i386/motion_est_mmx.c	/^static inline void sad8_2_mmx2(uint8_t *blk1a, uint8_t *blk1b, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_4_mmx	i386/motion_est_mmx.c	/^static inline void sad8_4_mmx(uint8_t *blk1, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_4_mmx2	i386/motion_est_mmx.c	/^static inline void sad8_4_mmx2(uint8_t *blk1, uint8_t *blk2, int stride, int h)$/;"	f	file:
sad8_altivec	ppc/dsputil_altivec.c	/^int sad8_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sad_hpel_motion_search	motion_est.c	/^static inline int sad_hpel_motion_search(MpegEncContext * s,$/;"	f	file:
same_block	snow.c	/^static always_inline int same_block(BlockNode *a, BlockNode *b){$/;"	f	file:
sample	dpcm.c	/^    long sample[2];\/\/for SOL_DPCM$/;"	m	struct:DPCMContext	file:
sample1	adpcm.c	/^    short sample1;$/;"	m	struct:ADPCMChannelStatus	file:
sample2	adpcm.c	/^    short sample2;$/;"	m	struct:ADPCMChannelStatus	file:
sample_aspect_ratio	avcodec.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVCodecContext
sample_buffer	adpcm.c	/^    short sample_buffer[32]; \/* hold left samples while waiting for right samples *\/$/;"	m	struct:ADPCMContext	file:
sample_dump	mpegaudiodec.c	/^void sample_dump(int fnum, int32_t *tab, int n)$/;"	f
sample_fmt	avcodec.h	/^    enum SampleFormat sample_fmt;  \/\/\/< sample format, currenly unused $/;"	m	struct:AVCodecContext
sample_rate	ac3enc.c	/^    unsigned int sample_rate;$/;"	m	struct:AC3EncodeContext	file:
sample_rate	avcodec.h	/^    int sample_rate; \/\/\/< samples per sec $/;"	m	struct:AVCodecContext
sample_rate	mpegaudiodec.c	/^    int sample_rate;$/;"	m	struct:MPADecodeContext	file:
sample_rate	wmadec.c	/^    int sample_rate;$/;"	m	struct:WMADecodeContext	file:
sample_rate_index	mpegaudiodec.c	/^    int sample_rate_index; \/* between 0 and 8 *\/$/;"	m	struct:MPADecodeContext	file:
sample_rate_table	flac.c	/^static int sample_rate_table[] =$/;"	v	file:
sample_size	faad.c	/^    int sample_size;$/;"	m	file:
sample_size_table	flac.c	/^static int sample_size_table[] = $/;"	v	file:
sample_t	liba52/a52.h	/^typedef double sample_t;$/;"	t
sample_t	liba52/a52.h	/^typedef float sample_t;$/;"	t
sample_t	liba52/a52.h	/^typedef int32_t sample_t;$/;"	t
samplerate	flac.c	/^    int samplerate, channels;$/;"	m	struct:FLACContext	file:
samplerate	sonic.c	/^    int channels, samplerate, block_align, frame_size;$/;"	m	struct:SonicContext	file:
samplerate_table	sonic.c	/^static int samplerate_table[] =$/;"	v	file:
samples	a52dec.c	/^    sample_t* samples;$/;"	m	struct:AC3DecodeState	file:
samples	ac3dec.c	/^stream_samples_t samples;$/;"	v
samples	liba52/a52_internal.h	/^    sample_t * samples;$/;"	m	struct:a52_state_s
samples_buf	mpegaudio.c	/^    short samples_buf[MPA_MAX_CHANNELS][SAMPLES_BUF_SIZE]; \/* buffer for filter *\/$/;"	m	struct:MpegAudioContext	file:
samples_offset	mpegaudio.c	/^    int samples_offset[MPA_MAX_CHANNELS];       \/* offset in samples_buf *\/$/;"	m	struct:MpegAudioContext	file:
samplesize	alac.c	/^    int samplesize;$/;"	m	file:
sar	dvdata.h	/^    AVRational       sar[2];              \/* sample aspect ratios for 4:3 and 16:9 *\/$/;"	m	struct:DVprofile
sar	h264.c	/^    AVRational sar;$/;"	m	struct:SPS	file:
save	loco.c	/^    int save, run, run2; \/* internal rice decoder state *\/$/;"	m	struct:RICEContext	file:
save_aspect_info	mpeg12.c	/^    int save_aspect_info;$/;"	m	struct:Mpeg1Context	file:
save_pgm	imgresample.c	/^void save_pgm(const char *filename, uint8_t *img, int xsize, int ysize)$/;"	f
sb	ra288.c	/^	float sb[41];$/;"	m	file:
sb_hybrid	mpegaudiodec.c	/^    int32_t sb_hybrid[SBLIMIT * 18]; \/* 576 samples *\/$/;"	m	struct:GranuleDef	file:
sb_samples	mpegaudio.c	/^    int sb_samples[MPA_MAX_CHANNELS][3][12][SBLIMIT];$/;"	m	struct:MpegAudioContext	file:
sb_samples	mpegaudiodec.c	/^    int32_t sb_samples[MPA_MAX_CHANNELS][36][SBLIMIT] __attribute__((aligned(16)));$/;"	m	struct:MPADecodeContext	file:
sblimit	mpegaudio.c	/^    int sblimit; \/* number of used subbands *\/$/;"	m	struct:MpegAudioContext	file:
sblimit_table	mpegaudiodectab.h	/^const int sblimit_table[5] = { 27 , 30 , 8, 12 , 30 };$/;"	v
scalability	mpegvideo.h	/^    int scalability;$/;"	m	struct:MpegEncContext
scale_code	mpegaudio.c	/^    unsigned char scale_code[MPA_MAX_CHANNELS][SBLIMIT];       $/;"	m	struct:MpegAudioContext	file:
scale_diff_table	mpegaudiotab.h	/^static unsigned char scale_diff_table[128];$/;"	v
scale_factor	liba52/tables.h	/^static const sample_t scale_factor[25] = {$/;"	v
scale_factor_inv_table	mpegaudiotab.h	/^static float scale_factor_inv_table[64];$/;"	v
scale_factor_modshift	mpegaudiodec.c	/^static uint16_t scale_factor_modshift[64];$/;"	v	file:
scale_factor_mult	mpegaudiodec.c	/^static int32_t scale_factor_mult[15][3];$/;"	v	file:
scale_factor_mult	mpegaudiotab.h	/^static unsigned short scale_factor_mult[64];$/;"	v
scale_factor_mult2	mpegaudiodec.c	/^static int32_t scale_factor_mult2[3][3] = {$/;"	v	file:
scale_factor_shift	mpegaudiotab.h	/^static int8_t scale_factor_shift[64];$/;"	v
scale_factor_table	mpegaudiotab.h	/^static int scale_factor_table[64];$/;"	v
scale_factors	mpegaudio.c	/^    unsigned char scale_factors[MPA_MAX_CHANNELS][SBLIMIT][3]; \/* scale factors *\/$/;"	m	struct:MpegAudioContext	file:
scale_factors	mpegaudiodec.c	/^    uint8_t scale_factors[40];$/;"	m	struct:GranuleDef	file:
scale_huffbits	wmadata.h	/^static const uint8_t scale_huffbits[121] = {$/;"	v
scale_huffcodes	wmadata.h	/^static const uint32_t scale_huffcodes[121] = {$/;"	v
scalefac_compress	mpegaudiodec.c	/^    int scalefac_compress;$/;"	m	struct:GranuleDef	file:
scalefac_scale	mpegaudiodec.c	/^    uint8_t scalefac_scale;$/;"	m	struct:GranuleDef	file:
scan8	h264data.h	/^static const uint8_t scan8[16 + 2*4]={$/;"	v
scan_table	dv.c	/^    const uint8_t *scan_table;$/;"	m	struct:BlockInfo	file:
scantab	asv1.c	/^static const uint8_t scantab[64]={$/;"	v	file:
scantable	asv1.c	/^    ScanTable scantable;$/;"	m	struct:ASV1Context	file:
scantable	mdec.c	/^    ScanTable scantable;$/;"	m	struct:MDECContext	file:
scantable	mjpeg.c	/^    ScanTable scantable;$/;"	m	struct:MJpegDecodeContext	file:
scantable	mpegvideo.h	/^    const uint8_t *scantable;$/;"	m	struct:ScanTable
scene_change_score	mpegvideo.h	/^    int scene_change_score;$/;"	m	struct:MotionEstContext
scenechange_threshold	avcodec.h	/^    int scenechange_threshold;$/;"	m	struct:AVCodecContext
scfsi	mpegaudiodec.c	/^    uint8_t scfsi;$/;"	m	struct:GranuleDef	file:
score_map	mpegvideo.h	/^    uint32_t *score_map;               \/\/\/< map to store the scores $/;"	m	struct:MotionEstContext
scratchpad	mpegvideo.h	/^    uint8_t *scratchpad;               \/\/\/< data area for the me algo, so that the ME doesnt need to malloc\/free $/;"	m	struct:MotionEstContext
sd3	ps2/mmi.h	70;"	d
sdecay	ac3.h	/^    int sgain, sdecay, fdecay, dbknee, floor;$/;"	m	struct:AC3BitAllocParameters
sdecaycod	ac3enc.c	/^    int sgaincod, sdecaycod, fdecaycod, dbkneecod, floorcod; $/;"	m	struct:AC3EncodeContext	file:
sdecaytab	ac3tab.h	/^static const uint8_t sdecaytab[4]={ $/;"	v
se	g726.c	/^	 int se;              \/**< estimated signal for the next iteration *\/$/;"	m	struct:G726Context	file:
second_last_frame	interplayvideo.c	/^    AVFrame second_last_frame;$/;"	m	struct:IpvideoContext	file:
seek_to_maindata	mpegaudiodec.c	/^static void seek_to_maindata(MPADecodeContext *s, unsigned int backstep)$/;"	f	file:
select_delta_tables	truemotion1.c	/^static void select_delta_tables(TrueMotion1Context *s, int delta_table_index)$/;"	f	file:
select_input_picture	mpegvideo.c	/^static void select_input_picture(MpegEncContext *s){$/;"	f	file:
sem	beosthread.c	/^	sem_id sem;$/;"	m	struct:benaphore	file:
set_blocks	snow.c	/^static inline void set_blocks(SnowContext *s, int level, int x, int y, int l, int cb, int cr, int mx, int my, int type){$/;"	f	file:
set_p_mv_tables	motion_est.c	/^static inline void set_p_mv_tables(MpegEncContext * s, int mx, int my, int mv4)$/;"	f	file:
set_put_bits_buffer_size	bitstream.h	/^static inline void set_put_bits_buffer_size(PutBitContext *s, int size){$/;"	f
set_se_golomb	golomb.h	/^static inline void set_se_golomb(PutBitContext *pb, int i){$/;"	f
set_sr_golomb	golomb.h	/^static inline void set_sr_golomb(PutBitContext *pb, int i, int k, int limit, int esc_len){$/;"	f
set_sr_golomb_flac	golomb.h	/^static inline void set_sr_golomb_flac(PutBitContext *pb, int i, int k, int limit, int esc_len){$/;"	f
set_stat	msmpeg4.c	108;"	d	file:
set_stat	msmpeg4.c	152;"	d	file:
set_te_golomb	golomb.h	/^static inline void set_te_golomb(PutBitContext *pb, int i, int range){$/;"	f
set_ue_golomb	golomb.h	/^static inline void set_ue_golomb(PutBitContext *pb, int i){$/;"	f
set_ur_golomb	golomb.h	/^static inline void set_ur_golomb(PutBitContext *pb, int i, int k, int limit, int esc_len){$/;"	f
set_ur_golomb_jpegls	golomb.h	/^static inline void set_ur_golomb_jpegls(PutBitContext *pb, int i, int k, int limit, int esc_len){$/;"	f
setinfo_7a	alac.c	/^    uint8_t setinfo_7a; \/* 0x00 *\/$/;"	m	file:
setinfo_7f	alac.c	/^    uint8_t setinfo_7f; \/* 0x02 *\/$/;"	m	file:
setinfo_80	alac.c	/^    uint16_t setinfo_80; \/* 0x00ff *\/$/;"	m	file:
setinfo_82	alac.c	/^    uint32_t setinfo_82; \/* 0x000020e7 *\/$/;"	m	file:
setinfo_86	alac.c	/^    uint32_t setinfo_86; \/* 0x00069fe4 *\/$/;"	m	file:
setinfo_8a_rate	alac.c	/^    uint32_t setinfo_8a_rate; \/* 0x0000ac44 *\/$/;"	m	file:
setinfo_max_samples_per_frame	alac.c	/^    uint32_t setinfo_max_samples_per_frame; \/* 0x1000 = 4096 *\/    \/* max samples per frame? *\/$/;"	m	file:
setinfo_rice_historymult	alac.c	/^    uint8_t setinfo_rice_historymult; \/* 0x28 *\/$/;"	m	file:
setinfo_rice_initialhistory	alac.c	/^    uint8_t setinfo_rice_initialhistory; \/* 0x0a *\/$/;"	m	file:
setinfo_rice_kmodifier	alac.c	/^    uint8_t setinfo_rice_kmodifier; \/* 0x0e *\/$/;"	m	file:
setinfo_sample_size	alac.c	/^    uint8_t setinfo_sample_size; \/* 0x10 *\/$/;"	m	file:
sextw	alpha/asm.h	63;"	d
sez	g726.c	/^	 int sez;             \/**< estimated second order prediction *\/$/;"	m	struct:G726Context	file:
sfence	i386/mmx.h	247;"	d
sgain	ac3.h	/^    int sgain, sdecay, fdecay, dbknee, floor;$/;"	m	struct:AC3BitAllocParameters
sgaincod	ac3enc.c	/^    int sgaincod, sdecaycod, fdecaycod, dbkneecod, floorcod; $/;"	m	struct:AC3EncodeContext	file:
sgaintab	ac3tab.h	/^static const uint16_t sgaintab[4]= { $/;"	v
sgn	g726.c	/^static inline int sgn(int value)$/;"	f	file:
shape	mpegvideo.h	/^    int shape;$/;"	m	struct:MpegEncContext
shift	sonic.c	/^static inline int shift(int a,int b)$/;"	f	file:
shift_down	sonic.c	/^static inline int shift_down(int a,int b)$/;"	f	file:
shift_offset	dv.c	/^    int shift_offset;$/;"	m	struct:BlockInfo	file:
shift_table	dv.c	/^    const uint8_t *shift_table;$/;"	m	struct:BlockInfo	file:
shortName	libpostproc/postprocess_internal.h	/^	char *shortName;$/;"	m	struct:PPFilter
short_frame_num	h264.c	/^    int short_frame_num;$/;"	m	struct:MMCO	file:
short_ref	h264.c	/^    Picture *short_ref[16];$/;"	m	struct:H264Context	file:
short_ref_count	h264.c	/^    int short_ref_count; \/\/\/< number of actual short term references$/;"	m	struct:H264Context	file:
short_start	mpegaudiodec.c	/^    int short_start, long_end; \/* long\/short band indexes *\/$/;"	m	struct:GranuleDef	file:
short_term_qcount	mpegvideo.h	/^    double short_term_qcount;     \/\/\/< count of recent qscales $/;"	m	struct:RateControlContext
short_term_qsum	mpegvideo.h	/^    double short_term_qsum;       \/\/\/< sum of recent qscales $/;"	m	struct:RateControlContext
shorten_decode_close	shorten.c	/^static int shorten_decode_close(AVCodecContext *avctx)$/;"	f	file:
shorten_decode_frame	shorten.c	/^static int shorten_decode_frame(AVCodecContext *avctx,$/;"	f	file:
shorten_decode_init	shorten.c	/^static int shorten_decode_init(AVCodecContext * avctx)$/;"	f	file:
shorten_decoder	shorten.c	/^AVCodec shorten_decoder = {$/;"	v
shorten_flush	shorten.c	/^static void shorten_flush(AVCodecContext *avctx){$/;"	f	file:
show_bits	bitstream.h	/^static inline unsigned int show_bits(GetBitContext *s, int n){$/;"	f
show_bits1	bitstream.h	/^static inline unsigned int show_bits1(GetBitContext *s){$/;"	f
show_bits_long	bitstream.c	/^unsigned int show_bits_long(GetBitContext *s, int n){$/;"	f
shrink12	imgconvert.c	/^static void shrink12(uint8_t *dst, int dst_wrap, $/;"	f	file:
shrink21	imgconvert.c	/^static void shrink21(uint8_t *dst, int dst_wrap, $/;"	f	file:
shrink22	imgconvert.c	/^static void shrink22(uint8_t *dst, int dst_wrap, $/;"	f	file:
shrink41	imgconvert.c	/^static void shrink41(uint8_t *dst, int dst_wrap, $/;"	f	file:
shrink44	imgconvert.c	/^static void shrink44(uint8_t *dst, int dst_wrap, $/;"	f	file:
sidstate	amr.c	/^    sid_syncState *sidstate;$/;"	m	struct:AMRContext	file:
sigill_handler	ppc/dsputil_altivec.c	/^static void sigill_handler (int sig)$/;"	f	file:
sigill_handler	sparc/dsputil_vis.c	/^static void sigill_handler (int sig)$/;"	f	file:
sign	g726.c	/^	int sign;   \/**< 1bit sign *\/$/;"	m	struct:Float11	file:
simple_idct	simple_idct.c	/^void simple_idct(DCTELEM *block)$/;"	f
simple_idct248_put	simple_idct.c	/^void simple_idct248_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct48_add	simple_idct.c	/^void simple_idct48_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct84_add	simple_idct.c	/^void simple_idct84_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct_ARM	armv4l/simple_idct_arm.S	/^simple_idct_ARM:$/;"	l
simple_idct_ARM_add	armv4l/dsputil_arm.c	/^static void simple_idct_ARM_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
simple_idct_ARM_put	armv4l/dsputil_arm.c	/^static void simple_idct_ARM_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f	file:
simple_idct_add	simple_idct.c	/^void simple_idct_add(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct_add_axp	alpha/simple_idct_alpha.c	/^void simple_idct_add_axp(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct_axp	alpha/simple_idct_alpha.c	/^void simple_idct_axp(DCTELEM *block)$/;"	f
simple_idct_put	simple_idct.c	/^void simple_idct_put(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_idct_put_axp	alpha/simple_idct_alpha.c	/^void simple_idct_put_axp(uint8_t *dest, int line_size, DCTELEM *block)$/;"	f
simple_mmx_permutation	dsputil.c	/^static const uint8_t simple_mmx_permutation[64]={$/;"	v	file:
sintab	ac3tab.h	/^static int16_t sintab[64];$/;"	v
size	4xm.c	/^    int size;$/;"	m	struct:CFrameBuffer	file:
size	cinepak.c	/^    int size;$/;"	m	struct:CinepakContext	file:
size	dv.c	/^   uint8_t  size;$/;"	m	struct:dv_vlc_pair	file:
size	idcinvideo.c	/^    int size;$/;"	m	struct:IdcinContext	file:
size	interplayvideo.c	/^    int size;$/;"	m	struct:IpvideoContext	file:
size	msrle.c	/^    int size;$/;"	m	struct:MsrleContext	file:
size	msvideo1.c	/^    int size;$/;"	m	struct:Msvideo1Context	file:
size	qtrle.c	/^    int size;$/;"	m	struct:QtrleContext	file:
size	roqvideo.c	/^    int size;$/;"	m	struct:RoqContext	file:
size	rpza.c	/^    int size;$/;"	m	struct:RpzaContext	file:
size	smc.c	/^    int size;$/;"	m	struct:SmcContext	file:
size	truemotion1.c	/^    int size;$/;"	m	struct:TrueMotion1Context	file:
size	vmdav.c	/^    int size;$/;"	m	struct:VmdVideoContext	file:
size	vqavideo.c	/^    int size;$/;"	m	struct:VqaContext	file:
size	xan.c	/^    int size;$/;"	m	struct:XanContext	file:
size2index	4xm.c	/^static const uint8_t size2index[4][4]={$/;"	v	file:
size_in_bits	bitstream.h	/^    int size_in_bits;$/;"	m	struct:GetBitContext
skip	mpegvideo.h	/^    int skip;                          \/\/\/< set if ME is skiped for the current MB $/;"	m	struct:MotionEstContext
skip_bits	bitstream.h	/^static inline void skip_bits(GetBitContext *s, int n){$/;"	f
skip_bits1	bitstream.h	/^static inline void skip_bits1(GetBitContext *s){$/;"	f
skip_bottom	avcodec.h	/^     int skip_bottom;$/;"	m	struct:AVCodecContext
skip_check	mpegvideo.c	/^static int skip_check(MpegEncContext *s, Picture *p, Picture *ref){$/;"	f	file:
skip_count	avcodec.h	/^    int skip_count;$/;"	m	struct:AVCodecContext
skip_count	mpegvideo.h	/^    int skip_count;$/;"	m	struct:MpegEncContext
skip_mb_plane	vc9.c	/^    BitPlane skip_mb_plane;       \/\/\/< bitplane for skipped MBs$/;"	m	struct:VC9Context	file:
skip_put_bits	bitstream.h	/^static inline void skip_put_bits(PutBitContext *s, int n){$/;"	f
skip_put_bytes	bitstream.h	/^static inline void skip_put_bytes(PutBitContext *s, int n){$/;"	f
skip_top	avcodec.h	/^     int skip_top;$/;"	m	struct:AVCodecContext
skip_type	wmv2.c	/^    int skip_type;$/;"	m	struct:Wmv2Context	file:
slen_table	mpegaudiodectab.h	/^static const uint8_t slen_table[2][16] = {$/;"	v
slev	liba52/a52_internal.h	/^    level_t slev;		\/* surround channels mix level *\/$/;"	m	struct:a52_state_s
slice_alpha_c0_offset	h264.c	/^    int slice_alpha_c0_offset;$/;"	m	struct:H264Context	file:
slice_beta_offset	h264.c	/^    int slice_beta_offset;$/;"	m	struct:H264Context	file:
slice_count	avcodec.h	/^    int slice_count;$/;"	m	struct:AVCodecContext
slice_count	mpeg12.c	/^    int slice_count;$/;"	m	struct:Mpeg1Context	file:
slice_decode_thread	mpeg12.c	/^static int slice_decode_thread(AVCodecContext *c, void *arg){$/;"	f	file:
slice_end	mpeg12.c	/^static int slice_end(AVCodecContext *avctx, AVFrame *pict)$/;"	f	file:
slice_flags	avcodec.h	/^    int slice_flags;$/;"	m	struct:AVCodecContext
slice_group_count	h264.c	/^    int slice_group_count;      \/\/\/< num_slice_groups_minus1 + 1$/;"	m	struct:PPS	file:
slice_height	mpegvideo.h	/^    int slice_height;      \/\/\/< in macroblocks $/;"	m	struct:MpegEncContext
slice_num	h264.c	/^    int slice_num;$/;"	m	struct:H264Context	file:
slice_offset	avcodec.h	/^    int *slice_offset;$/;"	m	struct:AVCodecContext
slice_table	h264.c	/^    uint8_t *slice_table;      \/\/\/< slice_table_base + mb_stride + 1$/;"	m	struct:H264Context	file:
slice_table_base	h264.c	/^    uint8_t *slice_table_base;$/;"	m	struct:H264Context	file:
slice_type	h264.c	/^    int slice_type;$/;"	m	struct:H264Context	file:
slice_type_fixed	h264.c	/^    int slice_type_fixed;$/;"	m	struct:H264Context	file:
small_diamond_search	motion_est_template.c	/^static always_inline int small_diamond_search(MpegEncContext * s, int *best, int dmin,$/;"	f	file:
smc_decode_end	smc.c	/^static int smc_decode_end(AVCodecContext *avctx)$/;"	f	file:
smc_decode_frame	smc.c	/^static int smc_decode_frame(AVCodecContext *avctx,$/;"	f	file:
smc_decode_init	smc.c	/^static int smc_decode_init(AVCodecContext *avctx)$/;"	f	file:
smc_decode_stream	smc.c	/^static void smc_decode_stream(SmcContext *s)$/;"	f	file:
smc_decoder	smc.c	/^AVCodec smc_decoder = {$/;"	v
snow_decoder	snow.c	/^AVCodec snow_decoder = {$/;"	v
snow_encoder	snow.c	/^AVCodec snow_encoder = {$/;"	v
snprintf	common.h	173;"	d
sol_dpcm_decoder	dpcm.c	/^AVCodec sol_dpcm_decoder = {$/;"	v
sol_table	dpcm.c	/^    int *sol_table;\/\/for SOL_DPCM$/;"	m	struct:DPCMContext	file:
sol_table_16	dpcm.c	/^static int sol_table_16[128] = {$/;"	v	file:
sol_table_new	dpcm.c	/^static int sol_table_new[16] =$/;"	v	file:
sol_table_old	dpcm.c	/^static int sol_table_old[16] =$/;"	v	file:
sonic_decode_close	sonic.c	/^static int sonic_decode_close(AVCodecContext *avctx)$/;"	f	file:
sonic_decode_frame	sonic.c	/^static int sonic_decode_frame(AVCodecContext *avctx,$/;"	f	file:
sonic_decode_init	sonic.c	/^static int sonic_decode_init(AVCodecContext *avctx)$/;"	f	file:
sonic_decoder	sonic.c	/^AVCodec sonic_decoder = {$/;"	v
sonic_encode_close	sonic.c	/^static int sonic_encode_close(AVCodecContext *avctx)$/;"	f	file:
sonic_encode_frame	sonic.c	/^static int sonic_encode_frame(AVCodecContext *avctx,$/;"	f	file:
sonic_encode_init	sonic.c	/^static int sonic_encode_init(AVCodecContext *avctx)$/;"	f	file:
sonic_encoder	sonic.c	/^AVCodec sonic_encoder = {$/;"	v
sonic_ls_encoder	sonic.c	/^AVCodec sonic_ls_encoder = {$/;"	v
sp	alpha/regdef.h	42;"	d
sp5x_data_dht	sp5x.h	/^static uint8_t sp5x_data_dht[] = {   $/;"	v
sp5x_data_dqt	sp5x.h	/^static uint8_t sp5x_data_dqt[] =$/;"	v
sp5x_data_sof	sp5x.h	/^static uint8_t sp5x_data_sof[] =$/;"	v
sp5x_data_sos	sp5x.h	/^static uint8_t sp5x_data_sos[] =$/;"	v
sp5x_decode_frame	mjpeg.c	/^static int sp5x_decode_frame(AVCodecContext *avctx, $/;"	f	file:
sp5x_decoder	mjpeg.c	/^AVCodec sp5x_decoder = {$/;"	v
sp5x_quant_table	sp5x.h	/^static uint8_t sp5x_quant_table[20][64]=$/;"	v
spatial_compose53i	snow.c	/^static void spatial_compose53i(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_compose53i_dy	snow.c	/^static void spatial_compose53i_dy(dwt_compose_t *cs, DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_compose53i_init	snow.c	/^static void spatial_compose53i_init(dwt_compose_t *cs, DWTELEM *buffer, int height, int stride){$/;"	f	file:
spatial_compose97i	snow.c	/^static void spatial_compose97i(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_compose97i_dy	snow.c	/^static void spatial_compose97i_dy(dwt_compose_t *cs, DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_compose97i_init	snow.c	/^static void spatial_compose97i_init(dwt_compose_t *cs, DWTELEM *buffer, int height, int stride){$/;"	f	file:
spatial_composeX	snow.c	/^static void spatial_composeX(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_cplx_masking	avcodec.h	/^    float spatial_cplx_masking;$/;"	m	struct:AVCodecContext
spatial_decompose53i	snow.c	/^static void spatial_decompose53i(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_decompose97i	snow.c	/^static void spatial_decompose97i(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_decomposeX	snow.c	/^static void spatial_decomposeX(DWTELEM *buffer, int width, int height, int stride){$/;"	f	file:
spatial_decomposition_count	snow.c	/^    int spatial_decomposition_count;$/;"	m	struct:SnowContext	file:
spatial_decomposition_type	snow.c	/^    int spatial_decomposition_type;$/;"	m	struct:SnowContext	file:
spatial_dwt_buffer	snow.c	/^    DWTELEM *spatial_dwt_buffer;$/;"	m	struct:SnowContext	file:
spatial_scalability	snow.c	/^    int spatial_scalability;$/;"	m	struct:SnowContext	file:
speech_decoder_state	amr.c	/^    Speech_Decode_FrameState *speech_decoder_state;$/;"	m	struct:AMRContext	file:
split_direction	indeo3.c	/^  long split_direction;$/;"	m	file:
split_flag	indeo3.c	/^  long split_flag;$/;"	m	file:
sprintf	common.h	502;"	d
sprite_brightness_change	mpegvideo.h	/^    int sprite_brightness_change;$/;"	m	struct:MpegEncContext
sprite_delta	mpegvideo.h	/^    int sprite_delta[2][2];          \/\/\/< sprite_delta [isY][isMVY]  $/;"	m	struct:MpegEncContext
sprite_height	mpegvideo.h	/^    int sprite_height;$/;"	m	struct:MpegEncContext
sprite_left	mpegvideo.h	/^    int sprite_left;$/;"	m	struct:MpegEncContext
sprite_offset	mpegvideo.h	/^    int sprite_offset[2][2];         \/\/\/< sprite offset[isChroma][isMVY] $/;"	m	struct:MpegEncContext
sprite_shift	mpegvideo.h	/^    int sprite_shift[2];             \/\/\/< sprite shift [isChroma] $/;"	m	struct:MpegEncContext
sprite_top	mpegvideo.h	/^    int sprite_top;$/;"	m	struct:MpegEncContext
sprite_trajectory	h263.c	/^static VLC sprite_trajectory;$/;"	v	file:
sprite_trajectory_tab	mpeg4data.h	/^static const uint16_t sprite_trajectory_tab[15][2] = {$/;"	v
sprite_warping_accuracy	mpegvideo.h	/^    int sprite_warping_accuracy;$/;"	m	struct:MpegEncContext
sprite_width	mpegvideo.h	/^    int sprite_width;$/;"	m	struct:MpegEncContext
sps	h264.c	/^    SPS sps; \/\/\/< current sps$/;"	m	struct:H264Context	file:
sps_buffer	h264.c	/^    SPS sps_buffer[MAX_SPS_COUNT];$/;"	m	struct:H264Context	file:
sps_id	h264.c	/^    int sps_id;$/;"	m	struct:PPS	file:
sptr	ra144.c	/^	unsigned short *sptr;$/;"	m	file:
sq	ps2/mmi.h	48;"	d
sq2	ps2/mmi.h	76;"	d
sqrt_table	ra144.h	/^static const unsigned short sqrt_table[4096]={$/;"	v
squareTbl	dsputil.c	/^uint32_t squareTbl[512] = {0, };$/;"	v
sr	g726.c	/^	 Float11 sr[2];       \/**< prev. reconstructed samples *\/$/;"	m	struct:G726Context	file:
srand	common.h	501;"	d
src	mpegvideo.h	/^    uint8_t *src[4][4];$/;"	m	struct:MotionEstContext
src_incr	resample2.c	/^    int src_incr;$/;"	m	struct:AVResampleContext	file:
sse	dsputil.h	/^    me_cmp_func sse[5];$/;"	m	struct:DSPContext
sse	mpegvideo.c	/^static int sse(MpegEncContext *s, uint8_t *src1, uint8_t *src2, int w, int h, int stride){$/;"	f	file:
sse16_altivec	ppc/dsputil_altivec.c	/^int sse16_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sse16_c	dsputil.c	/^static int sse16_c(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f	file:
sse16_mmx	i386/dsputil_mmx.c	/^static int sse16_mmx(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
sse4_c	dsputil.c	/^static int sse4_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h)$/;"	f	file:
sse8_altivec	ppc/dsputil_altivec.c	/^int sse8_altivec(void *v, uint8_t *pix1, uint8_t *pix2, int line_size, int h)$/;"	f
sse8_c	dsputil.c	/^static int sse8_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h)$/;"	f	file:
sse8_mmx	i386/dsputil_mmx.c	/^static int sse8_mmx(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
sse_mb	mpegvideo.c	/^static int sse_mb(MpegEncContext *s){$/;"	f	file:
st1	ra288.c	/^	float st1a[111],st1b[37],st1[37];$/;"	m	file:
st1a	ra288.c	/^	float st1a[111],st1b[37],st1[37];$/;"	m	file:
st1b	ra288.c	/^	float st1a[111],st1b[37],st1[37];$/;"	m	file:
st2	ra288.c	/^	float st2a[38],st2b[11],st2[11];$/;"	m	file:
st2a	ra288.c	/^	float st2a[38],st2b[11],st2[11];$/;"	m	file:
st2b	ra288.c	/^	float st2a[38],st2b[11],st2[11];$/;"	m	file:
st_bit_counts	msmpeg4.c	/^unsigned int st_bit_counts[ST_NB];$/;"	v
st_current_index	msmpeg4.c	/^int st_current_index = 0;$/;"	v
st_names	msmpeg4.c	/^const char *st_names[ST_NB] = {$/;"	v
st_out_bit_counts	msmpeg4.c	/^unsigned int st_out_bit_counts[ST_NB];$/;"	v
stack_index	eval.c	/^    int stack_index;$/;"	m	struct:Parser	file:
standard_decode_mbs	vc9.c	/^static int standard_decode_mbs(VC9Context *v)$/;"	f	file:
standard_decode_picture_primary_header	vc9.c	/^static int standard_decode_picture_primary_header(VC9Context *v)$/;"	f	file:
standard_decode_picture_secondary_header	vc9.c	/^static int standard_decode_picture_secondary_header(VC9Context *v)$/;"	f	file:
start_code	mjpeg.c	/^    int start_code; \/* current start code *\/$/;"	m	struct:MJpegDecodeContext	file:
start_column_loop	armv4l/jrevdct_arm.S	/^start_column_loop:$/;"	l
start_frame	avcodec.h	/^    int start_frame;$/;"	m	struct:RcOverride
start_mb_y	mpegvideo.h	/^    int start_mb_y;            \/\/\/< start mb_y of this thread (so current thread should process start_mb_y <= row < end_mb_y)$/;"	m	struct:MpegEncContext
startrate	amr.c	/^    int startrate;$/;"	m	struct:AMRWB_bitrates	file:
startrate	amr.c	/^    int startrate;$/;"	m	struct:AMR_bitrates	file:
state	a52dec.c	/^    a52_state_t* state;$/;"	m	struct:AC3DecodeState	file:
state	ac3dec.c	/^    ac3_state_t state;$/;"	m	struct:AC3DecodeState	file:
state	amr.c	/^    void *state;$/;"	m	struct:AMRWBContext	file:
state	ffv1.c	/^    uint8_t (*state)[CONTEXT_SIZE];$/;"	m	struct:PlaneContext	file:
state	mpegvideo.h	/^    uint32_t state;             \/\/\/< contains the last few bytes in MSB order$/;"	m	struct:ParseContext
state	png.c	/^    int state;$/;"	m	struct:PNGContext	file:
state	snow.c	/^    uint8_t state[\/*7*2*\/ 7 + 512][32];$/;"	m	struct:SubBand	file:
stats	huffyuv.c	/^    uint64_t stats[3][256];$/;"	m	struct:HYuvContext	file:
stats_file	mpegvideo.h	/^    FILE *stats_file;$/;"	m	struct:RateControlContext
stats_in	avcodec.h	/^    char *stats_in;$/;"	m	struct:AVCodecContext
stats_out	avcodec.h	/^    char *stats_out;$/;"	m	struct:AVCodecContext
status	adpcm.c	/^    ADPCMChannelStatus status[2];$/;"	m	struct:ADPCMContext	file:
stdQPTable	libpostproc/postprocess_internal.h	/^	QP_STORE_T *stdQPTable;       \/\/\/< used to fix MPEG2 style qscale$/;"	m	struct:PPContext
step	adpcm.c	/^    int step;$/;"	m	struct:ADPCMChannelStatus	file:
step_index	adpcm.c	/^    short int step_index;$/;"	m	struct:ADPCMChannelStatus	file:
step_table	adpcm.c	/^static const int step_table[89] = {$/;"	v	file:
steps128	vmdav.c	/^    unsigned short steps128[256];$/;"	m	struct:VmdAudioContext	file:
steps16	vmdav.c	/^    unsigned short steps16[16];$/;"	m	struct:VmdAudioContext	file:
steps8	vmdav.c	/^    unsigned char steps8[16];$/;"	m	struct:VmdAudioContext	file:
stereo	mp3lameaudio.c	/^	int stereo;$/;"	m	struct:Mp3AudioContext	file:
stereo_mux	resample.c	/^static void stereo_mux(short *output, short *input1, short *input2, int n)$/;"	f	file:
stereo_split	resample.c	/^static void stereo_split(short *output1, short *output2, short *input, int n)$/;"	f	file:
stereo_to_mono	resample.c	/^static void stereo_to_mono(short *output, short *input, int n1)$/;"	f	file:
stl	alpha/asm.h	61;"	d
stoprate	amr.c	/^    int stoprate;$/;"	m	struct:AMRWB_bitrates	file:
stoprate	amr.c	/^    int stoprate;$/;"	m	struct:AMR_bitrates	file:
store_table	huffyuv.c	/^static int store_table(HYuvContext *s, uint8_t *len, uint8_t *buf){$/;"	f	file:
stq	alpha/asm.h	62;"	d
strcat	common.h	503;"	d
stream_codec_tag	avcodec.h	/^    unsigned int stream_codec_tag;$/;"	m	struct:AVCodecContext
stream_end	interplayvideo.c	/^    unsigned char *stream_end;$/;"	m	struct:IpvideoContext	file:
stream_ptr	interplayvideo.c	/^    unsigned char *stream_ptr;$/;"	m	struct:IpvideoContext	file:
strict_std_compliance	avcodec.h	/^    int strict_std_compliance;$/;"	m	struct:AVCodecContext
strict_std_compliance	mpegvideo.h	/^    int strict_std_compliance; \/\/\/< strictly follow the std (MPEG4, ...) $/;"	m	struct:MpegEncContext
stride	h264.c	1540;"	d	file:
stride	h264.c	1616;"	d	file:
stride	interplayvideo.c	/^    int stride;$/;"	m	struct:IpvideoContext	file:
stride	libpostproc/postprocess_internal.h	/^	int stride;   \/\/\/<size of some buffers (needed to realloc them if needed)$/;"	m	struct:PPContext
stride	mpegvideo.h	/^    int stride;$/;"	m	struct:MotionEstContext
stride	snow.c	/^    int stride;$/;"	m	struct:SubBand	file:
stride	svq3.c	111;"	d	file:
stride	svq3.c	143;"	d	file:
stride	vc9.c	/^    int stride;         \/\/\/< Stride of the buffer$/;"	m	struct:BitPlane	file:
string_table	svq1.c	/^static const uint8_t string_table[256] = {$/;"	v	file:
strips	cinepak.c	/^    cvid_strip_t strips[MAX_STRIPS];$/;"	m	struct:CinepakContext	file:
strmatch	eval.c	/^static int strmatch(const char *s, const char *prefix){$/;"	f	file:
sub_flags	mpegvideo.h	/^    int sub_flags;$/;"	m	struct:MotionEstContext
sub_hfyu_median_prediction	dsputil.h	/^    void (*sub_hfyu_median_prediction)(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w, int *left, int *left_top);$/;"	m	struct:DSPContext
sub_hfyu_median_prediction_c	dsputil.c	/^static void sub_hfyu_median_prediction_c(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w, int *left, int *left_top){$/;"	f	file:
sub_hfyu_median_prediction_mmx2	i386/dsputil_mmx.c	/^static void sub_hfyu_median_prediction_mmx2(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w, int *left, int *left_top){$/;"	f	file:
sub_id	avcodec.h	/^    int sub_id;$/;"	m	struct:AVCodecContext
sub_left_prediction	huffyuv.c	/^static inline int sub_left_prediction(HYuvContext *s, uint8_t *dst, uint8_t *src, int w, int left){$/;"	f	file:
sub_mb_type	h264.c	/^    int sub_mb_type[4];$/;"	m	struct:H264Context	file:
sub_motion_search	mpegvideo.h	/^    int (*sub_motion_search)(struct MpegEncContext * s,$/;"	m	struct:MotionEstContext
sub_penalty_factor	mpegvideo.h	/^    int sub_penalty_factor;$/;"	m	struct:MotionEstContext
subblock_gain	mpegaudiodec.c	/^    int subblock_gain[3];$/;"	m	struct:GranuleDef	file:
sum	loco.c	/^    int sum, count; \/* sum and count for getting rice parameter *\/$/;"	m	struct:RICEContext	file:
sum_mmx	i386/motion_est_mmx.c	/^static inline int sum_mmx(void)$/;"	f	file:
sum_mmx2	i386/motion_est_mmx.c	/^static inline int sum_mmx2(void)$/;"	f	file:
superblock_coding	vp3.c	/^    unsigned char *superblock_coding;$/;"	m	struct:Vp3DecodeContext	file:
superblock_count	vp3.c	/^    int superblock_count;$/;"	m	struct:Vp3DecodeContext	file:
superblock_fragments	vp3.c	/^    int *superblock_fragments;$/;"	m	struct:Vp3DecodeContext	file:
superblock_height	vp3.c	/^    int superblock_height;$/;"	m	struct:Vp3DecodeContext	file:
superblock_macroblocks	vp3.c	/^    int *superblock_macroblocks;$/;"	m	struct:Vp3DecodeContext	file:
superblock_width	vp3.c	/^    int superblock_width;$/;"	m	struct:Vp3DecodeContext	file:
supported_framerates	avcodec.h	/^    const AVRational *supported_framerates; \/\/\/array of supported framerates, or NULL if any, array is terminated by {0,0}$/;"	m	struct:AVCodec
svcd_scan_offset_placeholder	mpeg12data.h	/^static const uint8_t svcd_scan_offset_placeholder[14]={$/;"	v
svq1_block_type	svq1.c	/^static VLC svq1_block_type;$/;"	v	file:
svq1_block_type_vlc	svq1_vlc.h	/^static const uint8_t svq1_block_type_vlc[4][2] = {$/;"	v
svq1_decode_block_intra	svq1.c	/^static int svq1_decode_block_intra (GetBitContext *bitbuf, uint8_t *pixels, int pitch ) {$/;"	f	file:
svq1_decode_block_non_intra	svq1.c	/^static int svq1_decode_block_non_intra (GetBitContext *bitbuf, uint8_t *pixels, int pitch ) {$/;"	f	file:
svq1_decode_delta_block	svq1.c	/^static int svq1_decode_delta_block (MpegEncContext *s, GetBitContext *bitbuf,$/;"	f	file:
svq1_decode_end	svq1.c	/^static int svq1_decode_end(AVCodecContext *avctx)$/;"	f	file:
svq1_decode_frame	svq1.c	/^static int svq1_decode_frame(AVCodecContext *avctx, $/;"	f	file:
svq1_decode_frame_header	svq1.c	/^static int svq1_decode_frame_header (GetBitContext *bitbuf,MpegEncContext *s) {$/;"	f	file:
svq1_decode_init	svq1.c	/^static int svq1_decode_init(AVCodecContext *avctx)$/;"	f	file:
svq1_decode_motion_vector	svq1.c	/^static int svq1_decode_motion_vector (GetBitContext *bitbuf, svq1_pmv_t *mv, svq1_pmv_t **pmv) {$/;"	f	file:
svq1_decoder	svq1.c	/^AVCodec svq1_decoder = {$/;"	v
svq1_encode_end	svq1.c	/^static int svq1_encode_end(AVCodecContext *avctx)$/;"	f	file:
svq1_encode_frame	svq1.c	/^static int svq1_encode_frame(AVCodecContext *avctx, unsigned char *buf, $/;"	f	file:
svq1_encode_init	svq1.c	/^static int svq1_encode_init(AVCodecContext *avctx)$/;"	f	file:
svq1_encode_plane	svq1.c	/^static int svq1_encode_plane(SVQ1Context *s, int plane, unsigned char *src_plane, unsigned char *ref_plane, unsigned char *decoded_plane,$/;"	f	file:
svq1_encoder	svq1.c	/^AVCodec svq1_encoder = {$/;"	v
svq1_frame_size_table	svq1.c	/^static struct { int width; int height; } svq1_frame_size_table[8] = {$/;"	v	file:
svq1_inter_codebook_4x2	svq1_cb.h	/^static const int8_t svq1_inter_codebook_4x2[768] = {$/;"	v
svq1_inter_codebook_4x4	svq1_cb.h	/^static const int8_t svq1_inter_codebook_4x4[1536] = {$/;"	v
svq1_inter_codebook_8x4	svq1_cb.h	/^static const int8_t svq1_inter_codebook_8x4[3072] = {$/;"	v
svq1_inter_codebook_8x8	svq1_cb.h	/^static const int8_t svq1_inter_codebook_8x8[6144] = {$/;"	v
svq1_inter_codebook_sum	svq1_cb.h	/^static const int8_t svq1_inter_codebook_sum[4][16*6] = {$/;"	v
svq1_inter_codebooks	svq1_cb.h	/^static const int8_t* const svq1_inter_codebooks[4] = {$/;"	v
svq1_inter_mean	svq1.c	/^static VLC svq1_inter_mean;$/;"	v	file:
svq1_inter_mean_vlc	svq1_vlc.h	/^static const uint16_t svq1_inter_mean_vlc[512][2] = {$/;"	v
svq1_inter_multistage	svq1.c	/^static VLC svq1_inter_multistage[6];$/;"	v	file:
svq1_inter_multistage_vlc	svq1_vlc.h	/^static const uint8_t svq1_inter_multistage_vlc[6][8][2] = {$/;"	v
svq1_intra_codebook_4x2	svq1_cb.h	/^static const int8_t svq1_intra_codebook_4x2[768] = {$/;"	v
svq1_intra_codebook_4x4	svq1_cb.h	/^static const int8_t svq1_intra_codebook_4x4[1536] = {$/;"	v
svq1_intra_codebook_8x4	svq1_cb.h	/^static const int8_t svq1_intra_codebook_8x4[3072] = {$/;"	v
svq1_intra_codebook_8x8	svq1_cb.h	/^static const int8_t svq1_intra_codebook_8x8[6144] = {$/;"	v
svq1_intra_codebook_sum	svq1_cb.h	/^static const int8_t svq1_intra_codebook_sum[4][16*6] = {$/;"	v
svq1_intra_codebooks	svq1_cb.h	/^static const int8_t* const svq1_intra_codebooks[4] = {$/;"	v
svq1_intra_mean	svq1.c	/^static VLC svq1_intra_mean;$/;"	v	file:
svq1_intra_mean_vlc	svq1_vlc.h	/^static const uint16_t svq1_intra_mean_vlc[256][2] = {$/;"	v
svq1_intra_multistage	svq1.c	/^static VLC svq1_intra_multistage[6];$/;"	v	file:
svq1_intra_multistage_vlc	svq1_vlc.h	/^static const uint8_t svq1_intra_multistage_vlc[6][8][2] = {$/;"	v
svq1_motion_component	svq1.c	/^static VLC svq1_motion_component;$/;"	v	file:
svq1_motion_inter_4v_block	svq1.c	/^static int svq1_motion_inter_4v_block (MpegEncContext *s, GetBitContext *bitbuf,$/;"	f	file:
svq1_motion_inter_block	svq1.c	/^static int svq1_motion_inter_block (MpegEncContext *s, GetBitContext *bitbuf,$/;"	f	file:
svq1_packet_checksum	svq1.c	/^static uint16_t svq1_packet_checksum (uint8_t *data, int length, int value) {$/;"	f	file:
svq1_parse_string	svq1.c	/^static void svq1_parse_string (GetBitContext *bitbuf, uint8_t *out) {$/;"	f	file:
svq1_pmv_s	svq1.c	/^typedef struct svq1_pmv_s {$/;"	s	file:
svq1_pmv_t	svq1.c	/^} svq1_pmv_t;$/;"	t	file:
svq1_skip_block	svq1.c	/^static void svq1_skip_block (uint8_t *current, uint8_t *previous, int pitch, int x, int y) {$/;"	f	file:
svq1_write_header	svq1.c	/^static void svq1_write_header(SVQ1Context *s, int frame_type)$/;"	f	file:
svq3_add_idct_c	svq3.c	/^static void svq3_add_idct_c (uint8_t *dst, DCTELEM *block, int stride, int qp, int dc){$/;"	f	file:
svq3_dct_tables	svq3.c	/^static const struct { uint8_t run; uint8_t level; } svq3_dct_tables[2][16] = {$/;"	v	file:
svq3_decode_block	svq3.c	/^static inline int svq3_decode_block (GetBitContext *gb, DCTELEM *block,$/;"	f	file:
svq3_decode_frame	svq3.c	/^static int svq3_decode_frame (AVCodecContext *avctx,$/;"	f	file:
svq3_decode_mb	svq3.c	/^static int svq3_decode_mb (H264Context *h, unsigned int mb_type) {$/;"	f	file:
svq3_decode_slice_header	svq3.c	/^static int svq3_decode_slice_header (H264Context *h) {$/;"	f	file:
svq3_decoder	svq3.c	/^AVCodec svq3_decoder = {$/;"	v
svq3_dequant_coeff	svq3.c	/^static const uint32_t svq3_dequant_coeff[32] = {$/;"	v	file:
svq3_get_se_golomb	golomb.h	/^static inline int svq3_get_se_golomb(GetBitContext *gb){$/;"	f
svq3_get_ue_golomb	golomb.h	/^static inline int svq3_get_ue_golomb(GetBitContext *gb){$/;"	f
svq3_luma_dc_dequant_idct_c	svq3.c	/^static void svq3_luma_dc_dequant_idct_c(DCTELEM *block, int qp){$/;"	f	file:
svq3_mc_dir	svq3.c	/^static inline int svq3_mc_dir (H264Context *h, int size, int mode, int dir, int avg) {$/;"	f	file:
svq3_mc_dir_part	svq3.c	/^static inline void svq3_mc_dir_part (MpegEncContext *s,$/;"	f	file:
svq3_pred_0	svq3.c	/^static const uint8_t svq3_pred_0[25][2] = {$/;"	v	file:
svq3_pred_1	svq3.c	/^static const int8_t svq3_pred_1[6][6][5] = {$/;"	v	file:
svq3_scan	svq3.c	/^static const uint8_t svq3_scan[16]={$/;"	v	file:
sw	ps2/mmi.h	73;"	d
swab32	liba52/bitstream.h	27;"	d
swab32	liba52/bitstream.h	33;"	d
swab32	liba52/bitstream.h	42;"	d
swap_uv	mpeg12.c	/^    int swap_uv;\/\/indicate VCR2$/;"	m	struct:Mpeg1Context	file:
swap_uv	mpegvideo.h	/^    int swap_uv;\/\/vcr2 codec is mpeg2 varint with UV swaped$/;"	m	struct:MpegEncContext
swapb1a	ra144.c	/^	unsigned int	 swapb1a[10];$/;"	m	file:
swapb1b	ra144.c	/^	unsigned int	 swapb1b[10];$/;"	m	file:
swapb2a	ra144.c	/^	unsigned int	 swapb2a[10];$/;"	m	file:
swapb2b	ra144.c	/^	unsigned int	 swapb2b[10];$/;"	m	file:
swapbuf1	ra144.c	/^	unsigned int	*swapbuf1;$/;"	m	file:
swapbuf1alt	ra144.c	/^	unsigned int	*swapbuf1alt;$/;"	m	file:
swapbuf2	ra144.c	/^	unsigned int	*swapbuf2;$/;"	m	file:
swapbuf2alt	ra144.c	/^	unsigned int	*swapbuf2alt;$/;"	m	file:
swf_index_tables	adpcm.c	/^static int swf_index_tables[4][16] = {$/;"	v	file:
switch_point	mpegaudiodec.c	/^    uint8_t switch_point;$/;"	m	struct:GranuleDef	file:
symCount	cabac.h	/^    int symCount;$/;"	m	struct:CABACContext
sym_quant	ac3enc.c	/^static inline int sym_quant(int c, int e, int levels)$/;"	f	file:
synth_buf	mpegaudiodec.c	/^    MPA_INT synth_buf[MPA_MAX_CHANNELS][512 * 2] __attribute__((aligned(16)));$/;"	m	struct:MPADecodeContext	file:
synth_buf_offset	mpegaudiodec.c	/^    int synth_buf_offset[MPA_MAX_CHANNELS];$/;"	m	struct:MPADecodeContext	file:
sys	dv.c	/^    const DVprofile* sys;$/;"	m	struct:DVVideoContext	file:
t0	alpha/motion_est_mvi_asm.S	/^           t0:  left_u -> left lo -> left$/;"	l
t0	alpha/regdef.h	7;"	d
t1	alpha/motion_est_mvi_asm.S	/^           t1:  mid$/;"	l
t1	alpha/regdef.h	8;"	d
t10	alpha/regdef.h	34;"	d
t11	alpha/regdef.h	35;"	d
t12	alpha/regdef.h	37;"	d
t2	alpha/motion_est_mvi_asm.S	/^           t2:  right_u -> right hi -> right$/;"	l
t2	alpha/regdef.h	9;"	d
t3	alpha/motion_est_mvi_asm.S	/^           t3:  ref left$/;"	l
t3	alpha/regdef.h	10;"	d
t4	alpha/motion_est_mvi_asm.S	/^           t4:  ref right$/;"	l
t4	alpha/regdef.h	11;"	d
t5	alpha/motion_est_mvi_asm.S	/^           t5:  left_u -> left lo -> left$/;"	l
t5	alpha/regdef.h	12;"	d
t6	alpha/motion_est_mvi_asm.S	/^           t6:  mid$/;"	l
t6	alpha/regdef.h	13;"	d
t7	alpha/motion_est_mvi_asm.S	/^           t7:  right_u -> right hi -> right$/;"	l
t7	alpha/regdef.h	14;"	d
t8	alpha/motion_est_mvi_asm.S	/^           t8:  ref left$/;"	l
t8	alpha/regdef.h	32;"	d
t9	alpha/motion_est_mvi_asm.S	/^           t9:  ref right$/;"	l
t9	alpha/regdef.h	33;"	d
t_frame	mpegvideo.h	/^    int t_frame;                       \/\/\/< time distance of first I -> B, used for interlaced b frames $/;"	m	struct:MpegEncContext
t_sqrt	ra144.c	/^static int t_sqrt(unsigned int x)$/;"	f	file:
ta	alpha/dsputil_alpha_asm.S	/^#define ta t10$/;"	d
ta	alpha/motion_est_mvi_asm.S	/^           ta:  left hi$/;"	l
ta	alpha/motion_est_mvi_asm.S	/^#define ta t10$/;"	d
table	bitstream.h	/^    VLC_TYPE (*table)[2]; \/\/\/< code, bits$/;"	m	struct:VLC
table	pcm.c	/^    short table[256];$/;"	m	struct:PCMDecode	file:
table0_level	msmpeg4data.h	/^static const int8_t table0_level[132] = {$/;"	v
table0_mv_bits	msmpeg4data.h	/^static const uint8_t table0_mv_bits[1100] = {$/;"	v
table0_mv_code	msmpeg4data.h	/^static const uint16_t table0_mv_code[1100] = {$/;"	v
table0_mvx	msmpeg4data.h	/^static const uint8_t table0_mvx[1099] = {$/;"	v
table0_mvy	msmpeg4data.h	/^static const uint8_t table0_mvy[1099] = {$/;"	v
table0_run	msmpeg4data.h	/^static const int8_t table0_run[132] = {$/;"	v
table0_vlc	msmpeg4data.h	/^static const uint16_t table0_vlc[133][2] = {$/;"	v
table1	ra288.h	/^static const float table1[111]={$/;"	v
table1_level	msmpeg4data.h	/^static const int8_t table1_level[148] = {$/;"	v
table1_mv_bits	msmpeg4data.h	/^static const uint8_t table1_mv_bits[1100] = {$/;"	v
table1_mv_code	msmpeg4data.h	/^static const uint16_t table1_mv_code[1100] = {$/;"	v
table1_mvx	msmpeg4data.h	/^static const uint8_t table1_mvx[1099] = {$/;"	v
table1_mvy	msmpeg4data.h	/^static const uint8_t table1_mvy[1099] = {$/;"	v
table1_run	msmpeg4data.h	/^static const int8_t table1_run[148] = {$/;"	v
table1_vlc	msmpeg4data.h	/^static const uint16_t table1_vlc[149][2] = {$/;"	v
table1a	ra288.h	/^static const float table1a[36]={$/;"	v
table2	ra288.h	/^static const float table2[38]={$/;"	v
table2_level	msmpeg4data.h	/^static const int8_t table2_level[185] = {$/;"	v
table2_run	msmpeg4data.h	/^static const int8_t table2_run[185] = {$/;"	v
table2_vlc	msmpeg4data.h	/^static const uint16_t table2_vlc[186][2] = {$/;"	v
table2a	ra288.h	/^static const float table2a[10]={$/;"	v
table4_level	msmpeg4data.h	/^static const int8_t table4_level[168] = {$/;"	v
table4_run	msmpeg4data.h	/^static const int8_t table4_run[168] = {$/;"	v
table4_vlc	msmpeg4data.h	/^static const uint16_t table4_vlc[169][2] = {$/;"	v
table_4_3_exp	mpegaudiodec.c	/^static int8_t  *table_4_3_exp;$/;"	v	file:
table_4_3_value	mpegaudiodec.c	/^static uint32_t *table_4_3_value;$/;"	v	file:
table_allocated	bitstream.h	/^    int table_size, table_allocated;$/;"	m	struct:VLC
table_crc8	flac.c	/^static const uint8_t table_crc8[256] = {$/;"	v	file:
table_inter_intra	msmpeg4data.h	/^static const uint8_t table_inter_intra[4][2]={$/;"	v
table_level	mpegvideo.h	/^    const int8_t *table_level;$/;"	m	struct:RLTable
table_mb_btype	mpeg12data.h	/^static const uint8_t table_mb_btype[11][2] = {$/;"	v
table_mb_intra	vc9.c	/^static const uint16_t table_mb_intra[64][2];$/;"	v	file:
table_mb_non_intra	msmpeg4data.h	/^static const uint32_t table_mb_non_intra[128][2] = {$/;"	v
table_mb_non_intra2	msmpeg4data.h	/^static const uint32_t table_mb_non_intra2[128][2] = {$/;"	v
table_mb_non_intra3	msmpeg4data.h	/^static const uint32_t table_mb_non_intra3[128][2] = {$/;"	v
table_mb_non_intra4	msmpeg4data.h	/^static const uint32_t table_mb_non_intra4[128][2] = {$/;"	v
table_mb_ptype	mpeg12data.h	/^static const uint8_t table_mb_ptype[7][2] = {$/;"	v
table_mv_bits	msmpeg4data.h	/^    const uint8_t *table_mv_bits;$/;"	m	struct:MVTable
table_mv_code	msmpeg4data.h	/^    const uint16_t *table_mv_code;$/;"	m	struct:MVTable
table_mv_index	msmpeg4data.h	/^    uint16_t *table_mv_index; \/* encoding: convert mv to index in table_mv *\/$/;"	m	struct:MVTable
table_mvx	msmpeg4data.h	/^    const uint8_t *table_mvx;$/;"	m	struct:MVTable
table_mvy	msmpeg4data.h	/^    const uint8_t *table_mvy;$/;"	m	struct:MVTable
table_run	mpegvideo.h	/^    const int8_t *table_run;$/;"	m	struct:RLTable
table_select	mpegaudiodec.c	/^    int table_select[3];$/;"	m	struct:GranuleDef	file:
table_size	bitstream.h	/^    int table_size, table_allocated;$/;"	m	struct:VLC
table_vlc	mpegvideo.h	/^    const uint16_t (*table_vlc)[2];$/;"	m	struct:RLTable
tables	truemotion1data.h	/^static uint8_t *tables[] = { pc_tbl2, pc_tbl3, pc_tbl4 };$/;"	v
tail	sonic.c	/^    int *tail;$/;"	m	struct:SonicContext	file:
tail_size	sonic.c	/^    int tail_size;$/;"	m	struct:SonicContext	file:
tap_quant	sonic.c	/^    int *tap_quant;$/;"	m	struct:SonicContext	file:
tb	alpha/dsputil_alpha_asm.S	/^#define tb t11$/;"	d
tb	alpha/motion_est_mvi_asm.S	/^           tb:  right lo$/;"	l
tb	alpha/motion_est_mvi_asm.S	/^#define tb t11$/;"	d
tbls	g726.c	/^	 G726Tables* tbls;    \/**< static tables needed for computation *\/$/;"	m	struct:G726Context	file:
tc	alpha/dsputil_alpha_asm.S	/^#define tc t12$/;"	d
tc	alpha/motion_est_mvi_asm.S	/^           tc:  error left$/;"	l
tc	alpha/motion_est_mvi_asm.S	/^#define tc t12$/;"	d
tc0_table	h264data.h	/^static const int tc0_table[52][3] = {$/;"	v
tcos	dsputil.h	/^    FFTSample *tcos;$/;"	m	struct:MDCTContext
td	alpha/dsputil_alpha_asm.S	/^#define td AT$/;"	d
td	alpha/motion_est_mvi_asm.S	/^           td:  error right  *\/$/;"	l
td	alpha/motion_est_mvi_asm.S	/^#define td AT$/;"	d
td	g726.c	/^	 int td;              \/**< tone detect *\/$/;"	m	struct:G726Context	file:
te	alpha/dsputil_alpha_asm.S	/^#define te a5$/;"	d
te	alpha/motion_est_mvi_asm.S	/^#define te a5$/;"	d
temp	alpha/motion_est_mvi_asm.S	/^           temp:$/;"	l
temp	huffyuv.c	/^    uint8_t *temp[3];$/;"	m	struct:HYuvContext	file:
temp	mpegvideo.h	/^    uint8_t *temp;$/;"	m	struct:MotionEstContext
temp	resample.c	/^    short *temp[2];$/;"	m	struct:ReSampleContext	file:
tempBlocks	libpostproc/postprocess_internal.h	/^	uint8_t *tempBlocks; \/\/\/<used for the horizontal code$/;"	m	struct:PPContext
tempBlured	libpostproc/postprocess_internal.h	/^	uint8_t *tempBlured[3];$/;"	m	struct:PPContext
tempBluredPast	libpostproc/postprocess_internal.h	/^	int32_t *tempBluredPast[3];$/;"	m	struct:PPContext
tempDst	libpostproc/postprocess_internal.h	/^	uint8_t *tempDst;$/;"	m	struct:PPContext
tempNoiseReducer	libpostproc/postprocess_altivec_template.c	/^static inline void RENAME(tempNoiseReducer)(uint8_t *src, int stride,$/;"	f	file:
tempNoiseReducer	libpostproc/postprocess_template.c	/^static inline void RENAME(tempNoiseReducer)(uint8_t *src, int stride,$/;"	f	file:
tempSrc	libpostproc/postprocess_internal.h	/^	uint8_t *tempSrc;$/;"	m	struct:PPContext
temp_len	resample.c	/^    int temp_len;$/;"	m	struct:ReSampleContext	file:
temp_mb	mpegvideo.h	/^    uint8_t *temp_mb[2];$/;"	m	struct:MotionEstContext
temporal_cplx_masking	avcodec.h	/^    float temporal_cplx_masking;$/;"	m	struct:AVCodecContext
temporal_decomposition_count	snow.c	/^    int temporal_decomposition_count;$/;"	m	struct:SnowContext	file:
temporal_decomposition_type	snow.c	/^    int temporal_decomposition_type;$/;"	m	struct:SnowContext	file:
test_motion	motion_test.c	/^void test_motion(const char *name,$/;"	f
tex_pb	mpegvideo.h	/^    PutBitContext tex_pb;            \/\/\/< used for data partitioned VOPs $/;"	m	struct:MpegEncContext
tf	alpha/dsputil_alpha_asm.S	/^#define tf a4$/;"	d
tf	alpha/motion_est_mvi_asm.S	/^#define tf a4$/;"	d
tfcntr	vc9.c	/^    uint8_t tfcntr;$/;"	m	struct:VC9Context	file:
tfcntrflag	vc9.c	/^    int tfcntrflag;       \/\/\/< TFCNTR present$/;"	m	struct:VC9Context	file:
tff	vc9.c	/^    uint8_t rptfrm, tff, rff;$/;"	m	struct:VC9Context	file:
tg	alpha/dsputil_alpha_asm.S	/^#define tg a3$/;"	d
tg	alpha/motion_est_mvi_asm.S	/^#define tg a3$/;"	d
th	alpha/dsputil_alpha_asm.S	/^#define th v0$/;"	d
th	alpha/motion_est_mvi_asm.S	/^#define th v0$/;"	d
the_buf	indeo3.c	/^  unsigned char *the_buf;$/;"	m	file:
the_buf_size	indeo3.c	/^  unsigned int the_buf_size;$/;"	m	file:
the_end	armv4l/jrevdct_arm.S	/^the_end:	$/;"	l
theora	vp3.c	/^    int theora, theora_tables;$/;"	m	struct:Vp3DecodeContext	file:
theora_calculate_pixel_addresses	vp3.c	/^static void theora_calculate_pixel_addresses(Vp3DecodeContext *s) $/;"	f	file:
theora_decode_comments	vp3.c	/^static int theora_decode_comments(AVCodecContext *avctx, GetBitContext gb)$/;"	f	file:
theora_decode_header	vp3.c	/^static int theora_decode_header(AVCodecContext *avctx, GetBitContext gb)$/;"	f	file:
theora_decode_init	vp3.c	/^static int theora_decode_init(AVCodecContext *avctx)$/;"	f	file:
theora_decode_tables	vp3.c	/^static int theora_decode_tables(AVCodecContext *avctx, GetBitContext gb)$/;"	f	file:
theora_decoder	vp3.c	/^AVCodec theora_decoder = {$/;"	v
theora_tables	vp3.c	/^    int theora, theora_tables;$/;"	m	struct:Vp3DecodeContext	file:
thirdpel_flag	h264.c	/^    int thirdpel_flag;$/;"	m	struct:H264Context	file:
thread	beosthread.c	/^    thread_id thread;$/;"	m	struct:ThreadContext	file:
thread	w32thread.c	/^    HANDLE thread;$/;"	m	struct:ThreadContext	file:
thread_context	mpegvideo.h	/^    struct MpegEncContext *thread_context[MAX_THREADS];$/;"	m	struct:MpegEncContext
thread_count	avcodec.h	/^    int thread_count;$/;"	m	struct:AVCodecContext
thread_func	w32thread.c	/^static unsigned __stdcall thread_func(void *v){$/;"	f	file:
thread_opaque	avcodec.h	/^    void *thread_opaque;$/;"	m	struct:AVCodecContext
time	common.h	499;"	d
time	mpegvideo.h	/^    int64_t time;                   \/\/\/< time of current frame  $/;"	m	struct:MpegEncContext
time_base	mpegvideo.h	/^    int time_base;                  \/\/\/< time in seconds of last I,P,S Frame $/;"	m	struct:MpegEncContext
time_increment_bits	mpegvideo.h	/^    int time_increment_bits;        \/\/\/< number of bits to represent the fractional part of time $/;"	m	struct:MpegEncContext
time_increment_resolution	mpegvideo.h	/^    int time_increment_resolution;$/;"	m	struct:MpegEncContext
time_scale	h264.c	/^    uint32_t time_scale;$/;"	m	struct:SPS	file:
timing_info_present_flag	h264.c	/^    int timing_info_present_flag;$/;"	m	struct:SPS	file:
tmp_row	png.c	/^    uint8_t *tmp_row;$/;"	m	struct:PNGContext	file:
to_be32	png.c	/^static void to_be32(uint8_t *p, uint32_t v)$/;"	f	file:
topBand	imgresample.c	/^    int topBand, bottomBand, leftBand, rightBand;$/;"	m	struct:ImgReSampleContext	file:
top_border	h264.c	/^    uint8_t (*top_border)[16+2*8];$/;"	m	struct:H264Context	file:
top_cbp	h264.c	/^    int top_cbp;$/;"	m	struct:H264Context	file:
top_field_first	mpegvideo.h	/^    int top_field_first;$/;"	m	struct:MpegEncContext
top_left_mv_flag	wmv2.c	/^    int top_left_mv_flag;$/;"	m	struct:Wmv2Context	file:
top_samples_available	h264.c	/^    unsigned int top_samples_available;$/;"	m	struct:H264Context	file:
topleft_samples_available	h264.c	/^    unsigned int topleft_samples_available;$/;"	m	struct:H264Context	file:
topleftx	vc9.c	/^    uint16_t topleftx;$/;"	m	struct:VC9Context	file:
toplefty	vc9.c	/^    uint16_t toplefty;$/;"	m	struct:VC9Context	file:
topright_samples_available	h264.c	/^    unsigned int topright_samples_available;$/;"	m	struct:H264Context	file:
total_bits	mpegvideo.h	/^    int64_t total_bits;$/;"	m	struct:MpegEncContext
total_quant_bits	mpegaudiotab.h	/^static unsigned short total_quant_bits[17];$/;"	v
total_zeros_bits	h264data.h	/^static const uint8_t total_zeros_bits[16][16]= {$/;"	v
total_zeros_len	h264data.h	/^static const uint8_t total_zeros_len[16][16]= {$/;"	v
total_zeros_vlc	h264.c	/^static VLC total_zeros_vlc[15];$/;"	v	file:
tpel_mc_func	dsputil.h	/^typedef void (*tpel_mc_func)(uint8_t *block\/*align width (8 or 16)*\/, const uint8_t *pixels\/*align 1*\/, int line_size, int w, int h);$/;"	t
tprintf	bitstream.h	835;"	d
tprintf	bitstream.h	838;"	d
transfer_char	vc9.c	/^    int transfer_char;    \/\/\/< 8bits, Opto-electronic transfer characteristics$/;"	m	struct:VC9Context	file:
transpose1	libpostproc/postprocess_template.c	/^static inline void RENAME(transpose1)(uint8_t *dst1, uint8_t *dst2, uint8_t *src, int srcStride)$/;"	f	file:
transpose2	libpostproc/postprocess_template.c	/^static inline void RENAME(transpose2)(uint8_t *dst, int dstStride, uint8_t *src)$/;"	f	file:
transpose4x4	i386/dsputil_mmx.c	/^static inline void transpose4x4(uint8_t *dst, uint8_t *src, int dst_stride, int src_stride){$/;"	f	file:
transpose_16x8_char_toPackedAlign_altivec	libpostproc/postprocess_altivec_template.c	/^static inline void transpose_16x8_char_toPackedAlign_altivec(unsigned char* dst, unsigned char* src, int stride) {$/;"	f	file:
transpose_8x16_char_fromPackedAlign_altivec	libpostproc/postprocess_altivec_template.c	/^static inline void transpose_8x16_char_fromPackedAlign_altivec(unsigned char* dst, unsigned char* src, int stride) {$/;"	f	file:
truemotion1_decode_16bit	truemotion1.c	/^static void truemotion1_decode_16bit(TrueMotion1Context *s)$/;"	f	file:
truemotion1_decode_24bit	truemotion1.c	/^static void truemotion1_decode_24bit(TrueMotion1Context *s)$/;"	f	file:
truemotion1_decode_end	truemotion1.c	/^static int truemotion1_decode_end(AVCodecContext *avctx)$/;"	f	file:
truemotion1_decode_frame	truemotion1.c	/^static int truemotion1_decode_frame(AVCodecContext *avctx,$/;"	f	file:
truemotion1_decode_header	truemotion1.c	/^static int truemotion1_decode_header(TrueMotion1Context *s)$/;"	f	file:
truemotion1_decode_init	truemotion1.c	/^static int truemotion1_decode_init(AVCodecContext *avctx)$/;"	f	file:
truemotion1_decoder	truemotion1.c	/^AVCodec truemotion1_decoder = {$/;"	v
try_8x8basis	dsputil.h	/^    int (*try_8x8basis)(int16_t rem[64], int16_t weight[64], int16_t basis[64], int scale);$/;"	m	struct:DSPContext
try_8x8basis_c	dsputil.c	/^static int try_8x8basis_c(int16_t rem[64], int16_t weight[64], int16_t basis[64], int scale){$/;"	f	file:
try_8x8basis_mmx	i386/dsputil_mmx.c	/^static int try_8x8basis_mmx(int16_t rem[64], int16_t weight[64], int16_t basis[64], int scale){$/;"	f	file:
tscc_decoder	tscc.c	/^AVCodec tscc_decoder = {$/;"	v
tsin	dsputil.h	/^    FFTSample *tsin;$/;"	m	struct:MDCTContext
tt_index	vc9.c	/^    int tt_index;                 \/\/\/< Index for Transform Type tables$/;"	m	struct:VC9Context	file:
ttblk4x4	vc9.c	/^    uint8_t ttblk4x4;     \/\/\/< Value of ttblk which indicates a 4x4 transform$/;"	m	struct:VC9Context	file:
ttfrm	vc9.c	/^    int ttfrm;            \/\/\/< Transform type info present at frame level$/;"	m	struct:VC9Context	file:
ttmb	vc9.c	/^    int ttmb;             \/\/\/< Transform type$/;"	m	struct:VC9Context	file:
ttmbf	vc9.c	/^    uint8_t ttmbf;        \/\/\/< Transform type flag$/;"	m	struct:VC9Context	file:
twopassbuffer	xvidff.c	/^    char *twopassbuffer;           \/** Character buffer for two-pass *\/$/;"	m	struct:xvid_context	file:
twopassfile	xvidff.c	/^    char *twopassfile;             \/** second pass temp file name *\/$/;"	m	struct:xvid_context	file:
tx_frametype	amr.c	/^    enum TXFrameType tx_frametype;$/;"	m	struct:AMRContext	file:
type	avcodec.h	/^    enum CodecType type;$/;"	m	struct:AVCodec
type	avcodec.h	/^    int type;$/;"	m	struct:AVOption
type	h264data.h	/^    uint16_t type;$/;"	m	struct:IMbInfo
type	h264data.h	/^    uint16_t type;$/;"	m	struct:PMbInfo
type	snow.c	/^    uint8_t type;$/;"	m	struct:BlockNode	file:
typedef_h	amr.c	489;"	d	file:
u	cinepak.c	/^    uint8_t  u, v;$/;"	m	file:
u	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
u_b_table	xan.c	/^static int u_b_table[256];$/;"	v	file:
u_fragment_start	vp3.c	/^    int u_fragment_start;$/;"	m	struct:Vp3DecodeContext	file:
u_g_table	xan.c	/^static int u_g_table[256];$/;"	v	file:
u_r_table	xan.c	/^static int u_r_table[256];$/;"	v	file:
u_superblock_start	vp3.c	/^    int u_superblock_start;$/;"	m	struct:Vp3DecodeContext	file:
ub	i386/mmx.h	/^	unsigned char		ub[8];	\/* 8 Unsigned Byte *\/$/;"	m
ud	i386/mmx.h	/^	unsigned int		ud[2];	\/* 2 Unsigned Doubleword *\/$/;"	m
uiclip	roqvideo.c	/^static int uiclip[1024], *uiclp;  \/* clipping table *\/$/;"	v	file:
uiclp	roqvideo.c	/^static int uiclip[1024], *uiclp;  \/* clipping table *\/$/;"	v	file:
uint16_t	common.h	/^    typedef unsigned short uint16_t;$/;"	t
uint32_t	common.h	/^    typedef unsigned int   uint32_t;$/;"	t
uint64_t	common.h	/^        typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	common.h	/^        typedef unsigned long long uint64_t;$/;"	t
uint64_t_C	common.h	157;"	d
uint64_t_C	common.h	165;"	d
uint64_t_C	common.h	183;"	d
uint64_t_C	common.h	203;"	d
uint8_t	common.h	/^    typedef unsigned char  uint8_t;$/;"	t
uint_fast16_t	common.h	/^typedef unsigned int  uint_fast16_t;$/;"	t
uint_fast32_t	common.h	/^typedef unsigned int  uint_fast32_t;$/;"	t
uint_fast8_t	common.h	/^typedef unsigned char uint_fast8_t;$/;"	t
ulaw2linear	pcm.c	/^static int ulaw2linear(unsigned char	u_val)$/;"	f	file:
uldq	alpha/asm.h	136;"	d
uldq	alpha/asm.h	68;"	d
ulti_chromas	ulti.c	/^static uint8_t ulti_chromas[16] =$/;"	v	file:
ulti_codebook	ulti.c	/^    uint8_t *ulti_codebook;$/;"	m	struct:UltimotionDecodeContext	file:
ulti_codebook	ulti_cb.h	/^static unsigned char ulti_codebook[16384]={$/;"	v
ulti_convert_yuv	ulti.c	/^static void ulti_convert_yuv(AVFrame *frame, int x, int y,$/;"	f	file:
ulti_decode_end	ulti.c	/^static int ulti_decode_end(AVCodecContext *avctx)$/;"	f	file:
ulti_decode_frame	ulti.c	/^static int ulti_decode_frame(AVCodecContext *avctx, $/;"	f	file:
ulti_decode_init	ulti.c	/^static int ulti_decode_init(AVCodecContext *avctx)$/;"	f	file:
ulti_decoder	ulti.c	/^AVCodec ulti_decoder = {$/;"	v
ulti_grad	ulti.c	/^static void ulti_grad(AVFrame *frame, int x, int y, uint8_t *Y, int chroma, int angle)$/;"	f	file:
ulti_lumas	ulti.c	/^static uint8_t ulti_lumas[64] =$/;"	v	file:
ulti_pattern	ulti.c	/^static void ulti_pattern(AVFrame *frame, int x, int y,$/;"	f	file:
umv_fcode_tab	h263.c	/^static uint8_t umv_fcode_tab[MAX_MV*2+1];$/;"	v	file:
umvplus	mpegvideo.h	/^    int umvplus;                    \/\/\/< == H263+ && unrestricted_mv $/;"	m	struct:MpegEncContext
unaligned32	bitstream.h	/^static inline uint32_t unaligned32(const void *v) {$/;"	f
unaligned32	bitstream.h	137;"	d
unaligned32_be	bitstream.h	/^static inline int unaligned32_be(const void *v)$/;"	f
unaligned_16	dsputil.h	/^struct unaligned_16 { uint16_t l; } __attribute__((packed));$/;"	s
unaligned_32	dsputil.h	/^struct unaligned_32 { uint32_t l; } __attribute__((packed));$/;"	s
unaligned_64	dsputil.h	/^struct unaligned_64 { uint64_t l; } __attribute__((packed));$/;"	s
unaligned_long	alpha/asm.h	/^struct unaligned_long { uint64_t l; } __attribute__((packed));$/;"	s
uni_DCtab_chrom_bits	h263.c	/^static uint16_t uni_DCtab_chrom_bits[512];$/;"	v	file:
uni_DCtab_chrom_len	h263.c	/^static uint8_t uni_DCtab_chrom_len[512];$/;"	v	file:
uni_DCtab_lum_bits	h263.c	/^static uint16_t uni_DCtab_lum_bits[512];$/;"	v	file:
uni_DCtab_lum_len	h263.c	/^static uint8_t uni_DCtab_lum_len[512];$/;"	v	file:
uni_h263_inter_rl_len	h263.c	/^static uint8_t  uni_h263_inter_rl_len [64*64*2*2];$/;"	v	file:
uni_h263_intra_aic_rl_len	h263.c	/^static uint8_t  uni_h263_intra_aic_rl_len [64*64*2*2];$/;"	v	file:
uni_mpeg1_ac_vlc_bits	mpeg12.c	/^static uint32_t uni_mpeg1_ac_vlc_bits[64*64*2];$/;"	v	file:
uni_mpeg1_ac_vlc_len	mpeg12.c	/^static uint8_t  uni_mpeg1_ac_vlc_len [64*64*2];$/;"	v	file:
uni_mpeg4_inter_rl_bits	h263.c	/^static uint32_t uni_mpeg4_inter_rl_bits[64*64*2*2];$/;"	v	file:
uni_mpeg4_inter_rl_len	h263.c	/^static uint8_t  uni_mpeg4_inter_rl_len [64*64*2*2];$/;"	v	file:
uni_mpeg4_intra_rl_bits	h263.c	/^static uint32_t uni_mpeg4_intra_rl_bits[64*64*2*2];$/;"	v	file:
uni_mpeg4_intra_rl_len	h263.c	/^static uint8_t  uni_mpeg4_intra_rl_len [64*64*2*2];$/;"	v	file:
uninitialize_before	beosthread.c	/^void uninitialize_before(void)$/;"	f
unknown_svq3_flag	h264.c	/^    int unknown_svq3_flag;$/;"	m	struct:H264Context	file:
unlikely	alpha/asm.h	34;"	d
unlikely	alpha/asm.h	37;"	d
unlock_ben	beosthread.c	/^static inline int unlock_ben(struct benaphore *ben)$/;"	f	file:
unpack	ra288.c	/^static void unpack(unsigned short *tgt, unsigned char *src, unsigned int len)$/;"	f	file:
unpack_buffer	vmdav.c	/^    unsigned char *unpack_buffer;$/;"	m	struct:VmdVideoContext	file:
unpack_dct_coeffs	vp3.c	/^static int unpack_dct_coeffs(Vp3DecodeContext *s, GetBitContext *gb)$/;"	f	file:
unpack_input	ra144.c	/^static void unpack_input(unsigned char *input, unsigned int *output)$/;"	f	file:
unpack_modes	vp3.c	/^static int unpack_modes(Vp3DecodeContext *s, GetBitContext *gb)$/;"	f	file:
unpack_superblocks	vp3.c	/^static int unpack_superblocks(Vp3DecodeContext *s, GetBitContext *gb)$/;"	f	file:
unpack_token	vp3.c	/^static void unpack_token(GetBitContext *gb, int token, int *zero_run,$/;"	f	file:
unpack_vectors	vp3.c	/^static int unpack_vectors(Vp3DecodeContext *s, GetBitContext *gb)$/;"	f	file:
unpack_vlcs	vp3.c	/^static int unpack_vlcs(Vp3DecodeContext *s, GetBitContext *gb,$/;"	f	file:
unpacked	ra144.c	/^	unsigned int	 unpacked[28];		\/* buffer for unpacked input *\/$/;"	m	file:
unpkbl	alpha/asm.h	114;"	d
unpkbl	alpha/asm.h	128;"	d
unpkbl	alpha/asm.h	157;"	d
unpkbw	alpha/asm.h	115;"	d
unpkbw	alpha/asm.h	129;"	d
unpkbw	alpha/asm.h	158;"	d
unreference_pic	h264.c	/^static inline void unreference_pic(H264Context *h, Picture *pic){$/;"	f	file:
unrestricted_mv	mpegvideo.h	/^    int unrestricted_mv;        \/\/\/< mv can point outside of the coded picture $/;"	m	struct:MpegEncContext
unused	avcodec.h	/^    int unused;$/;"	m	struct:AVCodecContext
unused_var_killer	i386/simple_idct_mmx.c	/^static void unused_var_killer(){$/;"	f	file:
update	ra288.c	/^static void update(Real288_internal *glob)$/;"	f	file:
update_duplicate_context_after_me	mpegvideo.c	/^static void update_duplicate_context_after_me(MpegEncContext *dst, MpegEncContext *src){$/;"	f	file:
update_map_generation	motion_est.c	/^static inline int update_map_generation(MotionEstContext *c)$/;"	f	file:
update_noise_reduction	mpegvideo.c	/^static void update_noise_reduction(MpegEncContext *s){$/;"	f	file:
update_predictor	ratecontrol.c	/^static void update_predictor(Predictor *p, double q, double var, double size)$/;"	f	file:
update_qscale	mpegvideo.c	/^static inline void update_qscale(MpegEncContext *s){$/;"	f	file:
update_vlc_state	ffv1.c	/^static inline void update_vlc_state(VlcState * const state, const int v){$/;"	f	file:
upper_motion_limit_offset	interplayvideo.c	/^    int upper_motion_limit_offset;$/;"	m	struct:IpvideoContext	file:
uq	i386/mmx.h	/^	unsigned long long	uq;	\/* Unsigned Quadword *\/$/;"	m
use_bit_reservoir	wmadec.c	/^    int use_bit_reservoir;$/;"	m	struct:WMADecodeContext	file:
use_exp_vlc	wmadec.c	/^    int use_exp_vlc;  \/* exponent coding: 0 = lsp, 1 = vlc + delta *\/$/;"	m	struct:WMADecodeContext	file:
use_noise_coding	wmadec.c	/^    int use_noise_coding; \/* true if perceptual noise is added *\/$/;"	m	struct:WMADecodeContext	file:
use_skip_mb_code	mpegvideo.h	/^    int use_skip_mb_code;$/;"	m	struct:MpegEncContext
use_variable_block_len	wmadec.c	/^    int use_variable_block_len;$/;"	m	struct:WMADecodeContext	file:
use_weight	h264.c	/^    int use_weight;$/;"	m	struct:H264Context	file:
use_weight_chroma	h264.c	/^    int use_weight_chroma;$/;"	m	struct:H264Context	file:
used	idcinvideo.c	/^  unsigned char used;$/;"	m	file:
user_specified_pts	mpegvideo.h	/^    int64_t user_specified_pts;\/\/\/< last non zero pts from AVFrame which was passed into avcodec_encode_video()$/;"	m	struct:MpegEncContext
usl7	indeo3.c	/^  long usl7;$/;"	m	file:
ustr_t	indeo3.c	/^} ustr_t;$/;"	t	file:
uv_h	indeo3.c	/^  unsigned short uv_w, uv_h;$/;"	m	file:
uv_w	indeo3.c	/^  unsigned short uv_w, uv_h;$/;"	m	file:
uvlinesize	mpegvideo.h	/^    int uvlinesize;            \/\/\/< line size, for chroma in bytes, may be different from width $/;"	m	struct:MpegEncContext
uvsamp	vc9.c	/^    uint8_t uvsamp;$/;"	m	struct:VC9Context	file:
uvstride	mpegvideo.h	/^    int uvstride;$/;"	m	struct:MotionEstContext
uw	i386/mmx.h	/^	unsigned short		uw[4];	\/* 4 Unsigned Word *\/$/;"	m
uyvy411_to_yuv411p	imgconvert.c	/^static void uyvy411_to_yuv411p(AVPicture *dst, const AVPicture *src,$/;"	f	file:
uyvy422_to_yuv420p	imgconvert.c	/^static void uyvy422_to_yuv420p(AVPicture *dst, const AVPicture *src,$/;"	f	file:
uyvy422_to_yuv422p	imgconvert.c	/^static void uyvy422_to_yuv422p(AVPicture *dst, const AVPicture *src,$/;"	f	file:
v	cinepak.c	/^    uint8_t  u, v;$/;"	m	file:
v	imgresample.c	/^    vector signed short v;$/;"	m	file:
v	imgresample.c	/^    vector unsigned char v;$/;"	m	file:
v	integer.h	/^    uint16_t v[AV_INTEGER_SIZE]; $/;"	m	struct:AVInteger
v	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
v0	alpha/regdef.h	5;"	d
v1_codebook	cinepak.c	/^    cvid_codebook_t   v1_codebook[256];$/;"	m	file:
v1_inter_cbpc_vlc	msmpeg4.c	/^static VLC v1_inter_cbpc_vlc;$/;"	v	file:
v1_intra_cbpc_vlc	msmpeg4.c	/^static VLC v1_intra_cbpc_vlc;$/;"	v	file:
v2_dc_chroma_table	msmpeg4.c	/^static uint32_t v2_dc_chroma_table[512][2];$/;"	v	file:
v2_dc_chroma_vlc	msmpeg4.c	/^static VLC v2_dc_chroma_vlc;$/;"	v	file:
v2_dc_lum_table	msmpeg4.c	/^static uint32_t v2_dc_lum_table[512][2];$/;"	v	file:
v2_dc_lum_vlc	msmpeg4.c	/^static VLC v2_dc_lum_vlc;$/;"	v	file:
v2_intra_cbpc	msmpeg4data.h	/^static const uint8_t v2_intra_cbpc[4][2] = {$/;"	v
v2_intra_cbpc_vlc	msmpeg4.c	/^static VLC v2_intra_cbpc_vlc;$/;"	v	file:
v2_mb_type	msmpeg4data.h	/^static const uint8_t v2_mb_type[8][2] = {$/;"	v
v2_mb_type_vlc	msmpeg4.c	/^static VLC v2_mb_type_vlc;$/;"	v	file:
v2_mv_vlc	msmpeg4.c	/^static VLC v2_mv_vlc;$/;"	v	file:
v4_codebook	cinepak.c	/^    cvid_codebook_t   v4_codebook[256];$/;"	m	file:
vChromaSubSample	libpostproc/postprocess_internal.h	/^	int vChromaSubSample;$/;"	m	struct:PPContext
v_b_table	xan.c	/^static int v_b_table[256];$/;"	v	file:
v_block_filter	error_resilience.c	/^static void v_block_filter(MpegEncContext *s, uint8_t *dst, int w, int h, int stride, int is_luma){$/;"	f	file:
v_count	mjpeg.c	/^    int v_count[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
v_edge_pos	mpegvideo.h	/^    int h_edge_pos, v_edge_pos;\/\/\/< horizontal \/ vertical position of the right\/bottom edge (pixel replicateion)$/;"	m	struct:MpegEncContext
v_fragment_start	vp3.c	/^    int v_fragment_start;$/;"	m	struct:Vp3DecodeContext	file:
v_g_table	xan.c	/^static int v_g_table[256];$/;"	v	file:
v_incr	imgresample.c	/^    int h_incr, v_incr;$/;"	m	struct:ImgReSampleContext	file:
v_max	mjpeg.c	/^    int h_max, v_max; \/* maximum h and v counts *\/$/;"	m	struct:MJpegDecodeContext	file:
v_r_table	xan.c	/^static int v_r_table[256];$/;"	v	file:
v_resample	imgresample.c	/^static void v_resample(uint8_t *dst, int dst_width, const uint8_t *src,$/;"	f	file:
v_resample16_altivec	imgresample.c	/^void v_resample16_altivec(uint8_t *dst, int dst_width, const uint8_t *src,$/;"	f
v_resample4_mmx	imgresample.c	/^static void v_resample4_mmx(uint8_t *dst, int dst_width, const uint8_t *src,$/;"	f	file:
v_scount	mjpeg.c	/^    int v_scount[MAX_COMPONENTS];$/;"	m	struct:MJpegDecodeContext	file:
v_superblock_start	vp3.c	/^    int v_superblock_start;$/;"	m	struct:Vp3DecodeContext	file:
val	ra144.c	/^	unsigned int	 resetflag, val, oldval;$/;"	m	file:
val_ac_chrominance	mjpeg.c	/^static const uint8_t val_ac_chrominance[] =$/;"	v	file:
val_ac_luminance	mjpeg.c	/^static const uint8_t val_ac_luminance[] =$/;"	v	file:
val_dc_chrominance	mjpeg.c	/^static const uint8_t val_dc_chrominance[] =$/;"	v	file:
val_dc_luminance	mjpeg.c	/^static const uint8_t val_dc_luminance[] =$/;"	v	file:
var_diamond_search	motion_est_template.c	/^static int var_diamond_search(MpegEncContext * s, int *best, int dmin,$/;"	f	file:
vb	oggvorbis.c	/^    vorbis_block vb ;$/;"	m	struct:OggVorbisContext	file:
vbv_delay_ptr	mpegvideo.h	/^    uint8_t *vbv_delay_ptr;  \/\/\/< pointer to vbv_delay in the bitstream $/;"	m	struct:MpegEncContext
vc	oggvorbis.c	/^    vorbis_comment vc ;$/;"	m	struct:OggVorbisContext	file:
vc9_4mv_block_pattern_bits	vc9data.h	/^static const uint8_t vc9_4mv_block_pattern_bits[4][16] = {$/;"	v
vc9_4mv_block_pattern_codes	vc9data.h	/^static const uint8_t vc9_4mv_block_pattern_codes[4][16] = {$/;"	v
vc9_4mv_block_pattern_vlc	vc9.c	/^static VLC vc9_4mv_block_pattern_vlc[4];$/;"	v	file:
vc9_bfraction_bits	vc9data.h	/^const uint8_t vc9_bfraction_bits[23] = {$/;"	v
vc9_bfraction_codes	vc9data.h	/^const uint8_t vc9_bfraction_codes[23] = {$/;"	v
vc9_bfraction_lut	vc9data.h	/^const int16_t vc9_bfraction_lut[23] = {$/;"	v
vc9_bfraction_vlc	vc9.c	/^static VLC vc9_bfraction_vlc;$/;"	v	file:
vc9_cbpcy_p_bits	vc9data.h	/^static const uint8_t vc9_cbpcy_p_bits[4][64] = {$/;"	v
vc9_cbpcy_p_codes	vc9data.h	/^static const uint16_t vc9_cbpcy_p_codes[4][64] = {$/;"	v
vc9_cbpcy_p_vlc	vc9.c	/^static VLC vc9_cbpcy_p_vlc[4];$/;"	v	file:
vc9_coded_block_pred	vc9.c	/^static inline int vc9_coded_block_pred(MpegEncContext * s, int n, uint8_t **coded_block_ptr)$/;"	f	file:
vc9_decode_b_mb	vc9.c	/^int vc9_decode_b_mb(VC9Context *v, DCTELEM block[6][64])$/;"	f
vc9_decode_block	vc9.c	/^int vc9_decode_block(VC9Context *v, DCTELEM block[64], int n, int coded, int mquant)$/;"	f
vc9_decode_end	vc9.c	/^static int vc9_decode_end(AVCodecContext *avctx)$/;"	f	file:
vc9_decode_frame	vc9.c	/^static int vc9_decode_frame(AVCodecContext *avctx,$/;"	f	file:
vc9_decode_i_mb	vc9.c	/^int vc9_decode_i_mb(VC9Context *v, DCTELEM block[6][64])$/;"	f
vc9_decode_init	vc9.c	/^static int vc9_decode_init(AVCodecContext *avctx)$/;"	f	file:
vc9_decode_p_mb	vc9.c	/^int vc9_decode_p_mb(VC9Context *v, DCTELEM block[6][64])$/;"	f
vc9_decoder	vc9.c	/^AVCodec vc9_decoder = {$/;"	v
vc9_imode_bits	vc9data.h	/^static const uint8_t vc9_imode_bits[7] = {$/;"	v
vc9_imode_codes	vc9data.h	/^static const uint8_t vc9_imode_codes[7] = {$/;"	v
vc9_imode_vlc	vc9.c	/^static VLC vc9_imode_vlc;$/;"	v	file:
vc9_init_common	vc9.c	/^static int vc9_init_common(VC9Context *v)$/;"	f	file:
vc9_mv_diff_bits	vc9data.h	/^static const uint8_t vc9_mv_diff_bits[4][73] = {$/;"	v
vc9_mv_diff_codes	vc9data.h	/^static const uint16_t vc9_mv_diff_codes[4][73] = {$/;"	v
vc9_mv_diff_vlc	vc9.c	/^static VLC vc9_mv_diff_vlc[4];$/;"	v	file:
vc9_norm2_bits	vc9data.h	/^static const uint8_t vc9_norm2_bits[4] = {$/;"	v
vc9_norm2_codes	vc9data.h	/^static const uint8_t vc9_norm2_codes[4] = {$/;"	v
vc9_norm2_vlc	vc9.c	/^static VLC vc9_norm2_vlc;$/;"	v	file:
vc9_norm6_bits	vc9data.h	/^static const uint8_t vc9_norm6_bits[64] = {$/;"	v
vc9_norm6_codes	vc9data.h	/^static const uint16_t vc9_norm6_codes[64] = {$/;"	v
vc9_norm6_spec	vc9data.h	/^static const uint8_t vc9_norm6_spec[64][5] = {$/;"	v
vc9_norm6_vlc	vc9.c	/^static VLC vc9_norm6_vlc;$/;"	v	file:
vc9_pixel_aspect	vc9data.h	/^static const AVRational vc9_pixel_aspect[16]={$/;"	v
vc9_pred_dc	vc9.c	/^static inline int vc9_pred_dc(MpegEncContext *s, int n,$/;"	f	file:
vc9_subblkpat_bits	vc9data.h	/^static const uint8_t vc9_subblkpat_bits[3][15] = {$/;"	v
vc9_subblkpat_codes	vc9data.h	/^static const uint8_t vc9_subblkpat_codes[3][15] = {$/;"	v
vc9_subblkpat_vlc	vc9.c	/^static VLC vc9_subblkpat_vlc[3];$/;"	v	file:
vc9_ttblk_bits	vc9data.h	/^static const uint8_t vc9_ttblk_bits[3][8] = {$/;"	v
vc9_ttblk_codes	vc9data.h	/^static const uint8_t vc9_ttblk_codes[3][8] = {$/;"	v
vc9_ttblk_vlc	vc9.c	/^static VLC vc9_ttblk_vlc[3];$/;"	v	file:
vc9_ttmb_bits	vc9data.h	/^static const uint8_t vc9_ttmb_bits[3][16] = {$/;"	v
vc9_ttmb_codes	vc9data.h	/^static const uint16_t vc9_ttmb_codes[3][16] = {$/;"	v
vc9_ttmb_vlc	vc9.c	/^static VLC vc9_ttmb_vlc[3];$/;"	v	file:
vcii	ppc/dsputil_altivec.h	86;"	d
vcii	ppc/dsputil_altivec.h	88;"	d
vcprm	ppc/dsputil_altivec.h	69;"	d
vcprm	ppc/dsputil_altivec.h	71;"	d
vcprmle	ppc/dsputil_altivec.h	77;"	d
vcr1_decoder	vcr1.c	/^AVCodec vcr1_decoder = {$/;"	v
vcr2_init_sequence	mpeg12.c	/^static int vcr2_init_sequence(AVCodecContext *avctx)$/;"	f	file:
vd	oggvorbis.c	/^    vorbis_dsp_state vd ;$/;"	m	struct:OggVorbisContext	file:
vec_mergel	ppc/gcc_fixes.h	65;"	d
vec_mergel	ppc/gcc_fixes.h	67;"	d
vec_ss_t	imgresample.c	/^} vec_ss_t;$/;"	t	file:
vec_uc_t	imgresample.c	/^} vec_uc_t;$/;"	t	file:
vectable	truemotion1.c	/^    uint8_t vectable;$/;"	m	struct:frame_header	file:
vector	svq1.c	928;"	d	file:
vector128	i386/dsputil_mmx.c	/^static unsigned char __align8 vector128[8] =$/;"	v	file:
vector_height	vqavideo.c	/^    int vector_height;  \/* height of individual vector *\/$/;"	m	struct:VqaContext	file:
vector_s16_t	ppc/idct_altivec.c	46;"	d	file:
vector_s32_t	ppc/idct_altivec.c	51;"	d	file:
vector_s8_t	ppc/idct_altivec.c	49;"	d	file:
vector_u16_t	ppc/idct_altivec.c	48;"	d	file:
vector_u32_t	ppc/idct_altivec.c	52;"	d	file:
vector_u8_t	ppc/idct_altivec.c	50;"	d	file:
vector_width	vqavideo.c	/^    int vector_width;  \/* width of individual vector *\/$/;"	m	struct:VqaContext	file:
verbose	libpostproc/postprocess.c	/^static const int verbose= 0;$/;"	v	file:
version	ffv1.c	/^    int version;$/;"	m	struct:FFV1Context	file:
version	huffyuv.c	/^    int version;$/;"	m	struct:HYuvContext	file:
version	mdec.c	/^    int version;$/;"	m	struct:MDECContext	file:
version	shorten.c	/^    int version;$/;"	m	struct:ShortenContext	file:
version	snow.c	/^    int version;$/;"	m	struct:SnowContext	file:
version	truemotion1.c	/^    uint8_t version;$/;"	m	struct:frame_header	file:
version	vp3.c	/^    int version;$/;"	m	struct:Vp3DecodeContext	file:
version	wmadec.c	/^    int version; \/* 1 = 0x160 (WMAV1), 2 = 0x161 (WMAV2) *\/$/;"	m	struct:WMADecodeContext	file:
version	xvidff.c	/^    int     version;                \/** XviD version *\/$/;"	m	struct:xvid_ff_pass1	file:
vertClassify	libpostproc/postprocess_template.c	/^static inline int RENAME(vertClassify)(uint8_t src[], int stride, PPContext *c){$/;"	f	file:
vertClassify_C	libpostproc/postprocess.c	/^static inline int vertClassify_C(uint8_t src[], int stride, PPContext *c){$/;"	f	file:
vertClassify_altivec	libpostproc/postprocess_altivec_template.c	/^static inline int vertClassify_altivec(uint8_t src[], int stride, PPContext *c) {$/;"	f	file:
vertX1Filter	libpostproc/postprocess_template.c	/^static inline void RENAME(vertX1Filter)(uint8_t *src, int stride, PPContext *co)$/;"	f	file:
vert_pred	truemotion1.c	/^    unsigned int *vert_pred;$/;"	m	struct:TrueMotion1Context	file:
vertical_compose53iH0	snow.c	/^static void vertical_compose53iH0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_compose53iL0	snow.c	/^static void vertical_compose53iL0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_compose97iH0	snow.c	/^static void vertical_compose97iH0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_compose97iH1	snow.c	/^static void vertical_compose97iH1(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_compose97iL0	snow.c	/^static void vertical_compose97iL0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_compose97iL1	snow.c	/^static void vertical_compose97iL1(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose53iH0	snow.c	/^static void vertical_decompose53iH0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose53iL0	snow.c	/^static void vertical_decompose53iL0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose97iH0	snow.c	/^static void vertical_decompose97iH0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose97iH1	snow.c	/^static void vertical_decompose97iH1(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose97iL0	snow.c	/^static void vertical_decompose97iL0(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_decompose97iL1	snow.c	/^static void vertical_decompose97iL1(DWTELEM *b0, DWTELEM *b1, DWTELEM *b2, int width){$/;"	f	file:
vertical_filter	vp3.c	/^static void vertical_filter(unsigned char *first_pixel, int stride,$/;"	f	file:
vi	oggvorbis.c	/^    vorbis_info vi ;$/;"	m	struct:OggVorbisContext	file:
video_decode_example	apiexample.c	/^void video_decode_example(const char *outfilename, const char *filename)$/;"	f
video_encode_example	apiexample.c	/^void video_encode_example(const char *filename)$/;"	f
video_place	dvdata.h	/^    const uint16_t  *video_place;         \/* positions of all DV macro blocks *\/$/;"	m	struct:DVprofile
vis_alignaddr	sparc/vis.h	/^static inline void *vis_alignaddr(void *_ptr)$/;"	f
vis_alignaddr_g0	sparc/vis.h	/^static inline void vis_alignaddr_g0(void *_ptr)$/;"	f
vis_alignaddrl	sparc/vis.h	/^static inline void *vis_alignaddrl(void *_ptr)$/;"	f
vis_alignaddrl_g0	sparc/vis.h	/^static inline void vis_alignaddrl_g0(void *_ptr)$/;"	f
vis_and	sparc/vis.h	309;"	d
vis_andnot1	sparc/vis.h	321;"	d
vis_andnot1s	sparc/vis.h	322;"	d
vis_andnot2	sparc/vis.h	323;"	d
vis_andnot2s	sparc/vis.h	324;"	d
vis_ands	sparc/vis.h	310;"	d
vis_d	sparc/vis.h	124;"	d
vis_d12d	sparc/vis.h	95;"	d
vis_d22d	sparc/vis.h	101;"	d
vis_d2s	sparc/vis.h	83;"	d
vis_dd2d	sparc/vis.h	62;"	d
vis_dreg	sparc/vis.h	47;"	d
vis_expand	sparc/vis.h	210;"	d
vis_faligndata	sparc/vis.h	289;"	d
vis_fone	sparc/vis.h	295;"	d
vis_fones	sparc/vis.h	296;"	d
vis_fzero	sparc/vis.h	293;"	d
vis_fzeros	sparc/vis.h	294;"	d
vis_ld32	sparc/vis.h	155;"	d
vis_ld32_2	sparc/vis.h	156;"	d
vis_ld64	sparc/vis.h	159;"	d
vis_ld64_2	sparc/vis.h	160;"	d
vis_ldblk	sparc/vis.h	164;"	d
vis_level	sparc/dsputil_vis.c	/^static int vis_level ()$/;"	f	file:
vis_m2r	sparc/vis.h	135;"	d
vis_m2r_2	sparc/vis.h	138;"	d
vis_membar_storestore	sparc/vis.h	184;"	d
vis_membar_sync	sparc/vis.h	187;"	d
vis_mul8sux16	sparc/vis.h	218;"	d
vis_mul8ulx16	sparc/vis.h	219;"	d
vis_mul8x16	sparc/vis.h	215;"	d
vis_mul8x16al	sparc/vis.h	217;"	d
vis_mul8x16au	sparc/vis.h	216;"	d
vis_muld8sux16	sparc/vis.h	220;"	d
vis_muld8ulx16	sparc/vis.h	221;"	d
vis_nand	sparc/vis.h	311;"	d
vis_nands	sparc/vis.h	312;"	d
vis_nor	sparc/vis.h	307;"	d
vis_nors	sparc/vis.h	308;"	d
vis_not1	sparc/vis.h	301;"	d
vis_not1s	sparc/vis.h	302;"	d
vis_not2	sparc/vis.h	303;"	d
vis_not2s	sparc/vis.h	304;"	d
vis_opc_base	sparc/vis.h	44;"	d
vis_opf	sparc/vis.h	45;"	d
vis_or	sparc/vis.h	305;"	d
vis_ornot1	sparc/vis.h	317;"	d
vis_ornot1s	sparc/vis.h	318;"	d
vis_ornot2	sparc/vis.h	319;"	d
vis_ornot2s	sparc/vis.h	320;"	d
vis_ors	sparc/vis.h	306;"	d
vis_pack16	sparc/vis.h	207;"	d
vis_pack32	sparc/vis.h	208;"	d
vis_packfix	sparc/vis.h	209;"	d
vis_padd16	sparc/vis.h	196;"	d
vis_padd16s	sparc/vis.h	197;"	d
vis_padd32	sparc/vis.h	198;"	d
vis_padd32s	sparc/vis.h	199;"	d
vis_pdist	sparc/vis.h	328;"	d
vis_pmerge	sparc/vis.h	211;"	d
vis_psub16	sparc/vis.h	200;"	d
vis_psub16s	sparc/vis.h	201;"	d
vis_psub32	sparc/vis.h	202;"	d
vis_psub32s	sparc/vis.h	203;"	d
vis_r2m	sparc/vis.h	129;"	d
vis_r2m_2	sparc/vis.h	132;"	d
vis_rd_d	sparc/vis.h	53;"	d
vis_rd_s	sparc/vis.h	52;"	d
vis_rs1_d	sparc/vis.h	49;"	d
vis_rs1_s	sparc/vis.h	48;"	d
vis_rs2_d	sparc/vis.h	51;"	d
vis_rs2_s	sparc/vis.h	50;"	d
vis_s	sparc/vis.h	119;"	d
vis_s12s	sparc/vis.h	107;"	d
vis_s22s	sparc/vis.h	113;"	d
vis_s2d	sparc/vis.h	89;"	d
vis_sd2d	sparc/vis.h	76;"	d
vis_set_gsr	sparc/vis.h	/^static inline void vis_set_gsr(unsigned int _val)$/;"	f
vis_src1	sparc/vis.h	297;"	d
vis_src1s	sparc/vis.h	298;"	d
vis_src2	sparc/vis.h	299;"	d
vis_src2s	sparc/vis.h	300;"	d
vis_sreg	sparc/vis.h	46;"	d
vis_ss2d	sparc/vis.h	69;"	d
vis_ss2s	sparc/vis.h	55;"	d
vis_st32	sparc/vis.h	157;"	d
vis_st32_2	sparc/vis.h	158;"	d
vis_st64	sparc/vis.h	161;"	d
vis_st64_2	sparc/vis.h	162;"	d
vis_stblk	sparc/vis.h	174;"	d
vis_xnor	sparc/vis.h	315;"	d
vis_xnors	sparc/vis.h	316;"	d
vis_xor	sparc/vis.h	313;"	d
vis_xors	sparc/vis.h	314;"	d
visualization_buffer	mpegvideo.h	/^    uint8_t *visualization_buffer[3]; \/\/< temporary buffer vor MV visualization$/;"	m	struct:MpegEncContext
vlc	dv.c	/^   uint32_t vlc;$/;"	m	struct:dv_vlc_pair	file:
vlc	huffyuv.c	/^    VLC vlc[3];$/;"	m	struct:HYuvContext	file:
vlc	mpegvideo.h	/^    VLC vlc;                       \/\/\/< decoding only deprected FIXME remove$/;"	m	struct:RLTable
vlc	msmpeg4data.h	/^    VLC vlc;                \/* decoding: vlc *\/$/;"	m	struct:MVTable
vlc_dc_chroma_bits	mpeg12data.h	/^const unsigned char vlc_dc_chroma_bits[12] = {$/;"	v
vlc_dc_chroma_code	mpeg12data.h	/^const uint16_t vlc_dc_chroma_code[12] = {$/;"	v
vlc_dc_lum_bits	mpeg12data.h	/^static const unsigned char vlc_dc_lum_bits[12] = {$/;"	v
vlc_dc_lum_code	mpeg12data.h	/^static const uint16_t vlc_dc_lum_code[12] = {$/;"	v
vlc_state	ffv1.c	/^    VlcState *vlc_state;$/;"	m	struct:PlaneContext	file:
vlcs	mjpeg.c	/^    VLC vlcs[2][4];$/;"	m	struct:MJpegDecodeContext	file:
vmd_decode	vmdav.c	/^static void vmd_decode(VmdVideoContext *s)$/;"	f	file:
vmdaudio_decode_audio	vmdav.c	/^static void vmdaudio_decode_audio(VmdAudioContext *s, unsigned char *data,$/;"	f	file:
vmdaudio_decode_frame	vmdav.c	/^static int vmdaudio_decode_frame(AVCodecContext *avctx,$/;"	f	file:
vmdaudio_decode_init	vmdav.c	/^static int vmdaudio_decode_init(AVCodecContext *avctx)$/;"	f	file:
vmdaudio_decoder	vmdav.c	/^AVCodec vmdaudio_decoder = {$/;"	v
vmdaudio_loadsound	vmdav.c	/^static int vmdaudio_loadsound(VmdAudioContext *s, unsigned char *data,$/;"	f	file:
vmdvideo_decode_end	vmdav.c	/^static int vmdvideo_decode_end(AVCodecContext *avctx)$/;"	f	file:
vmdvideo_decode_frame	vmdav.c	/^static int vmdvideo_decode_frame(AVCodecContext *avctx,$/;"	f	file:
vmdvideo_decode_init	vmdav.c	/^static int vmdvideo_decode_init(AVCodecContext *avctx)$/;"	f	file:
vmdvideo_decoder	vmdav.c	/^AVCodec vmdvideo_decoder = {$/;"	v
vo_type	mpegvideo.h	/^    int vo_type;$/;"	m	struct:MpegEncContext
vol_control_parameters	mpegvideo.h	/^    int vol_control_parameters;      \/\/\/< does the stream contain the low_delay flag, used to workaround buggy encoders $/;"	m	struct:MpegEncContext
vol_flags	xvidff.c	/^    int vol_flags;                 \/** VOL flags for XviD Encoder *\/$/;"	m	struct:xvid_context	file:
vol_sprite_usage	mpegvideo.h	/^    int vol_sprite_usage;$/;"	m	struct:MpegEncContext
vop_dquant_decoding	vc9.c	/^static int vop_dquant_decoding(VC9Context *v)$/;"	f	file:
vop_flags	xvidff.c	/^    int vop_flags;                 \/** VOP flags for XviD Encoder *\/$/;"	m	struct:xvid_context	file:
vp31_ac_scale_factor	vp3data.h	/^static const uint32_t vp31_ac_scale_factor[64] =$/;"	v
vp31_dc_scale_factor	vp3data.h	/^static const int16_t vp31_dc_scale_factor[64] =$/;"	v
vp31_filter_limit_values	vp3data.h	/^static const uint32_t vp31_filter_limit_values[64] = $/;"	v
vp31_inter_dequant	vp3data.h	/^static const int16_t vp31_inter_dequant[64] =$/;"	v
vp31_intra_c_dequant	vp3data.h	/^static const int16_t vp31_intra_c_dequant[64] =$/;"	v
vp31_intra_y_dequant	vp3data.h	/^static const int16_t vp31_intra_y_dequant[64] =$/;"	v
vp3_calculate_pixel_addresses	vp3.c	/^static void vp3_calculate_pixel_addresses(Vp3DecodeContext *s) $/;"	f	file:
vp3_decode_end	vp3.c	/^static int vp3_decode_end(AVCodecContext *avctx)$/;"	f	file:
vp3_decode_frame	vp3.c	/^static int vp3_decode_frame(AVCodecContext *avctx, $/;"	f	file:
vp3_decode_init	vp3.c	/^static int vp3_decode_init(AVCodecContext *avctx)$/;"	f	file:
vp3_decoder	vp3.c	/^AVCodec vp3_decoder = {$/;"	v
vp3_dsp_init	dsputil.h	/^    void (*vp3_dsp_init)(void);$/;"	m	struct:DSPContext
vp3_dsp_init_c	vp3dsp.c	/^void vp3_dsp_init_c(void)$/;"	f
vp3_dsp_init_mmx	i386/vp3dsp_mmx.c	/^void vp3_dsp_init_mmx(void)$/;"	f
vp3_dsp_init_sse2	i386/vp3dsp_sse2.c	/^void vp3_dsp_init_sse2(void)$/;"	f
vp3_idct	dsputil.h	/^    void (*vp3_idct)(int16_t *input_data, int16_t *dequant_matrix,$/;"	m	struct:DSPContext
vp3_idct_c	vp3dsp.c	/^void vp3_idct_c(int16_t *input_data, int16_t *dequant_matrix,$/;"	f
vp3_idct_mmx	i386/vp3dsp_mmx.c	/^void vp3_idct_mmx(int16_t *input_data, int16_t *dequant_matrix,$/;"	f
vp3_idct_sse2	i386/vp3dsp_sse2.c	/^void vp3_idct_sse2(int16_t *input_data, int16_t *dequant_matrix,$/;"	f
vqa_debug	vqavideo.c	/^static inline void vqa_debug(const char *format, ...) { }$/;"	f	file:
vqa_debug	vqavideo.c	96;"	d	file:
vqa_decode_chunk	vqavideo.c	/^static void vqa_decode_chunk(VqaContext *s)$/;"	f	file:
vqa_decode_end	vqavideo.c	/^static int vqa_decode_end(AVCodecContext *avctx)$/;"	f	file:
vqa_decode_frame	vqavideo.c	/^static int vqa_decode_frame(AVCodecContext *avctx,$/;"	f	file:
vqa_decode_init	vqavideo.c	/^static int vqa_decode_init(AVCodecContext *avctx)$/;"	f	file:
vqa_decoder	vqavideo.c	/^AVCodec vqa_decoder = {$/;"	v
vqa_version	vqavideo.c	/^    int vqa_version;  \/* this should be either 1, 2 or 3 *\/$/;"	m	struct:VqaContext	file:
vs16	ppc/fdct_altivec.c	27;"	d	file:
vs32	ppc/fdct_altivec.c	28;"	d	file:
vs_total_ac_bits	dv.c	/^static const int vs_total_ac_bits = (100 * 4 + 68*2) * 5;$/;"	v	file:
vsad	dsputil.h	/^    me_cmp_func vsad[5];$/;"	m	struct:DSPContext
vsad16_c	dsputil.c	/^static int vsad16_c(\/*MpegEncContext*\/ void *c, uint8_t *s1, uint8_t *s2, int stride, int h){$/;"	f	file:
vsad16_mmx	i386/dsputil_mmx.c	/^static int vsad16_mmx(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
vsad16_mmx2	i386/dsputil_mmx.c	/^static int vsad16_mmx2(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h) {$/;"	f	file:
vsad_intra16_c	dsputil.c	/^static int vsad_intra16_c(\/*MpegEncContext*\/ void *c, uint8_t *s, uint8_t *dummy, int stride, int h){$/;"	f	file:
vsad_intra16_mmx	i386/dsputil_mmx.c	/^static int vsad_intra16_mmx(void *v, uint8_t * pix, uint8_t * dummy, int line_size, int h) {$/;"	f	file:
vsad_intra16_mmx2	i386/dsputil_mmx.c	/^static int vsad_intra16_mmx2(void *v, uint8_t * pix, uint8_t * dummy, int line_size, int h) {$/;"	f	file:
vsnprintf	common.h	174;"	d
vsse	dsputil.h	/^    me_cmp_func vsse[5];$/;"	m	struct:DSPContext
vsse16_c	dsputil.c	/^static int vsse16_c(\/*MpegEncContext*\/ void *c, uint8_t *s1, uint8_t *s2, int stride, int h){$/;"	f	file:
vsse_intra16_c	dsputil.c	/^static int vsse_intra16_c(\/*MpegEncContext*\/ void *c, uint8_t *s, uint8_t *dummy, int stride, int h){$/;"	f	file:
vstransform	vc9.c	/^    int vstransform;      \/\/\/< variable-size [48]x[48] transform type + info$/;"	m	struct:VC9Context	file:
vu16	ppc/fdct_altivec.c	30;"	d	file:
vu32	ppc/fdct_altivec.c	31;"	d	file:
vu8	ppc/fdct_altivec.c	29;"	d	file:
vui_parameters_present_flag	h264.c	/^    int vui_parameters_present_flag;$/;"	m	struct:SPS	file:
w	i386/mmx.h	/^	short			w[4];	\/* 4 Word (16-bit) values *\/$/;"	m
w	truemotion1.c	/^    int x, y, w, h;$/;"	m	struct:TrueMotion1Context	file:
w04	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used w04=		0x0004000400040004LL;$/;"	v	file:
w05	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used w05=		0x0005000500050005LL;$/;"	v	file:
w20	libpostproc/postprocess.c	/^static uint64_t __attribute__((aligned(8))) attribute_used w20=		0x0020002000200020LL;$/;"	v	file:
w53	dsputil.h	/^    me_cmp_func w53[5];$/;"	m	struct:DSPContext
w53_16_c	dsputil.c	/^static int w53_16_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h){$/;"	f	file:
w53_8_c	dsputil.c	/^static int w53_8_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h){$/;"	f	file:
w97	dsputil.h	/^    me_cmp_func w97[5];$/;"	m	struct:DSPContext
w97_16_c	dsputil.c	/^static int w97_16_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h){$/;"	f	file:
w97_8_c	dsputil.c	/^static int w97_8_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int h){$/;"	f	file:
w_c	dsputil.c	/^static inline int w_c(void *v, uint8_t * pix1, uint8_t * pix2, int line_size, int w, int h, int type){$/;"	f	file:
wanted_bits	mpegvideo.h	/^    int64_t wanted_bits;$/;"	m	struct:MpegEncContext
wavtable1	ra144.c	/^	signed short wavtable1[2304];$/;"	m	file:
wavtable1	ra144.h	/^static const signed short wavtable1[2304]={$/;"	v
wavtable2	ra144.c	/^	unsigned short wavtable2[2304];$/;"	m	file:
wavtable2	ra144.h	/^static const unsigned short wavtable2[2304]={$/;"	v
weight_h264_pixels_tab	dsputil.h	/^    h264_weight_func weight_h264_pixels_tab[10];$/;"	m	struct:DSPContext
weighted_bipred_idc	h264.c	/^    int weighted_bipred_idc;$/;"	m	struct:PPS	file:
weighted_pred	h264.c	/^    int weighted_pred;          \/\/\/< weighted_pred_flag$/;"	m	struct:PPS	file:
wh64	alpha/asm.h	100;"	d
wh64	alpha/asm.h	159;"	d
width	avcodec.h	/^    int width, height;$/;"	m	struct:AVCodecContext
width	avcodec.h	/^    int width;$/;"	m	struct:AVPanScan
width	cinepak.c	/^    int width, height;$/;"	m	struct:CinepakContext	file:
width	cyuv.c	/^    int width, height;$/;"	m	struct:CyuvDecodeContext	file:
width	dvdata.h	/^    int              width;               \/* picture width in pixels *\/$/;"	m	struct:DVprofile
width	ffv1.c	/^    int width, height;$/;"	m	struct:FFV1Context	file:
width	huffyuv.c	/^    int width, height;$/;"	m	struct:HYuvContext	file:
width	indeo3.c	/^    int width, height;$/;"	m	struct:Indeo3DecodeContext	file:
width	indeo3.c	/^  long width;$/;"	m	file:
width	mjpeg.c	/^    int width, height;$/;"	m	struct:MJpegDecodeContext	file:
width	mpegvideo.h	/^    int width, height;\/\/\/< picture size. must be a multiple of 16 $/;"	m	struct:MpegEncContext
width	parser.c	/^    int width, height;$/;"	m	struct:ParseContext1	file:
width	png.c	/^    int width, height;$/;"	m	struct:PNGContext	file:
width	snow.c	/^    int width;$/;"	m	struct:Plane	file:
width	snow.c	/^    int width;$/;"	m	struct:SubBand	file:
width	svq1.c	/^static struct { int width; int height; } svq1_frame_size_table[8] = {$/;"	m	file:
width	truemotion1.c	/^    uint16_t width;$/;"	m	struct:frame_header	file:
width	ulti.c	/^    int width, height, blocks;$/;"	m	struct:UltimotionDecodeContext	file:
width	vc9.c	/^    int width;          \/\/\/< Width of the buffer$/;"	m	struct:BitPlane	file:
width	vp3.c	/^    int width, height;$/;"	m	struct:Vp3DecodeContext	file:
width	vqavideo.c	/^    int width;   \/* width of a frame *\/$/;"	m	struct:VqaContext	file:
window	mpegaudiodec.c	/^static MPA_INT window[512] __attribute__((aligned(16)));$/;"	v	file:
window	sonic.c	/^    int *window;$/;"	m	struct:SonicContext	file:
window_size	sonic.c	/^    int window_size;$/;"	m	struct:SonicContext	file:
windows	wmadec.c	/^    float *windows[BLOCK_NB_SIZES];$/;"	m	struct:WMADecodeContext	file:
wm0101	liba52/resample_mmx.c	/^static uint64_t __attribute__((aligned(8))) attribute_used wm0101= 0x0000FFFF0000FFFFLL;$/;"	v	file:
wm1010	i386/simple_idct_mmx.c	/^static const uint64_t attribute_used __attribute__((aligned(8))) wm1010= 0xFFFF0000FFFF0000ULL;$/;"	v	file:
wm1010	liba52/resample_mmx.c	/^static uint64_t __attribute__((aligned(8))) attribute_used wm1010= 0xFFFF0000FFFF0000LL;$/;"	v	file:
wm1100	liba52/resample_mmx.c	/^static uint64_t __attribute__((aligned(8))) attribute_used wm1100= 0xFFFFFFFF00000000LL;$/;"	v	file:
wma_critical_freqs	wmadata.h	/^static const uint16_t wma_critical_freqs[25] = {$/;"	v
wma_decode_block	wmadec.c	/^static int wma_decode_block(WMADecodeContext *s)$/;"	f	file:
wma_decode_end	wmadec.c	/^static int wma_decode_end(AVCodecContext *avctx)$/;"	f	file:
wma_decode_frame	wmadec.c	/^static int wma_decode_frame(WMADecodeContext *s, int16_t *samples)$/;"	f	file:
wma_decode_init	wmadec.c	/^static int wma_decode_init(AVCodecContext * avctx)$/;"	f	file:
wma_decode_superframe	wmadec.c	/^static int wma_decode_superframe(AVCodecContext *avctx, $/;"	f	file:
wma_lsp_to_curve	wmadec.c	/^static void wma_lsp_to_curve(WMADecodeContext *s, $/;"	f	file:
wma_lsp_to_curve_init	wmadec.c	/^static void wma_lsp_to_curve_init(WMADecodeContext *s, int frame_len)$/;"	f	file:
wmav1_decoder	wmadec.c	/^AVCodec wmav1_decoder =$/;"	v
wmav2_decoder	wmadec.c	/^AVCodec wmav2_decoder =$/;"	v
wmv1_c_dc_scale_table	msmpeg4data.h	/^static uint8_t wmv1_c_dc_scale_table[32]={$/;"	v
wmv1_decoder	h263dec.c	/^AVCodec wmv1_decoder = {$/;"	v
wmv1_encoder	mpegvideo.c	/^AVCodec wmv1_encoder = {$/;"	v
wmv1_scantable	msmpeg4data.h	/^static const uint8_t *wmv1_scantable[WMV1_SCANTABLE_COUNT+1]={$/;"	v
wmv1_scantable00	msmpeg4data.h	/^static const uint8_t wmv1_scantable00[64]= {$/;"	v
wmv1_scantable01	msmpeg4data.h	/^static const uint8_t wmv1_scantable01[64]= {$/;"	v
wmv1_scantable02	msmpeg4data.h	/^static const uint8_t wmv1_scantable02[64]= {$/;"	v
wmv1_scantable03	msmpeg4data.h	/^static const uint8_t wmv1_scantable03[64]= {$/;"	v
wmv1_y_dc_scale_table	msmpeg4data.h	/^static uint8_t wmv1_y_dc_scale_table[32]={$/;"	v
wmv2_add_block	wmv2.c	/^static void wmv2_add_block(Wmv2Context *w, DCTELEM *block1, uint8_t *dst, int stride, int n){$/;"	f	file:
wmv2_common_init	wmv2.c	/^static void wmv2_common_init(Wmv2Context * w){$/;"	f	file:
wmv2_decode_init	wmv2.c	/^static int wmv2_decode_init(AVCodecContext *avctx){$/;"	f	file:
wmv2_decode_inter_block	wmv2.c	/^static inline int wmv2_decode_inter_block(Wmv2Context *w, DCTELEM *block, int n, int cbp){$/;"	f	file:
wmv2_decode_mb	wmv2.c	/^static int wmv2_decode_mb(MpegEncContext *s, DCTELEM block[6][64])$/;"	f	file:
wmv2_decode_motion	wmv2.c	/^static inline int wmv2_decode_motion(Wmv2Context *w, int *mx_ptr, int *my_ptr){$/;"	f	file:
wmv2_decoder	wmv2.c	/^AVCodec wmv2_decoder = {$/;"	v
wmv2_encode_init	wmv2.c	/^static int wmv2_encode_init(AVCodecContext *avctx){$/;"	f	file:
wmv2_encoder	wmv2.c	/^AVCodec wmv2_encoder = {$/;"	v
wmv2_inter_table	msmpeg4data.h	/^static const uint32_t (*wmv2_inter_table[WMV2_INTER_CBP_TABLE_COUNT])[2]={$/;"	v
wmv2_mspel8_h_lowpass	dsputil.c	/^static void wmv2_mspel8_h_lowpass(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h){$/;"	f	file:
wmv2_mspel8_h_lowpass	sh4/qpel.c	/^static void wmv2_mspel8_h_lowpass(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int h){$/;"	f	file:
wmv2_mspel8_v_lowpass	dsputil.c	/^static void wmv2_mspel8_v_lowpass(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int w){$/;"	f	file:
wmv2_mspel8_v_lowpass	sh4/qpel.c	/^static void wmv2_mspel8_v_lowpass(uint8_t *dst, uint8_t *src, int dstStride, int srcStride, int w){$/;"	f	file:
wmv2_pred_motion	wmv2.c	/^static int16_t *wmv2_pred_motion(Wmv2Context *w, int *px, int *py){$/;"	f	file:
wmv2_scantableA	msmpeg4data.h	/^static const uint8_t wmv2_scantableA[64]={$/;"	v
wmv2_scantableB	msmpeg4data.h	/^static const uint8_t wmv2_scantableB[64]={$/;"	v
wmv3_dc_scale_table	vc9data.h	/^const uint8_t wmv3_dc_scale_table[32]={$/;"	v
wmv3_decoder	vc9.c	/^AVCodec wmv3_decoder = {$/;"	v
wordstream	4xm.c	/^    uint16_t *wordstream;$/;"	m	struct:FourXContext	file:
work	ra144.c	/^	unsigned short int work[50];$/;"	m	file:
work_sem	beosthread.c	/^    sem_id work_sem;$/;"	m	struct:ThreadContext	file:
work_sem	w32thread.c	/^    HANDLE work_sem;$/;"	m	struct:ThreadContext	file:
workaround_bugs	avcodec.h	/^    int workaround_bugs;$/;"	m	struct:AVCodecContext
workaround_bugs	mpegvideo.h	/^    int workaround_bugs;       \/\/\/< workaround bugs in encoders which cannot be detected automatically $/;"	m	struct:MpegEncContext
worker	pthread.c	/^static void* worker(void *v) $/;"	f	file:
workers	pthread.c	/^    pthread_t *workers;$/;"	m	struct:ThreadContext	file:
write_back_intra_pred_mode	h264.c	/^static inline void write_back_intra_pred_mode(H264Context *h){$/;"	f	file:
write_back_motion	h264.c	/^static inline void write_back_motion(H264Context *h, int mb_type){$/;"	f	file:
write_back_non_zero_count	h264.c	/^static inline void write_back_non_zero_count(H264Context *h){$/;"	f	file:
write_header	ffv1.c	/^static void write_header(FFV1Context *f){$/;"	f	file:
write_long	adx.c	/^static void write_long(unsigned char *p,uint32_t v)$/;"	f	file:
write_quant_table	ffv1.c	/^static void write_quant_table(RangeCoder *c, int16_t *quant_table){$/;"	f	file:
write_slice_end	mpegvideo.c	/^static void write_slice_end(MpegEncContext *s){$/;"	f	file:
write_uint_max	sonic.c	/^static void write_uint_max(PutBitContext *pb, unsigned int value, unsigned int max)$/;"	f	file:
wrong_run	h263data.h	/^static const uint8_t wrong_run[102] = {$/;"	v
x	motion_est.c	/^    int x, y;$/;"	m	struct:Minima	file:
x	snow.c	/^    int16_t *x;$/;"	m	struct:SubBand	file:
x	svq1.c	/^  int		 x;$/;"	m	struct:svq1_pmv_s	file:
x	truemotion1.c	/^    int x, y, w, h;$/;"	m	struct:TrueMotion1Context	file:
x1	cinepak.c	/^    uint16_t          x1, y1;$/;"	m	file:
x2	cinepak.c	/^    uint16_t          x2, y2;$/;"	m	file:
x264_encoder	x264.c	/^AVCodec x264_encoder = {$/;"	v
xC1S7	vp3dsp.c	31;"	d	file:
xC2S6	vp3dsp.c	32;"	d	file:
xC3S5	vp3dsp.c	33;"	d	file:
xC4S4	vp3dsp.c	34;"	d	file:
xC5S3	vp3dsp.c	35;"	d	file:
xC6S2	vp3dsp.c	36;"	d	file:
xC7S1	vp3dsp.c	37;"	d	file:
xStride	h264.c	1615;"	d	file:
x_chroma_shift	imgconvert.c	/^    uint8_t x_chroma_shift;  \/* X chroma subsampling factor is 2 ^ shift *\/$/;"	m	struct:PixFmtInfo	file:
xa_adpcm_table	adpcm.c	/^static const int xa_adpcm_table[5][2] = {$/;"	v	file:
xa_decode	adpcm.c	/^static void xa_decode(short *out, const unsigned char *in, $/;"	f	file:
xan_decode_end	xan.c	/^static int xan_decode_end(AVCodecContext *avctx)$/;"	f	file:
xan_decode_frame	xan.c	/^static int xan_decode_frame(AVCodecContext *avctx,$/;"	f	file:
xan_decode_init	xan.c	/^static int xan_decode_init(AVCodecContext *avctx)$/;"	f	file:
xan_dpcm_decoder	dpcm.c	/^AVCodec xan_dpcm_decoder = {$/;"	v
xan_huffman_decode	xan.c	/^static int xan_huffman_decode(unsigned char *dest, unsigned char *src)$/;"	f	file:
xan_unpack	xan.c	/^static void xan_unpack(unsigned char *dest, unsigned char *src)$/;"	f	file:
xan_wc3_build_palette	xan.c	/^static void inline xan_wc3_build_palette(XanContext *s, $/;"	f	file:
xan_wc3_copy_pixel_run	xan.c	/^static void inline xan_wc3_copy_pixel_run(XanContext *s, $/;"	f	file:
xan_wc3_decode_frame	xan.c	/^static void xan_wc3_decode_frame(XanContext *s) {$/;"	f	file:
xan_wc3_decoder	xan.c	/^AVCodec xan_wc3_decoder = {$/;"	v
xan_wc3_output_pixel_run	xan.c	/^static void inline xan_wc3_output_pixel_run(XanContext *s, $/;"	f	file:
xan_wc4_decode_frame	xan.c	/^static void xan_wc4_decode_frame(XanContext *s) {$/;"	f	file:
xchg_mb_border	h264.c	/^static inline void xchg_mb_border(H264Context *h, uint8_t *src_y, uint8_t *src_cb, uint8_t *src_cr, int linesize, int uvlinesize, int xchg){$/;"	f	file:
xcos1	ac3tab.h	/^static int16_t xcos1[128];$/;"	v
xglue	imgconvert.c	42;"	d	file:
xl_decoder	xl.c	/^AVCodec xl_decoder = {$/;"	v
xl_table	xl.c	/^const int xl_table[32] = {$/;"	v
xmax	mpegvideo.h	/^    int xmax;$/;"	m	struct:MotionEstContext
xmin	mpegvideo.h	/^    int xmin;$/;"	m	struct:MotionEstContext
xoffset	truemotion1.c	/^    uint16_t xoffset;$/;"	m	struct:frame_header	file:
xpos	indeo3.c	/^  long xpos;$/;"	m	file:
xsin1	ac3tab.h	/^static int16_t xsin1[128];$/;"	v
xsize	mpegaudiodec.c	/^    int xsize;$/;"	m	struct:HuffTable	file:
xsize	truemotion1.c	/^    uint16_t xsize;$/;"	m	struct:frame_header	file:
xsize	xvidff.c	/^    int xsize, ysize;              \/** Frame size *\/$/;"	m	struct:xvid_context	file:
xvid_build	mpegvideo.h	/^    int xvid_build;$/;"	m	struct:MpegEncContext
xvid_context	xvidff.c	/^typedef struct xvid_context {$/;"	s	file:
xvid_context_t	xvidff.c	/^} xvid_context_t;$/;"	t	file:
xvid_correct_framerate	xvidff.c	/^void xvid_correct_framerate(AVCodecContext *avctx) {$/;"	f
xvid_encoder	xvidff.c	/^AVCodec xvid_encoder = {$/;"	v
xvid_ff_2pass	xvidff.c	/^int xvid_ff_2pass(void *ref, int cmd, void *p1, void *p2) {$/;"	f
xvid_ff_2pass_after	xvidff.c	/^static int xvid_ff_2pass_after(xvid_context_t *ref,$/;"	f	file:
xvid_ff_2pass_before	xvidff.c	/^static int xvid_ff_2pass_before(xvid_context_t *ref,$/;"	f	file:
xvid_ff_2pass_create	xvidff.c	/^static int xvid_ff_2pass_create(xvid_plg_create_t * param,$/;"	f	file:
xvid_ff_2pass_destroy	xvidff.c	/^static int xvid_ff_2pass_destroy(xvid_context_t *ref, $/;"	f	file:
xvid_ff_pass1	xvidff.c	/^typedef struct xvid_ff_pass1 {$/;"	s	file:
xvid_ff_pass1_t	xvidff.c	/^} xvid_ff_pass1_t;$/;"	t	file:
xvid_strip_vol_header	xvidff.c	/^int xvid_strip_vol_header(AVCodecContext *avctx, $/;"	f
xvmc_acceleration	avcodec.h	/^    int xvmc_acceleration;$/;"	m	struct:AVCodecContext
y	g726.c	/^	 int y;               \/**< quantizer scaling factor for the next iteration *\/$/;"	m	struct:G726Context	file:
y	motion_est.c	/^    int x, y;$/;"	m	struct:Minima	file:
y	png.c	/^    int y;$/;"	m	struct:PNGContext	file:
y	snow.c	/^    int y;$/;"	m	file:
y	svq1.c	/^  int		 y;$/;"	m	struct:svq1_pmv_s	file:
y	truemotion1.c	/^    int x, y, w, h;$/;"	m	struct:TrueMotion1Context	file:
y0	cinepak.c	/^    uint8_t  y0, y1, y2, y3;$/;"	m	file:
y0	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
y1	cinepak.c	/^    uint16_t          x1, y1;$/;"	m	file:
y1	cinepak.c	/^    uint8_t  y0, y1, y2, y3;$/;"	m	file:
y1	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
y2	cinepak.c	/^    uint16_t          x2, y2;$/;"	m	file:
y2	cinepak.c	/^    uint8_t  y0, y1, y2, y3;$/;"	m	file:
y2	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
y3	cinepak.c	/^    uint8_t  y0, y1, y2, y3;$/;"	m	file:
y3	roqvideo.c	/^  unsigned char y0, y1, y2, y3, u, v;$/;"	m	file:
yHistogram	libpostproc/postprocess_internal.h	/^	uint64_t *yHistogram;$/;"	m	struct:PPContext
y_ac_table_index	vc9.c	/^    int y_ac_table_index; \/\/\/< Luma index from AC2FRM element$/;"	m	struct:VC9Context	file:
y_b_table	xan.c	/^static int y_b_table[256];$/;"	v	file:
y_block_height	svq1.c	/^    int y_block_height;$/;"	m	struct:SVQ1Context	file:
y_block_width	svq1.c	/^    int y_block_width;$/;"	m	struct:SVQ1Context	file:
y_ccir_to_jpeg	imgconvert.c	/^static uint8_t y_ccir_to_jpeg[256];$/;"	v	file:
y_chroma_shift	imgconvert.c	/^    uint8_t y_chroma_shift;  \/* Y chroma subsampling factor is 2 ^ shift *\/$/;"	m	struct:PixFmtInfo	file:
y_dc_scale	mpegvideo.h	/^    int y_dc_scale, c_dc_scale;$/;"	m	struct:MpegEncContext
y_dc_scale_table	mpegvideo.h	/^    uint8_t *y_dc_scale_table;     \/\/\/< qscale -> y_dc_scale table $/;"	m	struct:MpegEncContext
y_g_table	xan.c	/^static int y_g_table[256];$/;"	v	file:
y_h	indeo3.c	/^  unsigned short y_w, y_h;$/;"	m	file:
y_jpeg_to_ccir	imgconvert.c	/^static uint8_t y_jpeg_to_ccir[256];$/;"	v	file:
y_predictor_table	truemotion1.c	/^    uint32_t y_predictor_table[1024];$/;"	m	struct:TrueMotion1Context	file:
y_r_table	xan.c	/^static int y_r_table[256];$/;"	v	file:
y_stride	roqvideo.c	/^    int y_stride;$/;"	m	struct:RoqContext	file:
y_superblock_height	vp3.c	/^    int y_superblock_height;$/;"	m	struct:Vp3DecodeContext	file:
y_superblock_width	vp3.c	/^    int y_superblock_width;$/;"	m	struct:Vp3DecodeContext	file:
y_w	indeo3.c	/^  unsigned short y_w, y_h;$/;"	m	file:
ydt	truemotion1.c	/^    int16_t ydt[8];$/;"	m	struct:TrueMotion1Context	file:
ydt1	truemotion1data.h	/^static int16_t ydt1[8] = { 0, -2, 2, -6, 6, -12, 12, -12 };$/;"	v
ydt2	truemotion1data.h	/^static int16_t ydt2[8] = { 0, -2, 2, -6, 6, -12, 12, -12 };$/;"	v
ydt3	truemotion1data.h	/^static int16_t ydt3[8] = { 4, -6, 20, -20, 46, -46, 94, -94 };$/;"	v
ydt4	truemotion1data.h	/^static int16_t ydt4[8] = { 0, -4, 4, -16, 16, -36, 36, -80 };$/;"	v
ydts	truemotion1data.h	/^static int16_t *ydts[] = { ydt1, ydt2, ydt3, ydt4, NULL };$/;"	v
yl	g726.c	/^	 int yl;              \/**< slow scale factor *\/$/;"	m	struct:G726Context	file:
ymax	mpegvideo.h	/^    int ymax;$/;"	m	struct:MotionEstContext
ymin	mpegvideo.h	/^    int ymin;$/;"	m	struct:MotionEstContext
yoffset	truemotion1.c	/^    uint16_t yoffset;$/;"	m	struct:frame_header	file:
ypos	indeo3.c	/^  long ypos;$/;"	m	file:
ysize	truemotion1.c	/^    uint16_t ysize;$/;"	m	struct:frame_header	file:
ysize	xvidff.c	/^    int xsize, ysize;              \/** Frame size *\/$/;"	m	struct:xvid_context	file:
yu	g726.c	/^	 int yu;              \/**< fast scale factor *\/$/;"	m	struct:G726Context	file:
yuv420p_to_uyvy422	imgconvert.c	/^static void yuv420p_to_uyvy422(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv420p_to_yuv422	imgconvert.c	/^static void yuv420p_to_yuv422(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv422_to_yuv420p	imgconvert.c	/^static void yuv422_to_yuv420p(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv422_to_yuv422p	imgconvert.c	/^static void yuv422_to_yuv422p(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv422p_to_uyvy422	imgconvert.c	/^static void yuv422p_to_uyvy422(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv422p_to_yuv422	imgconvert.c	/^static void yuv422p_to_yuv422(AVPicture *dst, const AVPicture *src,$/;"	f	file:
yuv444p_to_rgb24	imgconvert_template.h	/^static void yuv444p_to_rgb24(AVPicture *dst, const AVPicture *src,$/;"	f
yuvj444p_to_rgb24	imgconvert_template.h	/^static void yuvj444p_to_rgb24(AVPicture *dst, const AVPicture *src,$/;"	f
yuy2	huffyuv.c	/^    int yuy2;                               \/\/use yuy2 instead of 422P$/;"	m	struct:HYuvContext	file:
zap	alpha/asm.h	141;"	d
zap	alpha/asm.h	80;"	d
zap	alpha/asm.h	94;"	d
zapnot	alpha/asm.h	142;"	d
zapnot	alpha/asm.h	81;"	d
zapnot	alpha/asm.h	95;"	d
zero	alpha/regdef.h	43;"	d
zero	liba52/downmix.c	/^static void zero (sample_t * samples)$/;"	f	file:
zero_cmp	dsputil.c	/^static int zero_cmp(void *s, uint8_t *a, uint8_t *b, int stride, int h){$/;"	f	file:
zero_cmp	motion_est.c	/^static int zero_cmp(void *s, uint8_t *a, uint8_t *b, int stride, int h){$/;"	f	file:
zero_hpel	motion_est.c	/^static void zero_hpel(uint8_t *a, const uint8_t *b, int stride, int h){$/;"	f	file:
zero_snr_offsets	liba52/parse.c	/^static inline int zero_snr_offsets (int nfchans, a52_state_t * state)$/;"	f	file:
zero_state	rangecoder.h	/^    uint8_t zero_state[256];$/;"	m	struct:RangeCoder
zigzag_index	vp3data.h	/^static __attribute__((unused)) int zigzag_index[64];$/;"	v
zigzag_scan	h264data.h	/^static const uint8_t zigzag_scan[16]={$/;"	v
zlib_decoder	lcl.c	/^AVCodec zlib_decoder = {$/;"	v
zlib_encoder	lcl.c	/^AVCodec zlib_encoder = {$/;"	v
zstream	lcl.c	/^    z_stream zstream;$/;"	m	struct:LclContext	file:
zstream	png.c	/^    z_stream zstream;$/;"	m	struct:PNGContext	file:
zstream	tscc.c	/^    z_stream zstream;$/;"	m	struct:TsccContext	file:

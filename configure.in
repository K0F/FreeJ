dnl ==============================================================
dnl Process this file with autoconf to produce a configure script.
dnl ==============================================================
dnl $Id$

AC_INIT(src/freej.cpp)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl ==============================================================
dnl Get the operating system and version number...
dnl ==============================================================
uname=`uname`
uversion=`uname -r | sed -e 's/-.*$//g;s/[\.]//g'`
AC_MSG_CHECKING(for which platform we are compiling)
case $uname in
     Linux)
     AC_MSG_RESULT(Linux)
     AC_DEFINE(HAVE_LINUX,1,[define if compiling for Linux])
     have_linux=yes
     AM_CONDITIONAL(ARCH_PPC, test x$hostcpu = xpowerpc) 
     if test $host_cpu = powerpc; then
       AC_DEFINE(ARCH_PPC,1,[define if compiling for Linux/PPC])
       AC_DEFINE(ARCH_POWERPC,1,[define if compiling for Linux/PPC])
       AC_DEFINE(POWERPC_MODE_32BITS,1,[define if compiling for PPC])
       AC_DEFINE(HAVE_ALTIVEC,1,[define if cpu supports Altivec instruction set])
       AC_DEFINE(HAVE_ALTIVEC_H,1,[define if cpu supports Altivec instruction set])
       AC_DEFINE(WORDS_BIGENDIAN,1,[define if compiling for Big Endian CPU])
       AC_DEFINE(PA_BIG_ENDIAN,1,[define big endian arch for portaudio])
       have_ppc=yes
     else
       AC_DEFINE(ARCH_X86,1,[define if compiling for Linux/x86])
       AC_DEFINE(PA_LITTLE_ENDIAN,1,[define little endian arch for portaudio])
     fi

     CPUFLAGS=""
     ;;

     Darwin)
     AC_MSG_RESULT(Darwin/OSX)
     AC_DEFINE(HAVE_DARWIN,1,[define if compiling for Apple Darwin OSX])
     AC_DEFINE(CONFIG_DARWIN,1,[define if compiling for Apple Darwin OSX])
     have_darwin=yes
     ;;
     *)
     echo "[!] Your system architecture is not supported by FreeJ"
     echo "[!] if you are interested in porting FreeJ to your architecture"
     echo "[!] you are very welcome to contact me <jaromil@dyne.org>"
     exit 0
     ;;
esac

AC_PROG_MAKE_SET

dnl ==============================================================
dnl Setup for automake
dnl ==============================================================

AM_SANITY_CHECK
AM_INIT_AUTOMAKE(FreeJ, 0.8.1)
AM_CONFIG_HEADER(config.h)


dnl ==============================================================
dnl Check for tools
dnl ==============================================================
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LEX
AC_PROG_YACC

dnl Check for dlopen support
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC

AM_PROG_LIBTOOL
AM_PROG_AS

dnl ==============================================================
dnl Add the local include path and some flags
dnl ==============================================================
CFLAGS="-pipe -D_REENTRANT"
if test x$have_darwin = xyes; then
  # add the fink default path to find headers
  CFLAGS="$CFLAGS -I/sw/include"
fi

#LIBS="-lpthread -lm -ldl"

dnl Checks for header files.
AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl ==============================================================
dnl Checks for library functions.
dnl ==============================================================
AC_CHECK_FUNCS(select malloc mmap ioctl)


dnl ==============================================================
dnl Check if we are going for a STATIC BUILD
dnl ==============================================================
AC_ARG_ENABLE(static-build,
[  --enable-static-build      statically include all libraries) (default: no)],
[ if test ! x$enableval = xyes; then
    static_build=no
  else
    static_build=yes
  fi ],[ static_build=no ])




dnl ==============================================================
dnl Check for SDL
dnl ==============================================================
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
            :,
	AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
           )
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_CFLAGS)

dnl AC_HEADER_DIRENT










dnl =====================================================
dnl CHECK if is wanted and there is AVILIB
dnl =====================================================
dnl AVI_LIBS=""
dnl if test ! x$use_ffmpeg = xyes; then
dnl    AC_AVIFILE(0.7.18)    
dnl    if test -z $HAVE_AVIFILE; then
dnl       echo "Error in avifile check, HAVE_AVIFILE is not declared"
dnl    fi
dnl    AC_ARG_ENABLE(avi,[  --enable-avi            compile Movie layer using AviFile (auto)],
dnl    # to this when --enable-avi is selected (check the value!)
dnl      [if test x$HAVE_AVIFILE = xyes -a ! x$enableval = xno; then
dnl 	AC_DEFINE(WITH_AVIFILE,1,
dnl             [define if linking to avifile library for AVI layer playback])
dnl 	have_avilayer=yes
dnl 	AC_SUBST(AVIFILE_LIBS)
dnl 	AC_SUBST(AVIFILE_CXXFLAGS)
dnl      fi],
dnl      # to this by default, when --enable-avi is not selected
dnl      [if test x$HAVE_AVIFILE = xyes; then
dnl 	AC_DEFINE(WITH_AVIFILE,1,
dnl             [define if linking to avifile library for AVI layer playback])
dnl         have_avilayer=yes
dnl         AC_SUBST(AVIFILE_LIBS)
dnl         AC_SUBST(AVIFILE_CXXFLAGS)
dnl      fi])
dnl fi

dnl dnl ==============================================================
dnl dnl ENABLE LIBFLASH
dnl dnl ==============================================================
dnl AC_ARG_ENABLE(flash,
dnl [  --enable-flash          compile with Flash layer (broken, default: no)],
dnl [ if test x$enableval = xno; then
dnl     have_flash=no
dnl   else
dnl     have_flash=yes;
dnl   fi ],[ have_flash=no ])
dnl if test x$have_flash = xyes; then
dnl    AC_DEFINE(WITH_FLASH,1,[define if compiling flash layer])
dnl    FLASH_LIBS=../libflash/libflash.a
dnl    FLASH_DIR=libflash
dnl    AC_SUBST(FLASH_LIBS)
dnl    AC_SUBST(FLASH_DIR)
dnl    echo "Using flash layer"
dnl fi






dnl ==============================================================
dnl CHECK if there is MIDI
dnl ==============================================================
AC_ARG_ENABLE(midi,
[  --enable-midi           compile with Midi controller (experimental, default: no)],
[ if test x$enableval = xno; then have_midi=no; else have_midi=yes; fi ], have_midi=no)
if test x$have_midi = xyes; then
   AC_DEFINE(WITH_MIDI,1,[define if compiling midi controller])
   echo "Compiling midi controller"
fi

dnl ==============================================================
dnl CHECK if there is joystick
dnl ==============================================================
dnl AC_ARG_ENABLE(joystick,
dnl [  --enable-joystick       compile with Joystick controller (experimental, default: no)],
dnl [ if test x$enableval = xno; then have_joystick=no; else have_joystick=yes; fi ], have_joystick=no)
dnl if test x$have_joystick = xyes; then
dnl    AC_DEFINE(WITH_JOYSTICK,1,[define if compiling joystick controller])
dnl    echo "Compiling joystick controller"
dnl fi

dnl CHECK if there is VIDEO4LINUX
dnl ==============================================================
AC_CHECK_HEADER(linux/videodev.h)
if test "$ac_cv_header_linux_videodev_h" = "yes"; then
   HAVE_V4L=yes
fi
AC_ARG_ENABLE(v4l,[  --enable-v4l            compile with Video4Linux Layer (autodetect)], [
if test x$HAVE_V4L = xyes -a ! x$enableval = xno; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi], [
if test x$HAVE_V4L = xyes; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi])

dnl ==============================================================
dnl compile with full warnings and debugging symbols
dnl ==============================================================
AC_ARG_ENABLE(debug,
	[  --enable-debug          compile with debug symbols (no)],
	[case "${enableval}" in
		yes) debug=true ;;
		no) debug=false ;;
		*) AC_MSG_ERROR(--enable-debug expects either yes or no) ;;
	esac], [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)
if test x$debug = xtrue; then
   CFLAGS="$CFLAGS -Wall -g -ggdb"
fi

dnl ==============================================================================
dnl CHECK to use profiling flags when compiling, for execution analysis with gprof
dnl ==============================================================================
AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile using gprof flags for execution analysis (no)],
[ if test ! x$enableval = xyes; then
    have_profiling=no
  else
    have_profiling=yes;
  fi ],[ have_profiling=no ])
if test x$have_profiling = xyes; then
  CFLAGS="$CFLAGS -pg"
fi


dnl ==============================================================
dnl CHECK to use processor specific optimizations to compile
dnl ==============================================================
AC_ARG_ENABLE(lubrify,
	       [  --enable-lubrify        compile using processor lubrifications (yes)],
	       [ 
		if test ! x$enableval = xyes; then
		    have_lubrifications=no
		else
		    have_lubrifications=yes;
		fi ],[ have_lubrifications=yes ])

if test x$have_lubrifications = xyes; then
  if test x$have_profiling = xyes -o x$debug = xtrue; then
    echo "cannot lubrify code if debug or profiling are enabled"
    have_lubrifications=no
  else
    if test x$have_darwin = xyes; then
      # use optimization flags for darwin
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
      # adding these provoke 'illegal instruction' errors in some
      # ppc/gcc combinations: -mpowerpc-gfxopt -faltivec"
    elif test x$have_ppc = xyes; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
    elif test x$host_cpu = xx86_64; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math"
      AC_DEFINE(HAVE_64BIT,1,[define if host has 64 bit])
    else # any other x86 platform optimizations
      CFLAGS="$CFLAGS -O2 -fexpensive-optimizations -msse -fomit-frame-pointer -march=${host_cpu} -ffast-math"
    fi
  fi
else
  if test x$have_profiling = xno -a x$debug = xfalse; then
    echo "enabling generic compiler optimizations"
    CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -funroll-loops"
  fi
fi
AC_SUBST(LUBRIFY_CFLAGS)






dnl ==============================================================
dnl CHECK if there is SDL to be compiled STATIC
dnl ==============================================================
dnl AC_MSG_CHECKING(for embedding static SDL libraries)
dnl AC_ARG_WITH(sdl-static,
dnl [  --with-sdl-static       embed SDL libraries as static library ],
dnl [ SDL_LIBS="`sdl-config --static-libs`"
dnl   AC_SUBST(SDL_LIBS)
dnl   AC_MSG_RESULT(yes) ],
dnl [ AC_MSG_RESULT(no) ])




dnl ==============================================================
dnl CHECK if there is AVCODEC to be compiled STATIC
dnl ==============================================================
dnl AC_MSG_CHECKING(for embedding static ffmpeg libavcodec)
dnl AC_ARG_WITH(ffmpeg-static,
dnl [  --with-ffmpeg-static    embed ffmpeg libavcodec as static library],
dnl [if test -r "$withval"; then

dnl   AVCODEC_STATIC_DIR="`find $withval -name 'libavcodec'`"
dnl   AVCODEC_STATIC_LIB="$AVCODEC_STATIC_DIR/libavcodec.a"
dnl   AVFORMAT_STATIC_DIR="`find $withval -name 'libavformat'`"
dnl   AVFORMAT_STATIC_LIB="$AVFORMAT_STATIC_DIR/libavformat.a"
dnl   if test ! -r "$AVCODEC_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVCODEC_STATIC_LIB not found: you must compile a static library of libavcodec"
dnl   elif test ! -r "$AVFORMAT_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVFORMAT_STATIC_LIB not found: you must compile a static library of libavformat"
dnl   else
dnl     AC_MSG_RESULT(yes)
dnl     use_ffmpeg=yes;
dnl     AC_DEFINE(WITH_AVCODEC,1,[define if compiling movie layer linking to ffmpeg libavcodec])
dnl     AVCODEC_LIBS="$AVCODEC_STATIC_LIB $AVFORMAT_STATIC_LIB"
dnl     AVCODEC_CFLAGS="-I$AVCODEC_STATIC_DIR -I$AVFORMAT_STATIC_DIR"
dnl     AC_SUBST(AVCODEC_LIBS)
dnl     AC_SUBST(AVCODEC_CFLAGS)
dnl   fi

dnl  else
dnl    AC_MSG_RESULT(no)
dnl  fi
dnl ],[AC_MSG_RESULT(no)])




dnl ==============================================================
dnl compile including the javascript interpreter
dnl ==============================================================
AC_DEFINE(WITH_JAVASCRIPT,1,[Define is using the javascript interpreter])
if test x$have_linux = xyes ; then
  AC_DEFINE(XP_UNIX,1,[Define use of UNIX types in javascript])
fi
if test x$have_darwin = xyes ; then
  AC_DEFINE(XP_MAC,1,[Define use of MAC types in javascript])
fi
if test x$debug = xyes ; then
  JS_CFLAGS="$JS_CFLAGS -DJS_GCMETER"
fi

dnl AC_MSG_CHECKING(for embedding JavaScript interpreter)
dnl JS_LIBS=""
dnl JS_CFLAGS=""
dnl AC_ARG_WITH(javascript,
dnl [  --with-javascript       embed the javascript interpreter as in
dnl                           http://www.mozilla.org/js/spidermonkey],
dnl [if test -r "$withval"; then

dnl   JS_OBJDIR="`find $withval -name '*OBJ'| grep -v editline | grep -v fdlibm`"
dnl   JS_LIB="$JS_OBJDIR/libjs.a"
dnl   if test "`echo $withval|grep src`"; then
dnl     JS_SRCDIR="$withval"
dnl   else
dnl     JS_SRCDIR="`find $withval -name 'src'|grep -v corba`"
dnl   fi
dnl   if test -z "$JS_OBJDIR"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! compiled javascript object directory not found in $withval"
dnl   elif test ! -r "$JS_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! libjs.a not found in $JS_OBJDIR"
dnl   elif test ! -r "$JS_SRCDIR/jsapi.h"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! jsapi.h not found in $JS_SRCDIR"
dnl   else
dnl     JS_LIBS=$JS_LIB
dnl     JS_CFLAGS="-I$JS_SRCDIR -I$JS_OBJDIR -DXP_UNIX -DJS_THREADSAFE -DJS_MULTITHREADED"
dnl     AC_MSG_RESULT(yes)
dnl     AC_DEFINE(WITH_JAVASCRIPT,1,
dnl               [Define is using the javascript interpreter])
dnl     have_javascript=yes
dnl   fi
dnl  else
dnl    AC_MSG_RESULT(no)
dnl  fi
dnl ],[AC_MSG_RESULT(no)])
dnl AC_SUBST(JS_LIBS)
dnl AC_SUBST(JS_CFLAGS)






AC_SUBST(BUILDLIBS)
AC_SUBST(STATIC_LIBS)


dnl ==============================================================
dnl link with memory debugging library dmalloc
dnl ==============================================================
AC_CHECK_HEADER(dmalloc.h)
if test "$ac_cv_header_dmalloc_h" = "yes"; then

AC_MSG_CHECKING(if malloc debugging is wanted)
AC_ARG_WITH(dmalloc,
[  --with-dmalloc          use dmalloc, as in
                          ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz],
[if test "$withval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(WITH_DMALLOC,1,
            [Define if using the dmalloc debugging malloc package])
  LIBS="$LIBS -ldmallocthcxx"
  DMALLOCC="dmallocc.cpp"
  have_dmalloc=yes
else
  AC_MSG_RESULT(no)
  DMALLOCC=""
  have_dmalloc=no
fi], [AC_MSG_RESULT(no)])

fi


# select CCVT CONVERSION TYPE
CCVT_CONV="ccvt_c2.c"
AC_SUBST(CCVT_CONV)

CXXFLAGS="$CFLAGS"
#CXXFLAGS="$CFLAGS $AVIFILE_CXXFLAGS $FT2_CFLAGS"
#CFLAGS="$CFLAGS $SDL_FLAGS"
#echo "LIBS are $LIBS"
#AC_SUBST(LIBS)


AC_OUTPUT([
Makefile
src/Makefile
src/include/Makefile
lib/Makefile
lib/ccvt/Makefile
lib/shout/Makefile
lib/flash/Makefile
lib/goom/Makefile
filters/Makefile
filters/delaygrab/Makefile
filters/rotozoom/Makefile
filters/simura/Makefile
filters/baltan/Makefile
filters/vertigo/Makefile
filters/transform/Makefile
filters/edge/Makefile
filters/backlight/Makefile
filters/blur/Makefile
filters/ripple/Makefile
filters/water/Makefile
filters/cartoon/Makefile
filters/nervous/Makefile
])

echo
echo
echo "Compile $PACKAGE $VERSION for ${host} (kernel $uname$uversion)"
echo "= SDL v${SDL_VERSION}"
echo "  LIBS  : $SDL_LIBS"
echo "  CFLAGS: $SDL_CFLAGS"
if test x$have_glade2 = xyes; then
echo "= libGlade2"
echo "  this controller interface is not fully functional"
echo "  LIBS  : $GLADE2_LIBS"
echo "  CFLAGS: $GLADE2_CFLAGS"
fi
if test x$have_png = xyes; then
echo "= Png1.2"
echo "  LIBS  : $PNG_LIBS"
echo "  CFLAGS: $PNG_CFLAGS"
fi
if test x$have_freetype2 = xyes; then
echo "= FreeType2"
echo "  LIBS  : $FT2_LIBS"
echo "  CFLAGS: $FT2_CFLAGS"
fi
if test x$have_avilayer = xyes; then
echo "= AviFile"
echo "  LIBS  : $AVIFILE_LIBS"
echo "  CFLAGS: $AVIFILE_CXXFLAGS"
fi
if test x$have_xhacks = xyes; then
echo "= Xscreensaver hacks"
echo "  this layer is experimental and broken"
fi
if test x$use_ffmpeg = xyes; then
echo "= ffmpeg (libavcodec)"
echo "  libs  : $AVCODEC_LIBS"
echo "  cflags: $AVCODEC_CFLAGS"
fi
if test x$have_oggtheora = xyes; then
echo "= ogg-theora (libogg libtheora)"
echo "  libs  : $XIPH_LIBS"
echo "  cflags: $XIPH_CFLAGS"
fi
if test x$use_sdl_image = xyes; then
echo "= sdl_image"
echo "  libs  : $SDLIMAGE_LIBS"
fi
if test x$use_opengl = xyes; then
echo "= opengl"
echo "  libs  : $OPENGL_LIB"
fi
if test x$have_flash = xyes; then
echo "= Flash"
echo "  LIBS  : $FLASH_LIBS (static)"
echo "  this layer is experimental and broken"
fi
if test x$have_midi = xyes; then
echo "= Midi controller included"
echo "  this is experimental, edit midi_ctrl.cpp to assign behaviour"
fi
if test x$have_joystick = xyes; then
echo "= Joystick controller"
echo "  this is experimental, edit joy_ctrl.cpp to assign behaviour"
fi
if test x$have_javascript = xyes; then
echo "= JavaScript (SpiderMonkey http://www.mozilla.org/js/spidermonkey/)"
echo "  LIBS  : $JS_LIBS"
echo "  CFLAGS: $JS_CFLAGS"
fi
if test x$have_lubrifications = xyes; then
echo "= Building machine specific lubrificated binary"
fi
if test x$debug = xtrue; then
echo "= Compiling with debugging symbols"
fi
if test x$have_profiling = xyes; then
echo "= Including support for the GNU Profiler (see man gprof)"
fi
dnl portaudio-v19
if test x$have_jack = xyes; then
echo "= Including support for JACK sound input"
fi
if test x$have_alsa = xyes; then
echo "= Including support for Alsa sound devices"
fi
echo "  PORTAUDIO LIBS  : $PORTAUDIO_LIBS"

echo "= COMPILER FLAGS : $CFLAGS"
echo "= INSTALL PREFIX : $prefix"
echo "============================== now type make, may the source be with you!"
echo


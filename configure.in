dnl ==============================================================
dnl Process this file with autoconf to produce a configure script.
dnl ==============================================================
dnl $Id$

AC_INIT(src/freej.cpp)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl ==============================================================
dnl Get the operating system and version number...
dnl ==============================================================
uname=`uname`
uversion=`uname -r | sed -e 's/-.*$//g;s/[\.]//g'`
AC_MSG_CHECKING(for which platform we are compiling)
case $uname in
     Linux)
     AC_MSG_RESULT(Linux)
     AC_DEFINE(HAVE_LINUX,1,[define if compiling for Linux])
     have_linux=yes
     if test $host_cpu = powerpc; then
       AC_DEFINE(ARCH_PPC,1,[define if compiling for Linux/PPC])
     else
       AC_DEFINE(ARCH_X86,1,[define if compiling for Linux/x86])
     fi

     CPUFLAGS=`cat /proc/cpuinfo | grep flags`
     if grep "^flags.* mmx" /proc/cpuinfo > /dev/null; then
       have_mmx=yes
       AC_DEFINE(HAVE_MMX,1,[define if enabling MMX acceleration])
     fi
     if grep "^flags.* sse" /proc/cpuinfo > /dev/null; then
       have_sse=yes
       AC_DEFINE(HAVE_SSE,1,[define if enabling SSE acceleration])
     fi
     ;;

     Darwin)
     AC_MSG_RESULT(Darwin/OSX)
     AC_DEFINE(HAVE_DARWIN,1,[define if compiling for Apple Darwin OSX])
     have_darwin=yes
     ;;
     *)
     echo "[!] Your system architecture is not supported by FreeJ"
     echo "[!] if you are interested in porting FreeJ to your architecture"
     echo "[!] you are very welcome to contact me <jaromil@dyne.org>"
     exit 0
     ;;
esac

AC_PROG_MAKE_SET

dnl ==============================================================
dnl Setup for automake
dnl ==============================================================

AM_SANITY_CHECK
AM_INIT_AUTOMAKE(FreeJ, 0.7)
AM_CONFIG_HEADER(config.h)


dnl ==============================================================
dnl Check for tools
dnl ==============================================================
AC_PROG_CC
AC_PROG_CXX

dnl Check for dlopen support
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC

AM_PROG_LIBTOOL
AM_PROG_AS

dnl ==============================================================
dnl Add the local include path and some flags
dnl ==============================================================
CFLAGS="-pipe -D_REENTRANT"

#LIBS="-lpthread -lm -ldl"

dnl Checks for header files.
AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl ==============================================================
dnl Checks for library functions.
dnl ==============================================================
AC_CHECK_FUNCS(select malloc mmap ioctl)

dnl ==============================================================
dnl Check for SDL
dnl ==============================================================
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
            :,
	AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
           )
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_CFLAGS)

dnl AC_HEADER_DIRENT


dnl ==============================================================
dnl ==============================================================
dnl CHECK if there is FREETYPE2
dnl ==============================================================
AC_CHECK_FT2(9.0.0,[
	AC_DEFINE(WITH_FT2,1,[define if compiling freetype2 layer])
	have_freetype2=yes],have_freetype2=no)


dnl ==============================================================
dnl CHECK if there is AVCODEC
dnl ==============================================================
AC_ARG_ENABLE(ffmpeg,
[  --enable-ffmpeg         compile Movie layer using ffmpeg (need CVS!) (no)],
[ if test ! x$enableval = xyes; then
    use_ffmpeg=no
  else
    use_ffmpeg=yes;
  fi ],[ use_ffmpeg=no ])
if test x$use_ffmpeg = xyes; then
   AC_DEFINE(WITH_AVCODEC,1,[define if compiling movie layer linking to ffmpeg libavcodec])
   AVCODEC_LIBS="-lavcodec -lavformat"
   AVCODEC_CFLAGS="-I/usr/include/ffmpeg -I/usr/local/include/ffmpeg";
   AC_SUBST(AVCODEC_LIBS)
   AC_SUBST(AVCODEC_CFLAGS)
fi

dnl =====================================================
dnl CHECK if is wanted and there is AVILIB
dnl =====================================================
AVI_LIBS=""
if test ! x$use_ffmpeg = xyes; then
   AC_AVIFILE(0.7.18)    
   if test -z $HAVE_AVIFILE; then
      echo "Error in avifile check, HAVE_AVIFILE is not declared"
   fi
   AC_ARG_ENABLE(avi,[  --enable-avi            compile Movie layer using AviFile (auto)],
   # to this when --enable-avi is selected (check the value!)
     [if test x$HAVE_AVIFILE = xyes -a ! x$enableval = xno; then
	AC_DEFINE(WITH_AVIFILE,1,
            [define if linking to avifile library for AVI layer playback])
	have_avilayer=yes
	AC_SUBST(AVIFILE_LIBS)
	AC_SUBST(AVIFILE_CXXFLAGS)
     fi],
     # to this by default, when --enable-avi is not selected
     [if test x$HAVE_AVIFILE = xyes; then
	AC_DEFINE(WITH_AVIFILE,1,
            [define if linking to avifile library for AVI layer playback])
        have_avilayer=yes
        AC_SUBST(AVIFILE_LIBS)
        AC_SUBST(AVIFILE_CXXFLAGS)
     fi])
fi

dnl ==============================================================
dnl ==============================================================
dnl CHECK if there is MIDI
dnl ==============================================================
AC_ARG_ENABLE(midi,
[  --enable-midi           compile with Midi layer (no)],
[ if test ! x$enableval = xyes; then
    have_midi=no
  else
    have_midi=yes;
  fi ],[ have_midi=no ])
if test x$have_midi = xyes; then
   AC_DEFINE(WITH_MIDI,1,[define if compiling midi layer])
   echo "Using midi control"
   dnl I don't know which libs are used
dnl    AC_SUBST(MIDI_LIBS,"-lavcodec -lavformat") 
dnl    AC_SUBST(MIDI_CFLAGS,"-I/usr/include/ffmpeg")
fi

dnl ==============================================================
dnl CHECK if there are PNG libraries
dnl ==============================================================
PKG_CHECK_MODULES(PNG, libpng12 >= 1.2.0, [
  AC_DEFINE(WITH_PNG,1,[define if compiling png layer])	
  have_png=yes],have_png=no)

#PNG_LIBS=""
#AC_CHECK_HEADER(png.h)
#if test "$ac_cv_header_png_h" = "yes"; then
#have_pnglayer=yes
#PNG_LIBS="-lpng"

#AC_SUBST(PNG_LIBS)
#fi

dnl ==============================================================
dnl CHECK if there is 
dnl ==============================================================
AC_ARG_ENABLE(xhacks, [  --enable-xhacks         enable xscreenhacks layer (no)], [
		    AC_DEFINE(WITH_XHACKS,1,[define if compiling xhacks layer])
		    ])

dnl ==============================================================
dnl CHECK if there is VIDEO4LINUX
dnl ==============================================================
AC_CHECK_HEADER(linux/videodev.h)
if test "$ac_cv_header_linux_videodev_h" = "yes"; then
HAVE_V4L=yes
fi
AC_ARG_ENABLE(v4l,[  --enable-v4l            compile with Video4Linux Layer (autodetect)], [
if test x$HAVE_V4L = xyes -a ! x$enableval = xno; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi], [
if test x$HAVE_V4L = xyes; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi])

dnl ==============================================================
dnl CHECK if there is LIBGLADE2
dnl ==============================================================
PKG_CHECK_MODULES(GLADE2, libglade-2.0 >= 1.99.0 gthread-2.0 >= 2.0.0, [
  AC_DEFINE(WITH_GLADE2,1,[define if compiling glade gtk+-2 GUI])
  have_glade2=yes
],[
  have_flade2=no
])

dnl ==============================================================
dnl compile with full warnings and debugging symbols
dnl ==============================================================
AC_ARG_ENABLE(debug,
	[  --enable-debug          compile with debug symbols (-Wall -g -ggdb) [yes]],
	[case "${enableval}" in
		yes) debug=true ;;
		no) debug=false ;;
		*) AC_MSG_ERROR(--enable-debug expects either yes or no) ;;
	esac], [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)
if test x$debug = xtrue; then
   CFLAGS="$CFLAGS -Wall -g -ggdb"
fi

dnl ==============================================================================
dnl CHECK to use profiling flags when compiling, for execution analysis with gprof
dnl ==============================================================================
AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile using gprof flags for execution analysis (no)],
[ if test ! x$enableval = xyes; then
    have_profiling=no
  else
    have_profiling=yes;
  fi ],[ have_profiling=no ])
if test x$have_profiling = xyes; then
  CFLAGS="$CFLAGS -pg"
fi


dnl ==============================================================
dnl CHECK to use processor specific optimizations to compile
dnl ==============================================================
AC_ARG_ENABLE(lubrify,
[  --enable-lubrify        compile using processor lubrifications (yes)],
[ if test ! x$enableval = xyes; then
    have_lubrifications=no
  else
    have_lubrifications=yes;
  fi ],[ have_lubrifications=yes ])

if test x$have_lubrifications = xyes; then
  if test x$have_profiling = xyes -o x$debug = xtrue; then
    echo "cannot lubrify code if debug or profiling are enabled"
    have_lubrifications=no
  else
    if test x$have_darwin = xyes; then
      # use optimization flags for darwin
      CFLAGS="$CFLAGS -O4 -fomit-frame-pointer -mpowerpc-gfxopt -faltivec"
    else
      CFLAGS="$CFLAGS -O4 -fomit-frame-pointer -march=${host_cpu} -finline-functions -ffast-math"
    fi
  fi
fi
AC_SUBST(LUBRIFY_CFLAGS)

dnl ==============================================================
dnl compile including the javascript interpreter
dnl ==============================================================
AC_MSG_CHECKING(for embedding JavaScript interpreter)
JS_LIBS=""
JS_CFLAGS=""
AC_ARG_WITH(javascript,
[  --with-javascript       embed the javascript interpreter as in
                          http://www.mozilla.org/js/spidermonkey],
[if test -r "$withval"; then

  JS_OBJDIR="`find $withval -name '*OBJ'| grep -v editline | grep -v fdlibm`"
  JS_LIB="$JS_OBJDIR/libjs.a"
  if test "`echo $withval|grep src`"; then
    JS_SRCDIR="$withval"
  else
    JS_SRCDIR="`find $withval -name 'src'|grep -v corba`"
  fi
  if test -z "$JS_OBJDIR"; then
    AC_MSG_RESULT(no)
    echo "!! compiled javascript object directory not found in $withval"
  elif test ! -r "$JS_LIB"; then
    AC_MSG_RESULT(no)
    echo "!! libjs.a not found in $JS_OBJDIR"
  elif test ! -r "$JS_SRCDIR/jsapi.h"; then
    AC_MSG_RESULT(no)
    echo "!! jsapi.h not found in $JS_SRCDIR"
  else
    JS_LIBS=$JS_LIB
    JS_CFLAGS="-I$JS_SRCDIR -I$JS_OBJDIR -DXP_UNIX -DJS_THREADSAFE -DJS_MULTITHREADED"
    AC_MSG_RESULT(yes)
    AC_DEFINE(WITH_JAVASCRIPT,1,
              [Define is using the javascript interpreter])
    have_javascript=yes
  fi
 else
   AC_MSG_RESULT(no)
 fi
],[AC_MSG_RESULT(no)])
AC_SUBST(JS_LIBS)
AC_SUBST(JS_CFLAGS)

dnl ==============================================================
dnl link with memory debugging library dmalloc
dnl ==============================================================
AC_CHECK_HEADER(dmalloc.h)
if test "$ac_cv_header_dmalloc_h" = "yes"; then

AC_MSG_CHECKING(if malloc debugging is wanted)
AC_ARG_WITH(dmalloc,
[  --with-dmalloc          use dmalloc, as in
                          ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz],
[if test "$withval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(WITH_DMALLOC,1,
            [Define if using the dmalloc debugging malloc package])
  LIBS="$LIBS -ldmallocthcxx"
  DMALLOCC="dmallocc.cpp"
  have_dmalloc=yes
else
  AC_MSG_RESULT(no)
  DMALLOCC=""
  have_dmalloc=no
fi], [AC_MSG_RESULT(no)])

fi


# select CCVT CONVERSION TYPE
CCVT_CONV="ccvt_c2.c"
AC_SUBST(CCVT_CONV)

CXXFLAGS="$CFLAGS"
#CXXFLAGS="$CFLAGS $AVIFILE_CXXFLAGS $FT2_CFLAGS"
#CFLAGS="$CFLAGS $SDL_FLAGS"
#echo "LIBS are $LIBS"
#AC_SUBST(LIBS)


AC_OUTPUT([
Makefile
ccvt/Makefile
src/Makefile
src/include/Makefile
filters/Makefile
filters/delaygrab/Makefile
filters/rotozoom/Makefile
filters/simura/Makefile
filters/baltan/Makefile
filters/vertigo/Makefile
filters/transform/Makefile
filters/edge/Makefile
filters/backlight/Makefile
filters/blur/Makefile
filters/ripple/Makefile
filters/water/Makefile
filters/cartoon/Makefile
filters/nervous/Makefile
])

echo
echo
echo "Compile $PACKAGE $VERSION for ${host} (kernel $uname$uversion)"
echo "= SDL v${SDL_VERSION}"
echo "  LIBS  : $SDL_LIBS"
echo "  CFLAGS: $SDL_CFLAGS"
if test x$have_png = xyes; then
echo "= Png1.2"
echo "  LIBS  : $PNG_LIBS"
echo "  CFLAGS: $PNG_CFLAGS"
fi
if test x$have_freetype2 = xyes; then
echo "= FreeType2"
echo "  LIBS  : $FT2_LIBS"
echo "  CFLAGS: $FT2_CFLAGS"
fi
if test x$have_avilayer = xyes; then
echo "= AviFile"
echo "  LIBS  : $AVIFILE_LIBS"
echo "  CFLAGS: $AVIFILE_CXXFLAGS"
fi
if test x$use_ffmpeg = xyes; then
echo "= FFMpeg (libavcodec)"
echo "  LIBS  : $AVCODEC_LIBS"
echo "  CFLAGS: $AVCODEC_CFLAGS"
fi
if test x$have_javascript = xyes; then
echo "= JavaScript (SpiderMonkey)"
echo "  LIBS  : $JS_LIBS"
echo "  CFLAGS: $JS_CFLAGS"
fi
if test x$have_lubrifications = xyes; then
echo "= Building machine specific lubrificated binary"
fi
if test x$debug = xtrue; then
echo "= Compiling with debugging symbols"
fi
if test x$have_profiling = xyes; then
echo "= Including support for the GNU Profiler (see man gprof)"
fi
echo "= COMPILER FLAGS : $CFLAGS"
echo "= INSTALL PREFIX : $prefix"
echo "============================== now type make, may the source be with you!"
echo


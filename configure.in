dnl ==============================================================
dnl Process this file with autoconf to produce a configure script.
dnl ==============================================================

AC_INIT(src/freej.cpp)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl ==============================================================
dnl Get the operating system and version number...
dnl ==============================================================
uname=`uname`
uversion=`uname -r | sed -e 's/-.*$//g;s/[\.]//g'`
AC_MSG_CHECKING(for which platform we are compiling)
case $uname in
     Linux)
     AC_MSG_RESULT(Linux)
     AC_DEFINE(HAVE_LINUX,1,[define if compiling for Linux])
     have_linux=yes
     AM_CONDITIONAL(ARCH_PPC, test x$hostcpu = xpowerpc) 
     if test $host_cpu = powerpc; then
       AC_DEFINE(ARCH_PPC,1,[define if compiling for Linux/PPC])
       AC_DEFINE(ARCH_POWERPC,1,[define if compiling for Linux/PPC])
       AC_DEFINE(POWERPC_MODE_32BITS,1,[define if compiling for PPC])
       AC_DEFINE(HAVE_ALTIVEC,1,[define if cpu supports Altivec instruction set])
       AC_DEFINE(HAVE_ALTIVEC_H,1,[define if cpu supports Altivec instruction set])
       AC_DEFINE(WORDS_BIGENDIAN,1,[define if compiling for Big Endian CPU])
       AC_DEFINE(PA_BIG_ENDIAN,1,[define big endian arch for portaudio])
#       AC_DEFINE(SDL_BYTEORDER,SDL_BIG_ENDIAN,[define big endian arch for SDL])
       have_ppc=yes
     else
       AC_DEFINE(ARCH_X86,1,[define if compiling for Linux/x86])
       AC_DEFINE(PA_LITTLE_ENDIAN,1,[define little endian arch for portaudio])
#       AC_DEFINE(SDL_BYTEORDER,SDL_LIL_ENDIAN,[define little endian arch for SDL])
     fi

     CPUFLAGS=`cat /proc/cpuinfo | grep flags`
     if grep "^flags.* mmx" /proc/cpuinfo > /dev/null; then
       have_mmx=yes
       AC_DEFINE(HAVE_MMX,1,[define if enabling MMX acceleration])
     fi
     if grep "^flags.* sse" /proc/cpuinfo > /dev/null; then
       have_sse=yes
       AC_DEFINE(HAVE_SSE,1,[define if enabling SSE acceleration])
     fi
     if grep "^flags.* sse2" /proc/cpuinfo > /dev/null; then
       have_sse=yes
       AC_DEFINE(HAVE_SSE2,1,[define if enabling SSE2 acceleration])
     fi
     ;;

     Darwin)
     AC_MSG_RESULT(Darwin/OSX)
     AC_DEFINE(HAVE_DARWIN,1,[define if compiling for Apple Darwin OSX])
     AC_DEFINE(CONFIG_DARWIN,1,[define if compiling for Apple Darwin OSX])
     have_darwin=yes
     ;;
     *)
     echo "[!] Your system architecture is not supported by FreeJ"
     echo "[!] if you are interested in porting FreeJ to your architecture"
     echo "[!] you are very welcome to contact me <jaromil@dyne.org>"
     exit 0
     ;;
esac

AC_PROG_MAKE_SET

dnl ==============================================================
dnl Setup for automake
dnl ==============================================================

AM_SANITY_CHECK
AM_INIT_AUTOMAKE(FreeJ, 0.9.1)
AM_CONFIG_HEADER(config.h)


dnl ==============================================================
dnl Check for tools
dnl ==============================================================
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LEX
AC_PROG_YACC

dnl Check for dlopen support
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC

AM_PROG_LIBTOOL
AM_PROG_AS

dnl ==============================================================
dnl Add the local include path and some flags
dnl ==============================================================
CFLAGS="-pipe -D_REENTRANT"
if test x$have_darwin = xyes; then
  # add the fink default path to find headers
  CFLAGS="$CFLAGS -I/sw/include"
fi

#LIBS="-lpthread -lm -ldl"

dnl Checks for header files.
AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl ==============================================================
dnl Checks for library functions.
dnl ==============================================================
AC_CHECK_FUNCS(select malloc mmap ioctl)


dnl ==============================================================
dnl Check if we are going for a STATIC BUILD
dnl ==============================================================
AC_ARG_ENABLE(static-build,
[  --enable-static-build      statically include all libraries) (default: no)],
[ if test ! x$enableval = xyes; then
    static_build=no
  else
    static_build=yes
  fi ],[ static_build=no ])



dnl ==============================================================
dnl Check for SDL
dnl ==============================================================
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
            :,
	AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
           )
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_CFLAGS)

dnl ==============================================================
dnl Check if there is FREETYPE2
dnl ==============================================================
AC_CHECK_FT2(9.0.0,[
	AC_DEFINE(WITH_FT2,1,[define if compiling freetype2 layer])
	AC_DEFINE(HAVE_FREETYPE2,1,[define if linking to freetype2 library])
	have_freetype2=yes],have_freetype2=no)

dnl AC_HEADER_DIRENT

dnl ==============================================================
dnl Check if we are going to link DINAMICALLY ffmpeg and theora
dnl ==============================================================
AC_MSG_CHECKING(how to link ffmpeg libraries)
AC_ARG_ENABLE(dynamic-ffmpeg,
[  --enable-dynamic-ffmpeg     link dynamically ffmpeg and theora (default: no)],
[ if test x$enableval = xyes; then
     dynamic_ffmpeg=yes
  else
     dynamic_ffmpeg=no
  fi ],[ dynamic_ffmpeg=no ])
dnl =====
AC_ARG_WITH(static-ffmpeg,
[  --with-static-ffmpeg    embed ffmpeg as static library from the build directory],
[  static_ffmpeg=yes; ffmpeg_dir="$withval" ],[ static_ffmpeg=no ])
dnl ==============================================================

if test x$dynamic_ffmpeg = no; then
   AC_MSG_RESULT(static)
else
   AC_MSG_RESULT(dynamic)
fi


dnl ==============================================================
dnl Check OGG/THEORA MMX STUFF
dnl ==============================================================
XIPH_INCLUDE=""
XIPH_LIBS=""
THEORA_MMX_DIR=""
if test x$dynamic_ffmpeg = xyes ; then
   PKG_CHECK_MODULES(XIPH, ogg >= 1.1 vorbis vorbisenc theora,
   	             have_oggtheora=yes, have_oggtheora=no)
   XIPH_LIBS="$XIPH_LIBS -ltheora"
else
   PKG_CHECK_MODULES(XIPH, ogg >= 1.1 vorbis vorbisenc,
                     have_oggtheora=yes, have_oggtheora=no)
#   XIPH_LIBS="$XIPH_LIBS -logg -lvorbis \$(top_srcdir)/lib/theora-mmx/libtheora.a"
   XIPH_LIBS="$XIPH_LIBS -logg -lvorbis -lvorbisenc -ltheora"
#   XIPH_INCLUDE="-I\$(top_srcdir)/lib/theora-mmx"
   XIPH_INCLUDE=""
#   THEORA_MMX_DIR="theora-mmx"
   THEORA_MMX_DIR=""
fi
if test x$have_oggtheora = xyes ; then
   AC_DEFINE(WITH_OGGTHEORA,1,[define if compiling with Ogg/Theora encoding])
   AC_DEFINE(THEORA_SUPPORT_ENCODE,1,[define if compiling Theora encoder])
   AC_DEFINE(THEORA_SUPPORT_FLOAT,1,[define if compiling Theora float codec])
   AC_DEFINE(CONFIG_LIBOGG,1,[define if compiling FFMpeg AvCoded with ogg])
   AC_DEFINE(CONFIG_LIBVORBIS,1,[define if compiling FFMpeg AvCoded with vorbis])
   AC_DEFINE(CONFIG_LIBTHEORA,1,[define if compiling FFMpeg AvCoded with theora])
   AC_DEFINE(CONFIG_OGGVORBIS_ENCODER,1,[define if compiling FFMpeg with oggvorbis encoder])
   AC_DEFINE(CONFIG_OGGVORBIS_DECODER,1,[define if compiling FFMpeg with oggvorbis decoder])
   AC_DEFINE(CONFIG_OGGTHEORA_ENCODER,1,[define if compiling FFMpeg with oggtheora encoder])
   AC_DEFINE(CONFIG_OGGTHEORA_DECODER,1,[define if compiling FFMpeg with oggtheora decoder])
fi
AC_SUBST(XIPH_LIBS)
AC_SUBST(XIPH_INCLUDE)
AC_SUBST(THEORA_MMX_DIR)


PKG_CHECK_MODULES(MLT, mlt-framework, have_mlt=yes, have_mlt=no)
AC_SUBST(MLT_LIBS)
AC_SUBST(MLT_INCLUDE)
AC_SUBST(MLT_CFLAGS)

dnl ==============================================================
dnl AVCODEC AVFORMAT STUFF
dnl ==============================================================

dnl FFMPEG_SUBDIRS=""
dnl FFMPEG_LIBS=""
dnl FFMPEG_CFLAGS=""
dnl AVCODEC_ARCH=""

dnl if test x$static_ffmpeg = xyes ; then

dnl    FFMPEG_LIBS="${ffmpeg_dir}/libavformat/libavformat.a ${ffmpeg_dir}/libavcodec/libavcodec.a ${ffmpeg_dir}/libpostproc/libpostproc.a ${ffmpeg_dir}/libswscale/libswscale.a ${ffmpeg_dir}/libavutil/libavutil.a"

dnl    FFMPEG_CFLAGS="-I${ffmpeg_dir}/libavformat -I${ffmpeg_dir}/libavcodec -I${ffmpeg_dir}/libavutil"


dnl elif test x$dynamic_ffmpeg = xyes ; then
dnl    PKG_CHECK_MODULES(FFMPEG, libavcodec libavformat libavutil,
dnl    	             have_ffmpeg=yes, have_ffmpeg=no)
dnl    if test x$have_ffmpeg = xyes; then
dnl       FFMPEG_LIBS="$FFMPEG_LIBS -L/opt/video/lib"
dnl       AC_MSG_RESULT(dynamically)
dnl       AC_DEFINE(WITH_FFMPEG,1,
dnl 		[define if compiling movie layer linking to ffmpeg libavcodec])
dnl    else
dnl       AC_MSG_RESULT(not found)
dnl    fi
dnl else

dnl     FFMPEG_LIBS="\$(top_srcdir)/lib/avformat/libavformat.a \$(top_srcdir)/lib/avcodec/libavcodec.a"
dnl     FFMPEG_SUBDIRS="avcodec avformat"
dnl     FFMPEG_CFLAGS="-I\$(top_srcdir)/lib/avcodec -I\$(top_srcdir)/lib/avformat"
dnl     if test x$have_mmx = xyes ; then
dnl        AVCODEC_ARCH="i386"
dnl        FFMPEG_LIBS="$FFMPEG_LIBS \$(top_srcdir)/lib/avcodec/i386/libavcodecmmx.a"
dnl     fi
dnl     if test x$have_ppc = xyes ; then
dnl        AVCODEC_ARCH="ppc"
dnl        FFMPEG_LIBS="$FFMPEG_LIBS \$(top_srcdir)/lib/avcodec/ppc/libavcodecppc.a"
dnl     fi
dnl     AC_DEFINE(WITH_FFMPEG,1,
dnl 		[define if compiling movie layer linking to ffmpeg libavcodec])

dnl fi
dnl AC_SUBST(FFMPEG_LIBS)
dnl AC_SUBST(FFMPEG_CFLAGS)
dnl AC_SUBST(FFMPEG_SUBDIRS)
dnl AC_SUBST(AVCODEC_ARCH)






dnl ==============================================================
dnl ENABLE LIBFLASH
dnl ==============================================================
AC_ARG_ENABLE(flash,
[  --enable-flash          compile with Flash animation layer (default: no)],
[ if test x$enableval = xno; then
    have_flash=no
  else
    have_flash=yes;
  fi ],[ have_flash=no ])
AC_MSG_CHECKING(compiling FLASH animation layer)
if test x$have_flash = xyes; then
   AC_DEFINE(WITH_FLASH,1,[define if compiling flash layer])
   FLASH_LIBS=../libflash/libflash.a
   FLASH_DIR=libflash
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(FLASH_LIBS)
AC_SUBST(FLASH_DIR)





dnl ==============================================================
dnl CHECK if there is MIDI
dnl ==============================================================

AC_ARG_ENABLE(midi,
[  --enable-midi           compile with Alsa Midi controller (default: yes)],
[ if test x$enableval = xno; then have_midi=no; else have_midi=yes; fi ], have_midi=yes)
AC_MSG_CHECKING(compiling MIDI controller)
if test x$have_midi = xyes; then
   AC_DEFINE(WITH_MIDI,1,[define if compiling midi controller])
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi

dnl ==============================================================
dnl CHECK if there is VIDEO4LINUX
dnl ==============================================================
AC_CHECK_HEADER(linux/videodev.h)
if test "$ac_cv_header_linux_videodev_h" = "yes"; then
   HAVE_V4L=yes
fi
AC_ARG_ENABLE(v4l,[  --enable-v4l            compile with Video4Linux Layer (autodetect)], [
if test x$HAVE_V4L = xyes -a ! x$enableval = xno; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi], [
if test x$HAVE_V4L = xyes; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi])

dnl ==============================================================
dnl CHECK if there is LIBGLADE2
dnl ==============================================================
AC_ARG_ENABLE(glade2,
[  --enable-glade2         compile with Glade/Gtk2 interface (deprecated, default: no)], [
PKG_CHECK_MODULES(GLADE2, libglade-2.0 >= 1.99.0 gthread-2.0 >= 2.0.0, [
  AC_DEFINE(WITH_GLADE2,1,[define if compiling glade gtk+-2 GUI])
  have_glade2=yes ],[ have_glade2=no ])
])

dnl ==============================================================
dnl compile with full warnings and debugging symbols
dnl ==============================================================
AC_ARG_ENABLE(debug,
	[  --enable-debug          compile with debug symbols (no)],
	[case "${enableval}" in
		yes) debug=true ;;
		no) debug=false ;;
		*) AC_MSG_ERROR(--enable-debug expects either yes or no) ;;
	esac], [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)
if test x$debug = xtrue; then
   CFLAGS="$CFLAGS -Wall -g -ggdb"
fi

dnl ==============================================================================
dnl CHECK to use profiling flags when compiling, for execution analysis with gprof
dnl ==============================================================================
AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile using gprof flags for execution analysis (no)],
[ if test ! x$enableval = xyes; then
    have_profiling=no
  else
    have_profiling=yes;
  fi ],[ have_profiling=no ])
if test x$have_profiling = xyes; then
  CFLAGS="$CFLAGS -pg"
fi


dnl ==============================================================
dnl CHECK to use processor specific optimizations to compile
dnl ==============================================================
AC_ARG_ENABLE(lubrify,
	       [  --enable-lubrify        compile using processor lubrifications (yes)],
	       [ 
		if test ! x$enableval = xyes; then
		    have_lubrifications=no
		else
		    have_lubrifications=yes;
		fi ],[ have_lubrifications=yes ])

if test x$have_lubrifications = xyes; then
  if test x$have_profiling = xyes -o x$debug = xtrue; then
    echo "cannot lubrify code if debug or profiling are enabled"
    have_lubrifications=no
  else
    if test x$have_darwin = xyes; then
      # use optimization flags for darwin
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
      # adding these provoke 'illegal instruction' errors in some
      # ppc/gcc combinations: -mpowerpc-gfxopt -faltivec"
    elif test x$have_ppc = xyes; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
    elif test x$host_cpu = xx86_64; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math"
      AC_DEFINE(HAVE_64BIT,1,[define if host has 64 bit])
    else # any other x86 platform optimizations
      CFLAGS="$CFLAGS -O2 -fexpensive-optimizations -msse -fomit-frame-pointer -march=${host_cpu} -ffast-math"
    fi
  fi
else
  if test x$have_profiling = xno -a x$debug = xfalse; then
    echo "enabling generic compiler optimizations"
    CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mmmx"
  fi
fi
AC_SUBST(LUBRIFY_CFLAGS)




dnl ==============================================================
dnl CHECK TO USE OPENGL VIDEO OUTPUT
dnl ==============================================================
AC_ARG_ENABLE(opengl,
	       [  --enable-opengl         experimental opengl rendering (no)],
	       [ 
		if test ! x$enableval = xyes; then
		    use_opengl=yes 
		    OPENGL_LIB="-lGL -lGLU"
		    AC_DEFINE(WITH_OPENGL,1,
				[define if using experimental opengl rendering])
		    else
			use_opengl=no
		    fi
		    ],
		    [ use_opengl=no ]
		    )
AC_SUBST(OPENGL_LIB)



dnl ==============================================================
dnl PortAudio v19
dnl ==============================================================
dnl if test x$have_darwin = xyes ; then
dnl    PORTAUDIO_LIBS="-framework AudioUnit -framework AudioToolbox -framework CoreAudio"
dnl    dnl TODO for darwin/OSX
dnl fi

ALSA_LIBS=""
JACK_LIBS=""
FFTW_LIBS=""
SNDFILE_LIBS=""
if test x$have_linux = xyes ; then
   
   PKG_CHECK_MODULES(ALSA, alsa, have_alsa=yes, have_alsa=no)
   if test x$have_alsa = xyes; then
      AC_ARG_ENABLE(jack, [  --enable-jack          compile with Jack audio driver (autodetected)],
			  [ if test x$enableval = xno; then check_jack=no; else check_jack=yes; fi ],
		          [check_jack=yes])
      if test x$check_jack = xyes; then
         PKG_CHECK_MODULES(JACK, jack, have_jack=yes, have_jack=no)
	 PKG_CHECK_MODULES(FFTW, fftw3, have_fftw=yes, have_fftw=no)
	 PKG_CHECK_MODULES(SNDFILE, sndfile, have_sndfile=yes, have_sndfile=no)
      fi
   fi

fi dnl have_linux

AC_SUBST(ALSA_LIBS)
AC_SUBST(JACK_LIBS)
AC_SUBST(FFTW_LIBS)
AC_SUBST(SNDFILE_LIBS)


dnl ==============================================================
dnl CHECK if there is AVCODEC to be compiled STATIC
dnl ==============================================================
dnl AC_MSG_CHECKING(for embedding static ffmpeg libavcodec)
dnl AC_ARG_WITH(ffmpeg-static,
dnl [  --with-ffmpeg-static    embed ffmpeg libavcodec as static library],
dnl [if test -r "$withval"; then

dnl   AVCODEC_STATIC_DIR="`find $withval -name 'libavcodec'`"
dnl   AVCODEC_STATIC_LIB="$AVCODEC_STATIC_DIR/libavcodec.a"
dnl   AVFORMAT_STATIC_DIR="`find $withval -name 'libavformat'`"
dnl   AVFORMAT_STATIC_LIB="$AVFORMAT_STATIC_DIR/libavformat.a"
dnl   if test ! -r "$AVCODEC_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVCODEC_STATIC_LIB not found: you must compile a static library of libavcodec"
dnl   elif test ! -r "$AVFORMAT_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVFORMAT_STATIC_LIB not found: you must compile a static library of libavformat"
dnl   else
dnl     AC_MSG_RESULT(yes)
dnl     use_ffmpeg=yes;
dnl     AC_DEFINE(WITH_AVCODEC,1,[define if compiling movie layer linking to ffmpeg libavcodec])
dnl     AVCODEC_LIBS="$AVCODEC_STATIC_LIB $AVFORMAT_STATIC_LIB"
dnl     AVCODEC_CFLAGS="-I$AVCODEC_STATIC_DIR -I$AVFORMAT_STATIC_DIR"
dnl     AC_SUBST(AVCODEC_LIBS)
dnl     AC_SUBST(AVCODEC_CFLAGS)
dnl   fi

dnl  else
dnl    AC_MSG_RESULT(no)
dnl  fi
dnl ],[AC_MSG_RESULT(no)])




dnl ==============================================================
dnl compile including the javascript interpreter
dnl ==============================================================
AC_DEFINE(WITH_JAVASCRIPT,1,[Define is using the javascript interpreter])
if test x$have_linux = xyes ; then
  AC_DEFINE(XP_UNIX,1,[Define use of UNIX types in javascript])
fi
if test x$have_darwin = xyes ; then
  AC_DEFINE(XP_MAC,1,[Define use of MAC types in javascript])
fi
if test x$debug = xyes ; then
  JS_CFLAGS="$JS_CFLAGS -DJS_GCMETER"
fi



AC_SUBST(BUILDLIBS)
AC_SUBST(STATIC_LIBS)


dnl ==============================================================
dnl link with memory debugging library dmalloc
dnl ==============================================================
AC_CHECK_HEADER(dmalloc.h)
if test "$ac_cv_header_dmalloc_h" = "yes"; then

AC_MSG_CHECKING(if malloc debugging is wanted)
AC_ARG_WITH(dmalloc,
[  --with-dmalloc          use dmalloc, as in
                          ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz],
[if test "$withval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(WITH_DMALLOC,1,
            [Define if using the dmalloc debugging malloc package])
  LIBS="$LIBS -ldmallocthcxx"
  DMALLOCC="dmallocc.cpp"
  have_dmalloc=yes
else
  AC_MSG_RESULT(no)
  DMALLOCC=""
  have_dmalloc=no
fi], [AC_MSG_RESULT(no)])

fi


# select CCVT CONVERSION TYPE
CCVT_CONV="ccvt_c2.c"
AC_SUBST(CCVT_CONV)

CXXFLAGS="$CFLAGS"
#CXXFLAGS="$CFLAGS $AVIFILE_CXXFLAGS $FT2_CFLAGS"
#CFLAGS="$CFLAGS $SDL_FLAGS"
#echo "LIBS are $LIBS"
#AC_SUBST(LIBS)


AC_OUTPUT([
Makefile
src/Makefile
src/include/Makefile
lib/Makefile
lib/ccvt/Makefile
lib/avformat/Makefile
lib/avcodec/Makefile
lib/avcodec/i386/Makefile
lib/avcodec/ppc/Makefile
lib/shout/Makefile
lib/lo/Makefile
lib/portaudio/Makefile
lib/sdl_image/Makefile
lib/sdl_gfx/Makefile
lib/sdl_ttf/Makefile
lib/flash/Makefile
lib/goom/Makefile
lib/slw/Makefile
lib/tbt/Makefile
lib/frei0r/Makefile
lib/frei0r/filter/Makefile
lib/frei0r/filter/3dflippo/Makefile
lib/frei0r/filter/brightness/Makefile
lib/frei0r/filter/bw0r/Makefile
lib/frei0r/filter/contrast0r/Makefile
lib/frei0r/filter/delay0r/Makefile
lib/frei0r/filter/distort0r/Makefile
lib/frei0r/filter/equaliz0r/Makefile
lib/frei0r/filter/flippo/Makefile
lib/frei0r/filter/gamma/Makefile
lib/frei0r/filter/hueshift0r/Makefile
lib/frei0r/filter/invert0r/Makefile
lib/frei0r/filter/mask0mate/Makefile
lib/frei0r/filter/nosync0r/Makefile
lib/frei0r/filter/pixeliz0r/Makefile
lib/frei0r/filter/saturat0r/Makefile
lib/frei0r/filter/scanline0r/Makefile
lib/frei0r/filter/sobel/Makefile
lib/frei0r/filter/squareblur/Makefile
lib/frei0r/filter/tehroxx0r/Makefile
lib/frei0r/filter/threshold0r/Makefile
lib/frei0r/filter/twolay0r/Makefile
lib/frei0r/filter/glow/Makefile
lib/frei0r/filter/water/Makefile
lib/frei0r/filter/cartoon/Makefile
lib/frei0r/filter/rotozoom/Makefile
lib/frei0r/filter/vertigo/Makefile
lib/frei0r/generator/Makefile
lib/frei0r/generator/ising0r/Makefile
lib/frei0r/generator/lissajous0r/Makefile
lib/frei0r/generator/nois0r/Makefile
lib/frei0r/generator/onecol0r/Makefile
lib/frei0r/generator/partik0l/Makefile
])

echo
echo
echo "Compile $PACKAGE $VERSION for ${host} (kernel $uname$uversion)"
echo "= SDL v${SDL_VERSION}"
echo "  LIBS  : $SDL_LIBS"
echo "  CFLAGS: $SDL_CFLAGS"
if test x$have_freetype2 = xyes; then
echo "= FreeType2"
echo "  LIBS  : $FT2_LIBS"
echo "  CFLAGS: $FT2_CFLAGS"
fi

dnl echo "= ffmpeg (avcodec)"
dnl echo "  libs  : $FFMPEG_LIBS"
dnl echo "  cflags: $FFMPEG_CFLAGS"
dnl echo "  arch  : $AVCODEC_ARCH"

echo "= mlt (movie layer)"
echo "  libs:   $MLT_LIBS"

if test x$have_oggtheora = xyes; then
echo "= ogg-theora (xiph.org)"
echo "  libs  : $XIPH_LIBS"
echo "  cflags: $XIPH_CFLAGS"
else
	echo "= Ogg not found! libogg development is missing"
	echo "  You'll not be able to save in ogg/theora"
        echo "  this is preventing you from saving movies"
	echo "  in case you are packing a binary package please take care"
	echo "  because of this many users will miss important functionality"
fi
if test x$use_opengl = xyes; then
echo "= opengl"
echo "  libs  : $OPENGL_LIB"
fi
if test x$have_flash = xyes; then
echo "= Flash"
echo "  LIBS  : $FLASH_LIBS (static)"
echo "  this layer is experimental and broken"
fi
if test x$have_midi = xyes; then
echo "= Midi controller included"
echo "  create a Javascript to assign behaviour"
fi
if test x$have_lubrifications = xyes; then
echo "= Building machine specific lubrificated binary"
fi
if test x$debug = xtrue; then
echo "= Compiling with debugging symbols"
fi
if test x$have_profiling = xyes; then
echo "= Including support for the GNU Profiler (see man gprof)"
fi

if test x$have_alsa = xyes; then
echo "= Using Alsa sound devices"
echo "  LIBS: $ALSA_LIBS"
fi

if test x$have_jack = xyes; then
echo "= Linking library for sound input connection"
echo "  LIBS: $JACK_LIBS"
fi

if test x$have_fftw = xyes; then
echo "= Linking library for harmonics analisys"
echo "  LIBS: $FFTW_LIBS"
fi

if test x$have_sndfile = xyes; then
echo "= Linking library for audio resampling"
echo "  LIBS: $SNDFILE_LIBS"
fi

echo "= COMPILER FLAGS : $CFLAGS"
echo "= INSTALL PREFIX : $prefix"
echo "============================== now type make, may the source be with you!"
echo


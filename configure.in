dnl ==============================================================
dnl Process this file with autoconf to produce a configure script.
dnl ==============================================================
dnl $Id$

AC_INIT(src/freej.cpp)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl ==============================================================
dnl Get the operating system and version number...
dnl ==============================================================
uname=`uname`
uversion=`uname -r | sed -e 's/-.*$//g;s/[\.]//g'`
AC_MSG_CHECKING(for which platform we are compiling)
case $uname in
     Linux)
     AC_MSG_RESULT(Linux)
     AC_DEFINE(HAVE_LINUX,1,[define if compiling for Linux])
     have_linux=yes
     if test $host_cpu = powerpc; then
       AC_DEFINE(ARCH_PPC,1,[define if compiling for Linux/PPC])
       AC_DEFINE(PA_BIG_ENDIAN,1,[define big endian arch for portaudio])
       have_ppc=yes
     else
       AC_DEFINE(ARCH_X86,1,[define if compiling for Linux/x86])
       AC_DEFINE(PA_LITTLE_ENDIAN,1,[define little endian arch for portaudio])
     fi

     CPUFLAGS=`cat /proc/cpuinfo | grep flags`
     if grep "^flags.* mmx" /proc/cpuinfo > /dev/null; then
       have_mmx=yes
       AC_DEFINE(HAVE_MMX,1,[define if enabling MMX acceleration])
     fi
     if grep "^flags.* sse" /proc/cpuinfo > /dev/null; then
       have_sse=yes
       AC_DEFINE(HAVE_SSE,1,[define if enabling SSE acceleration])
     fi
     if grep "^flags.* sse2" /proc/cpuinfo > /dev/null; then
       have_sse=yes
       AC_DEFINE(HAVE_SSE2,1,[define if enabling SSE2 acceleration])
     fi

     ;;

     Darwin)
     AC_MSG_RESULT(Darwin/OSX)
     AC_DEFINE(HAVE_DARWIN,1,[define if compiling for Apple Darwin OSX])
     have_darwin=yes
     ;;
     *)
     echo "[!] Your system architecture is not supported by FreeJ"
     echo "[!] if you are interested in porting FreeJ to your architecture"
     echo "[!] you are very welcome to contact me <jaromil@dyne.org>"
     exit 0
     ;;
esac

AC_PROG_MAKE_SET

dnl ==============================================================
dnl Setup for automake
dnl ==============================================================

AM_SANITY_CHECK
AM_INIT_AUTOMAKE(FreeJ, 0.7.2-rc2)
AM_CONFIG_HEADER(config.h)

q
dnl ==============================================================
dnl Check for tools
dnl ==============================================================
AC_PROG_CC
AC_PROG_CXX

dnl Check for dlopen support
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC

AM_PROG_LIBTOOL
AM_PROG_AS

dnl ==============================================================
dnl Add the local include path and some flags
dnl ==============================================================
CFLAGS="-pipe -D_REENTRANT"
if test x$have_darwin = xyes; then
  # add the fink default path to find headers
  CFLAGS="$CFLAGS -I/sw/include"
fi

#LIBS="-lpthread -lm -ldl"

dnl Checks for header files.
AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl ==============================================================
dnl Checks for library functions.
dnl ==============================================================
AC_CHECK_FUNCS(select malloc mmap ioctl)


dnl ==============================================================
dnl Check if we are going for a STATIC BUILD
dnl ==============================================================
AC_ARG_ENABLE(static-build,
[  --enable-static-build      statically include all libraries) (default: no)],
[ if test ! x$enableval = xyes; then
    static_build=no
  else
    static_build=yes
  fi ],[ static_build=no ])




dnl ==============================================================
dnl Check for SDL
dnl ==============================================================
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
            :,
	AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
           )
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_CFLAGS)

dnl AC_HEADER_DIRENT

dnl ==============================================================
dnl Check OGG/THEORA MMX STUFF
dnl ==============================================================
PKG_CHECK_MODULES(XIPH, ogg >= 1.1 vorbis vorbisenc,
                  have_oggtheora=yes, have_oggtheora=no)
if test x$have_oggtheora = xyes ; then
   AC_DEFINE(WITH_OGGTHEORA,1,[define if compiling with Ogg/Theora encoding])
   AC_DEFINE(THEORA_SUPPORT_ENCODE,1,[define if compiling Theora encoder])
   AC_DEFINE(THEORA_SUPPORT_FLOAT,1,[define if compiling Theora float codec])
   STATIC_LIBS_SUBDIRS="$STATIC_LIBS_SUBDIRS theora-mmx"
   STATIC_LIBS_INCLUDE="$STATIC_LIBS_INCLUDE -I\$(top_srcdir)/lib/theora-mmx"
   if test x$static_build = xyes ; then
      XIPH_LIBS="`pkg-config --variable=prefix ogg`/lib/libogg.a"
      XIPS_LIBS="$XIPH_LIBS `pkg-config --variable=prefix vorbis`/lib/libvorbis.a"
      XIPS_LIBS="$XIPH_LIBS `pkg-config --variable=prefix vorbis`/lib/libvorbisenc.a"
   fi
fi


dnl ==============================================================
dnl Check if there is FREETYPE2
dnl ==============================================================
AC_CHECK_FT2(9.0.0,[
	AC_DEFINE(WITH_FT2,1,[define if compiling freetype2 layer])
	have_freetype2=yes],have_freetype2=no)

dnl ==============================================================
dnl AVCODEC AVFORMAT STUFF
dnl ==============================================================
dnl put a disable flag
AC_DEFINE(WITH_AVCODEC,1,[define if compiling movie layer linking to ffmpeg libavcodec])








dnl =====================================================
dnl CHECK if is wanted and there is AVILIB
dnl =====================================================
dnl AVI_LIBS=""
dnl if test ! x$use_ffmpeg = xyes; then
dnl    AC_AVIFILE(0.7.18)    
dnl    if test -z $HAVE_AVIFILE; then
dnl       echo "Error in avifile check, HAVE_AVIFILE is not declared"
dnl    fi
dnl    AC_ARG_ENABLE(avi,[  --enable-avi            compile Movie layer using AviFile (auto)],
dnl    # to this when --enable-avi is selected (check the value!)
dnl      [if test x$HAVE_AVIFILE = xyes -a ! x$enableval = xno; then
dnl 	AC_DEFINE(WITH_AVIFILE,1,
dnl             [define if linking to avifile library for AVI layer playback])
dnl 	have_avilayer=yes
dnl 	AC_SUBST(AVIFILE_LIBS)
dnl 	AC_SUBST(AVIFILE_CXXFLAGS)
dnl      fi],
dnl      # to this by default, when --enable-avi is not selected
dnl      [if test x$HAVE_AVIFILE = xyes; then
dnl 	AC_DEFINE(WITH_AVIFILE,1,
dnl             [define if linking to avifile library for AVI layer playback])
dnl         have_avilayer=yes
dnl         AC_SUBST(AVIFILE_LIBS)
dnl         AC_SUBST(AVIFILE_CXXFLAGS)
dnl      fi])
dnl fi

dnl dnl ==============================================================
dnl dnl ENABLE LIBFLASH
dnl dnl ==============================================================
dnl AC_ARG_ENABLE(flash,
dnl [  --enable-flash          compile with Flash layer (broken, default: no)],
dnl [ if test x$enableval = xno; then
dnl     have_flash=no
dnl   else
dnl     have_flash=yes;
dnl   fi ],[ have_flash=no ])
dnl if test x$have_flash = xyes; then
dnl    AC_DEFINE(WITH_FLASH,1,[define if compiling flash layer])
dnl    FLASH_LIBS=../libflash/libflash.a
dnl    FLASH_DIR=libflash
dnl    AC_SUBST(FLASH_LIBS)
dnl    AC_SUBST(FLASH_DIR)
dnl    echo "Using flash layer"
dnl fi






dnl ==============================================================
dnl CHECK if there is MIDI
dnl ==============================================================
AC_ARG_ENABLE(midi,
[  --enable-midi           compile with Midi controller (experimental, default: no)],
[ if test x$enableval = xno; then have_midi=no; else have_midi=yes; fi ], have_midi=no)
if test x$have_midi = xyes; then
   AC_DEFINE(WITH_MIDI,1,[define if compiling midi controller])
   echo "Compiling midi controller"
fi


dnl ==============================================================
dnl CHECK if there is joystick
dnl ==============================================================
AC_ARG_ENABLE(joystick,
[  --enable-joystick       compile with Joystick controller (experimental, default: no)],
[ if test x$enableval = xno; then have_joystick=no; else have_joystick=yes; fi ], have_joystick=no)
if test x$have_joystick = xyes; then
   AC_DEFINE(WITH_JOYSTICK,1,[define if compiling joystick controller])
   echo "Compiling joystick controller"
fi

dnl ==============================================================
dnl CHECK if there is 
dnl ==============================================================
dnl AC_ARG_ENABLE(xhacks, [  --enable-xhacks         compile with xscreenhacks layer (broken, default: no)], [ AC_DEFINE(WITH_XHACKS,1,[define if compiling xhacks layer])
dnl    have_xhacks=yes
dnl  ])

dnl ==============================================================
dnl CHECK if there is VIDEO4LINUX
dnl ==============================================================
AC_CHECK_HEADER(linux/videodev.h)
if test "$ac_cv_header_linux_videodev_h" = "yes"; then
   HAVE_V4L=yes
fi
AC_ARG_ENABLE(v4l,[  --enable-v4l            compile with Video4Linux Layer (autodetect)], [
if test x$HAVE_V4L = xyes -a ! x$enableval = xno; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi], [
if test x$HAVE_V4L = xyes; then
   AC_DEFINE(WITH_V4L,1,[define if compiling video4linux layer])
   have_video4linux=yes
fi])

dnl ==============================================================
dnl CHECK if there is LIBGLADE2
dnl ==============================================================
AC_ARG_ENABLE(glade2,
[  --enable-glade2         compile with Glade/Gtk2 interface (deprecated, default: no)], [
PKG_CHECK_MODULES(GLADE2, libglade-2.0 >= 1.99.0 gthread-2.0 >= 2.0.0, [
  AC_DEFINE(WITH_GLADE2,1,[define if compiling glade gtk+-2 GUI])
  have_glade2=yes ],[ have_glade2=no ])
])

dnl ==============================================================
dnl compile with full warnings and debugging symbols
dnl ==============================================================
AC_ARG_ENABLE(debug,
	[  --enable-debug          compile with debug symbols (no)],
	[case "${enableval}" in
		yes) debug=true ;;
		no) debug=false ;;
		*) AC_MSG_ERROR(--enable-debug expects either yes or no) ;;
	esac], [debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)
if test x$debug = xtrue; then
   CFLAGS="$CFLAGS -Wall -g -ggdb"
fi

dnl ==============================================================================
dnl CHECK to use profiling flags when compiling, for execution analysis with gprof
dnl ==============================================================================
AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile using gprof flags for execution analysis (no)],
[ if test ! x$enableval = xyes; then
    have_profiling=no
  else
    have_profiling=yes;
  fi ],[ have_profiling=no ])
if test x$have_profiling = xyes; then
  CFLAGS="$CFLAGS -pg"
fi


dnl ==============================================================
dnl CHECK to use processor specific optimizations to compile
dnl ==============================================================
AC_ARG_ENABLE(lubrify,
	       [  --enable-lubrify        compile using processor lubrifications (yes)],
	       [ 
		if test ! x$enableval = xyes; then
		    have_lubrifications=no
		else
		    have_lubrifications=yes;
		fi ],[ have_lubrifications=yes ])

if test x$have_lubrifications = xyes; then
  if test x$have_profiling = xyes -o x$debug = xtrue; then
    echo "cannot lubrify code if debug or profiling are enabled"
    have_lubrifications=no
  else
    if test x$have_darwin = xyes; then
      # use optimization flags for darwin
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
      # adding these provoke 'illegal instruction' errors in some
      # ppc/gcc combinations: -mpowerpc-gfxopt -faltivec"
    elif test x$have_ppc = xyes; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mabi=altivec -maltivec -mpowerpc-gfxopt"
    elif test x$host_cpu = xx86_64; then
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math"
    AC_DEFINE(HAVE_64BIT,1,[define if host has 64 bit])
      else
      CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -march=${host_cpu} -ffast-math"
    fi
  fi
else
  if test x$have_profiling = xno -a x$debug = xfalse; then
    echo "enabling generic compiler optimizations"
    CFLAGS="$CFLAGS -O2 -fomit-frame-pointer -ffast-math -mmmx"
  fi
fi
AC_SUBST(LUBRIFY_CFLAGS)




dnl ==============================================================
dnl CHECK TO USE OPENGL VIDEO OUTPUT
dnl ==============================================================
AC_ARG_ENABLE(opengl,
	       [  --enable-opengl         experimental opengl rendering (no)],
	       [ 
		if test ! x$enableval = xyes; then
		    use_opengl=yes 
		    OPENGL_LIB="-lGL -lGLU"
		    AC_DEFINE(WITH_OPENGL,1,[define if using experimental opengl rendering])
		    else
			use_opengl=no
		    fi

		    ],
		    [ use_opengl=no ]
		    )
AC_SUBST(OPENGL_LIB)



dnl ==============================================================
dnl CHECK if there is SDL to be compiled STATIC
dnl ==============================================================
dnl AC_MSG_CHECKING(for embedding static SDL libraries)
dnl AC_ARG_WITH(sdl-static,
dnl [  --with-sdl-static       embed SDL libraries as static library ],
dnl [ SDL_LIBS="`sdl-config --static-libs`"
dnl   AC_SUBST(SDL_LIBS)
dnl   AC_MSG_RESULT(yes) ],
dnl [ AC_MSG_RESULT(no) ])

dnl ==============================================================
dnl PortAudio v19
dnl ==============================================================
if test x$have_darwin = xyes ; then
   PORTAUDIO_LIBS="-framework AudioUnit -framework AudioToolbox -framework CoreAudio"
   dnl TODO for darwin/OSX
fi

if test x$have_linux = xyes ; then

   AC_CHECK_LIB(asound, snd_pcm_open, have_alsa=yes, have_alsa=no)
   if [[ $have_alsa = "yes" ]] ; then
      PORTAUDIO_LIBS="-lasound"
      AC_DEFINE(PA_USE_ALSA,1,[define if portaudio uses Alsa])
   fi

   PKG_CHECK_MODULES(JACK, jack, have_jack=yes, have_jack=no)
   if [[ $have_jack = "yes" ]] ; then
      PORTAUDIO_LIBS="$PORTAUDIO_LIBS $JACK_LIBS"
      AC_DEFINE(PA_USE_JACK,1,[define if portaudio uses Jack])
   fi

fi
AC_SUBST(PORTAUDIO_LIBS)



dnl ==============================================================
dnl CHECK if there is AVCODEC to be compiled STATIC
dnl ==============================================================
dnl AC_MSG_CHECKING(for embedding static ffmpeg libavcodec)
dnl AC_ARG_WITH(ffmpeg-static,
dnl [  --with-ffmpeg-static    embed ffmpeg libavcodec as static library],
dnl [if test -r "$withval"; then

dnl   AVCODEC_STATIC_DIR="`find $withval -name 'libavcodec'`"
dnl   AVCODEC_STATIC_LIB="$AVCODEC_STATIC_DIR/libavcodec.a"
dnl   AVFORMAT_STATIC_DIR="`find $withval -name 'libavformat'`"
dnl   AVFORMAT_STATIC_LIB="$AVFORMAT_STATIC_DIR/libavformat.a"
dnl   if test ! -r "$AVCODEC_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVCODEC_STATIC_LIB not found: you must compile a static library of libavcodec"
dnl   elif test ! -r "$AVFORMAT_STATIC_LIB"; then
dnl     AC_MSG_RESULT(no)
dnl     echo "!! $AVFORMAT_STATIC_LIB not found: you must compile a static library of libavformat"
dnl   else
dnl     AC_MSG_RESULT(yes)
dnl     use_ffmpeg=yes;
dnl     AC_DEFINE(WITH_AVCODEC,1,[define if compiling movie layer linking to ffmpeg libavcodec])
dnl     AVCODEC_LIBS="$AVCODEC_STATIC_LIB $AVFORMAT_STATIC_LIB"
dnl     AVCODEC_CFLAGS="-I$AVCODEC_STATIC_DIR -I$AVFORMAT_STATIC_DIR"
dnl     AC_SUBST(AVCODEC_LIBS)
dnl     AC_SUBST(AVCODEC_CFLAGS)
dnl   fi

dnl  else
dnl    AC_MSG_RESULT(no)
dnl  fi
dnl ],[AC_MSG_RESULT(no)])




dnl ==============================================================
dnl compile including the javascript interpreter
dnl ==============================================================
AC_MSG_CHECKING(for embedding JavaScript interpreter)
JS_LIBS=""
JS_CFLAGS=""
AC_ARG_WITH(javascript,
[  --with-javascript       embed the javascript interpreter as in
                          http://www.mozilla.org/js/spidermonkey],
[if test -r "$withval"; then

  JS_OBJDIR="`find $withval -name '*OBJ'| grep -v editline | grep -v fdlibm`"
  JS_LIB="$JS_OBJDIR/libjs.a"
  if test "`echo $withval|grep src`"; then
    JS_SRCDIR="$withval"
  else
    JS_SRCDIR="`find $withval -name 'src'|grep -v corba`"
  fi
  if test -z "$JS_OBJDIR"; then
    AC_MSG_RESULT(no)
    echo "!! compiled javascript object directory not found in $withval"
  elif test ! -r "$JS_LIB"; then
    AC_MSG_RESULT(no)
    echo "!! libjs.a not found in $JS_OBJDIR"
  elif test ! -r "$JS_SRCDIR/jsapi.h"; then
    AC_MSG_RESULT(no)
    echo "!! jsapi.h not found in $JS_SRCDIR"
  else
    JS_LIBS=$JS_LIB
    JS_CFLAGS="-I$JS_SRCDIR -I$JS_OBJDIR -DXP_UNIX -DJS_THREADSAFE -DJS_MULTITHREADED"
    AC_MSG_RESULT(yes)
    AC_DEFINE(WITH_JAVASCRIPT,1,
              [Define is using the javascript interpreter])
    have_javascript=yes
  fi
 else
   AC_MSG_RESULT(no)
 fi
],[AC_MSG_RESULT(no)])
AC_SUBST(JS_LIBS)
AC_SUBST(JS_CFLAGS)






AC_SUBST(BUILDLIBS)
AC_SUBST(STATIC_LIBS)


dnl ==============================================================
dnl link with memory debugging library dmalloc
dnl ==============================================================
AC_CHECK_HEADER(dmalloc.h)
if test "$ac_cv_header_dmalloc_h" = "yes"; then

AC_MSG_CHECKING(if malloc debugging is wanted)
AC_ARG_WITH(dmalloc,
[  --with-dmalloc          use dmalloc, as in
                          ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz],
[if test "$withval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(WITH_DMALLOC,1,
            [Define if using the dmalloc debugging malloc package])
  LIBS="$LIBS -ldmallocthcxx"
  DMALLOCC="dmallocc.cpp"
  have_dmalloc=yes
else
  AC_MSG_RESULT(no)
  DMALLOCC=""
  have_dmalloc=no
fi], [AC_MSG_RESULT(no)])

fi


# select CCVT CONVERSION TYPE
CCVT_CONV="ccvt_c2.c"
AC_SUBST(CCVT_CONV)

CXXFLAGS="$CFLAGS"
#CXXFLAGS="$CFLAGS $AVIFILE_CXXFLAGS $FT2_CFLAGS"
#CFLAGS="$CFLAGS $SDL_FLAGS"
#echo "LIBS are $LIBS"
#AC_SUBST(LIBS)


AC_OUTPUT([
Makefile
src/Makefile
src/include/Makefile
lib/Makefile
lib/ccvt/Makefile
lib/theora-mmx/Makefile
lib/avformat/Makefile
lib/avcodec/Makefile
lib/shout/Makefile
lib/portaudio/Makefile
lib/sdl_image/Makefile
filters/Makefile
filters/delaygrab/Makefile
filters/rotozoom/Makefile
filters/simura/Makefile
filters/baltan/Makefile
filters/vertigo/Makefile
filters/transform/Makefile
filters/edge/Makefile
filters/backlight/Makefile
filters/blur/Makefile
filters/ripple/Makefile
filters/water/Makefile
filters/cartoon/Makefile
filters/nervous/Makefile
])

echo
echo
echo "Compile $PACKAGE $VERSION for ${host} (kernel $uname$uversion)"
echo "= SDL v${SDL_VERSION}"
echo "  LIBS  : $SDL_LIBS"
echo "  CFLAGS: $SDL_CFLAGS"
if test x$have_glade2 = xyes; then
echo "= libGlade2"
echo "  this controller interface is not fully functional"
echo "  LIBS  : $GLADE2_LIBS"
echo "  CFLAGS: $GLADE2_CFLAGS"
fi
if test x$have_png = xyes; then
echo "= Png1.2"
echo "  LIBS  : $PNG_LIBS"
echo "  CFLAGS: $PNG_CFLAGS"
fi
if test x$have_freetype2 = xyes; then
echo "= FreeType2"
echo "  LIBS  : $FT2_LIBS"
echo "  CFLAGS: $FT2_CFLAGS"
fi
if test x$have_avilayer = xyes; then
echo "= AviFile"
echo "  LIBS  : $AVIFILE_LIBS"
echo "  CFLAGS: $AVIFILE_CXXFLAGS"
fi
if test x$have_xhacks = xyes; then
echo "= Xscreensaver hacks"
echo "  this layer is experimental and broken"
fi
if test x$use_ffmpeg = xyes; then
echo "= ffmpeg (libavcodec)"
echo "  libs  : $AVCODEC_LIBS"
echo "  cflags: $AVCODEC_CFLAGS"
fi
if test x$have_oggtheora = xyes; then
echo "= ogg-theora (libogg libtheora)"
echo "  libs  : $XIPH_LIBS"
echo "  cflags: $XIPH_CFLAGS"
else
	echo "= Ogg not found! libogg development is missing"
	echo "  You'll not be able to save in ogg/theora"
        echo "  this is preventing you from saving movies"
	echo "  in case you are packing a binary package please take care"
	echo "  because of this many users will miss important functionality"
fi
if test x$use_sdl_image = xyes; then
echo "= sdl_image"
echo "  libs  : $SDLIMAGE_LIBS"
fi
if test x$use_opengl = xyes; then
echo "= opengl"
echo "  libs  : $OPENGL_LIB"
fi
if test x$have_flash = xyes; then
echo "= Flash"
echo "  LIBS  : $FLASH_LIBS (static)"
echo "  this layer is experimental and broken"
fi
if test x$have_midi = xyes; then
echo "= Midi controller included"
echo "  this is experimental, edit midi_ctrl.cpp to assign behaviour"
fi
if test x$have_joystick = xyes; then
echo "= Joystick controller"
echo "  this is experimental, edit joy_ctrl.cpp to assign behaviour"
fi
if test x$have_javascript = xyes; then
echo "= JavaScript (SpiderMonkey http://www.mozilla.org/js/spidermonkey/)"
echo "  LIBS  : $JS_LIBS"
echo "  CFLAGS: $JS_CFLAGS"
fi
if test x$have_lubrifications = xyes; then
echo "= Building machine specific lubrificated binary"
fi
if test x$debug = xtrue; then
echo "= Compiling with debugging symbols"
fi
if test x$have_profiling = xyes; then
echo "= Including support for the GNU Profiler (see man gprof)"
fi
dnl portaudio-v19
if test x$have_jack = xyes; then
echo "= Including support for JACK sound input"
fi
if test x$have_alsa = xyes; then
echo "= Including support for Alsa sound devices"
fi
echo "  PORTAUDIO LIBS  : $PORTAUDIO_LIBS"

echo "= COMPILER FLAGS : $CFLAGS"
echo "= INSTALL PREFIX : $prefix"
echo "============================== now type make, may the source be with you!"
echo

